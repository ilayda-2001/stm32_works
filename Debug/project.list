
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  08007888  08007888  00008888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800801c  0800801c  0000a1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800801c  0800801c  0000901c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008024  08008024  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008024  08008024  00009024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008028  08008028  00009028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800802c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001d8  08008204  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08008204  0000a45c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0a9  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e8  00000000  00000000  000192b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0001b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008eb  00000000  00000000  0001c348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026db4  00000000  00000000  0001cc33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112e7  00000000  00000000  000439e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e95a1  00000000  00000000  00054cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e26f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e6c  00000000  00000000  0013e2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00142120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800786c 	.word	0x0800786c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800786c 	.word	0x0800786c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <MX_GPIO_Init+0x2c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a08      	ldr	r2, [pc, #32]	@ (8000f40 <MX_GPIO_Init+0x2c>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <MX_GPIO_Init+0x2c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]

}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800

08000f44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fbc <MX_I2C1_Init+0x78>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f50:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <MX_I2C1_Init+0x7c>)
 8000f52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f54:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f7e:	480e      	ldr	r0, [pc, #56]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f80:	f001 f918 	bl	80021b4 <HAL_I2C_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f8a:	f000 f9b7 	bl	80012fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4809      	ldr	r0, [pc, #36]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000f92:	f001 fe9b 	bl	8002ccc <HAL_I2CEx_ConfigAnalogFilter>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f9c:	f000 f9ae 	bl	80012fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <MX_I2C1_Init+0x74>)
 8000fa4:	f001 fedd 	bl	8002d62 <HAL_I2CEx_ConfigDigitalFilter>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fae:	f000 f9a5 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200001f4 	.word	0x200001f4
 8000fbc:	40005400 	.word	0x40005400
 8000fc0:	20404768 	.word	0x20404768

08000fc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0aa      	sub	sp, #168	@ 0xa8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	2284      	movs	r2, #132	@ 0x84
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f004 fd1a 	bl	8005a1e <memset>
  if(i2cHandle->Instance==I2C1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a22      	ldr	r2, [pc, #136]	@ (8001078 <HAL_I2C_MspInit+0xb4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d13c      	bne.n	800106e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ff4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ff8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4618      	mov	r0, r3
 8001004:	f002 fbd4 	bl	80037b0 <HAL_RCCEx_PeriphCLKConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800100e:	f000 f975 	bl	80012fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <HAL_I2C_MspInit+0xb8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a19      	ldr	r2, [pc, #100]	@ (800107c <HAL_I2C_MspInit+0xb8>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <HAL_I2C_MspInit+0xb8>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800102a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800102e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001032:	2312      	movs	r3, #18
 8001034:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001044:	2304      	movs	r3, #4
 8001046:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800104e:	4619      	mov	r1, r3
 8001050:	480b      	ldr	r0, [pc, #44]	@ (8001080 <HAL_I2C_MspInit+0xbc>)
 8001052:	f000 ff03 	bl	8001e5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <HAL_I2C_MspInit+0xb8>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	4a08      	ldr	r2, [pc, #32]	@ (800107c <HAL_I2C_MspInit+0xb8>)
 800105c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001060:	6413      	str	r3, [r2, #64]	@ 0x40
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_I2C_MspInit+0xb8>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800106e:	bf00      	nop
 8001070:	37a8      	adds	r7, #168	@ 0xa8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40005400 	.word	0x40005400
 800107c:	40023800 	.word	0x40023800
 8001080:	40020400 	.word	0x40020400

08001084 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800108c:	1d39      	adds	r1, r7, #4
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	2201      	movs	r2, #1
 8001094:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <__io_putchar+0x20>)
 8001096:	f002 ffc9 	bl	800402c <HAL_UART_Transmit>
  return ch;
 800109a:	687b      	ldr	r3, [r7, #4]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000264 	.word	0x20000264

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80010ae:	f000 f8f9 	bl	80012a4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b2:	f000 fcf3 	bl	8001a9c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b6:	f000 f889 	bl	80011cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ba:	f7ff ff2b 	bl	8000f14 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010be:	f7ff ff41 	bl	8000f44 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010c2:	f000 fa4d 	bl	8001560 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  sensor_init(&hi2c1);
 80010c6:	4839      	ldr	r0, [pc, #228]	@ (80011ac <main+0x104>)
 80010c8:	f003 fc68 	bl	800499c <sensor_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
    // Read BMP180 sensor data
    bmp_data = sensor_read_bmp180(&hi2c1);
 80010cc:	4c38      	ldr	r4, [pc, #224]	@ (80011b0 <main+0x108>)
 80010ce:	463b      	mov	r3, r7
 80010d0:	4936      	ldr	r1, [pc, #216]	@ (80011ac <main+0x104>)
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 fcfc 	bl	8004ad0 <sensor_read_bmp180>
 80010d8:	463b      	mov	r3, r7
 80010da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010de:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    // Check for errors in BMP180 reading
    if (bmp_data.status != HAL_OK)
 80010e2:	4b33      	ldr	r3, [pc, #204]	@ (80011b0 <main+0x108>)
 80010e4:	7a1b      	ldrb	r3, [r3, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d006      	beq.n	80010f8 <main+0x50>
    {
      printf("Error reading BMP180 sensor: status %d\r\n", bmp_data.status);
 80010ea:	4b31      	ldr	r3, [pc, #196]	@ (80011b0 <main+0x108>)
 80010ec:	7a1b      	ldrb	r3, [r3, #8]
 80010ee:	4619      	mov	r1, r3
 80010f0:	4830      	ldr	r0, [pc, #192]	@ (80011b4 <main+0x10c>)
 80010f2:	f004 fc3f 	bl	8005974 <iprintf>
 80010f6:	e028      	b.n	800114a <main+0xa2>
    }
    else
    {
      // Print BMP180 data over UART with 2 decimal places
      float temp = bmp_data.temperature / 100.0f;
 80010f8:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <main+0x108>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001104:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80011b8 <main+0x110>
 8001108:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800110c:	edc7 7a05 	vstr	s15, [r7, #20]
      float pressure = bmp_data.pressure / 100.0f;  // Convert Pa to hPa
 8001110:	4b27      	ldr	r3, [pc, #156]	@ (80011b0 <main+0x108>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80011b8 <main+0x110>
 8001120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001124:	edc7 7a04 	vstr	s15, [r7, #16]

      printf("BMP180: Temp=%.2f°C, Pressure=%.2f hPa\r\n", temp, pressure);
 8001128:	6978      	ldr	r0, [r7, #20]
 800112a:	f7ff fa2d 	bl	8000588 <__aeabi_f2d>
 800112e:	4604      	mov	r4, r0
 8001130:	460d      	mov	r5, r1
 8001132:	6938      	ldr	r0, [r7, #16]
 8001134:	f7ff fa28 	bl	8000588 <__aeabi_f2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	e9cd 2300 	strd	r2, r3, [sp]
 8001140:	4622      	mov	r2, r4
 8001142:	462b      	mov	r3, r5
 8001144:	481d      	ldr	r0, [pc, #116]	@ (80011bc <main+0x114>)
 8001146:	f004 fc15 	bl	8005974 <iprintf>
    }

    // Read TH09C sensor data
    th09c_data = sensor_read_th09c(&hi2c1);
 800114a:	4c1d      	ldr	r4, [pc, #116]	@ (80011c0 <main+0x118>)
 800114c:	463b      	mov	r3, r7
 800114e:	4917      	ldr	r1, [pc, #92]	@ (80011ac <main+0x104>)
 8001150:	4618      	mov	r0, r3
 8001152:	f003 fd87 	bl	8004c64 <sensor_read_th09c>
 8001156:	463b      	mov	r3, r7
 8001158:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800115c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    // Check for errors in TH09C reading
    if (th09c_data.status != HAL_OK)
 8001160:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <main+0x118>)
 8001162:	7a9b      	ldrb	r3, [r3, #10]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d006      	beq.n	8001176 <main+0xce>
    {
      printf("Error reading TH09C sensor: status %d\r\n", th09c_data.status);
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <main+0x118>)
 800116a:	7a9b      	ldrb	r3, [r3, #10]
 800116c:	4619      	mov	r1, r3
 800116e:	4815      	ldr	r0, [pc, #84]	@ (80011c4 <main+0x11c>)
 8001170:	f004 fc00 	bl	8005974 <iprintf>
 8001174:	e014      	b.n	80011a0 <main+0xf8>
    }
    else
    {
      // Print TH09C data over UART with 2 decimal places
      printf("TH09C: Temp=%.2f°C, Humidity=%.2f%%\r\n",
             th09c_data.temperature, th09c_data.humidity);
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <main+0x118>)
 8001178:	681b      	ldr	r3, [r3, #0]
      printf("TH09C: Temp=%.2f°C, Humidity=%.2f%%\r\n",
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fa04 	bl	8000588 <__aeabi_f2d>
 8001180:	4604      	mov	r4, r0
 8001182:	460d      	mov	r5, r1
             th09c_data.temperature, th09c_data.humidity);
 8001184:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <main+0x118>)
 8001186:	685b      	ldr	r3, [r3, #4]
      printf("TH09C: Temp=%.2f°C, Humidity=%.2f%%\r\n",
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f9fd 	bl	8000588 <__aeabi_f2d>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	e9cd 2300 	strd	r2, r3, [sp]
 8001196:	4622      	mov	r2, r4
 8001198:	462b      	mov	r3, r5
 800119a:	480b      	ldr	r0, [pc, #44]	@ (80011c8 <main+0x120>)
 800119c:	f004 fbea 	bl	8005974 <iprintf>
    }

    // Delay between readings
    HAL_Delay(2000);  // 2 seconds between readings
 80011a0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011a4:	f000 fcd8 	bl	8001b58 <HAL_Delay>
    bmp_data = sensor_read_bmp180(&hi2c1);
 80011a8:	e790      	b.n	80010cc <main+0x24>
 80011aa:	bf00      	nop
 80011ac:	200001f4 	.word	0x200001f4
 80011b0:	20000248 	.word	0x20000248
 80011b4:	08007888 	.word	0x08007888
 80011b8:	42c80000 	.word	0x42c80000
 80011bc:	080078b4 	.word	0x080078b4
 80011c0:	20000254 	.word	0x20000254
 80011c4:	080078e0 	.word	0x080078e0
 80011c8:	08007908 	.word	0x08007908

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b094      	sub	sp, #80	@ 0x50
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	2230      	movs	r2, #48	@ 0x30
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 fc1f 	bl	8005a1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f0:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <SystemClock_Config+0xd0>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f4:	4a29      	ldr	r2, [pc, #164]	@ (800129c <SystemClock_Config+0xd0>)
 80011f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fc:	4b27      	ldr	r3, [pc, #156]	@ (800129c <SystemClock_Config+0xd0>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001208:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <SystemClock_Config+0xd4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a24      	ldr	r2, [pc, #144]	@ (80012a0 <SystemClock_Config+0xd4>)
 800120e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <SystemClock_Config+0xd4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001224:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122a:	2302      	movs	r3, #2
 800122c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800122e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001234:	2304      	movs	r3, #4
 8001236:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001238:	23d8      	movs	r3, #216	@ 0xd8
 800123a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800123c:	2302      	movs	r3, #2
 800123e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001240:	2302      	movs	r3, #2
 8001242:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	4618      	mov	r0, r3
 800124a:	f001 fe27 	bl	8002e9c <HAL_RCC_OscConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001254:	f000 f852 	bl	80012fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001258:	f001 fdd0 	bl	8002dfc <HAL_PWREx_EnableOverDrive>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001262:	f000 f84b 	bl	80012fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001266:	230f      	movs	r3, #15
 8001268:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126a:	2302      	movs	r3, #2
 800126c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001272:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001276:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	2107      	movs	r1, #7
 8001284:	4618      	mov	r0, r3
 8001286:	f002 f8ad 	bl	80033e4 <HAL_RCC_ClockConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001290:	f000 f834 	bl	80012fc <Error_Handler>
  }
}
 8001294:	bf00      	nop
 8001296:	3750      	adds	r7, #80	@ 0x50
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40023800 	.word	0x40023800
 80012a0:	40007000 	.word	0x40007000

080012a4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80012aa:	463b      	mov	r3, r7
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80012b6:	f000 fd59 	bl	8001d6c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012be:	2300      	movs	r3, #0
 80012c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80012c6:	231f      	movs	r3, #31
 80012c8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80012ca:	2387      	movs	r3, #135	@ 0x87
 80012cc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80012d2:	2300      	movs	r3, #0
 80012d4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80012d6:	2301      	movs	r3, #1
 80012d8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012da:	2301      	movs	r3, #1
 80012dc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012e6:	463b      	mov	r3, r7
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fd77 	bl	8001ddc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80012ee:	2004      	movs	r0, #4
 80012f0:	f000 fd54 	bl	8001d9c <HAL_MPU_Enable>

}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <Error_Handler+0x8>

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HAL_MspInit+0x44>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <HAL_MspInit+0x44>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001318:	6413      	str	r3, [r2, #64]	@ 0x40
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <HAL_MspInit+0x44>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_MspInit+0x44>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	4a08      	ldr	r2, [pc, #32]	@ (800134c <HAL_MspInit+0x44>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001330:	6453      	str	r3, [r2, #68]	@ 0x44
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_MspInit+0x44>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <NMI_Handler+0x4>

08001358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <MemManage_Handler+0x4>

08001368 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <UsageFault_Handler+0x4>

08001378 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a6:	f000 fbb7 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  return 1;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_kill>:

int _kill(int pid, int sig)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013c8:	f004 fb7c 	bl	8005ac4 <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2216      	movs	r2, #22
 80013d0:	601a      	str	r2, [r3, #0]
  return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_exit>:

void _exit (int status)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013e6:	f04f 31ff 	mov.w	r1, #4294967295
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ffe7 	bl	80013be <_kill>
  while (1) {}    /* Make sure we hang here */
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <_exit+0x12>

080013f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	e00a      	b.n	800141c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001406:	f3af 8000 	nop.w
 800140a:	4601      	mov	r1, r0
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	60ba      	str	r2, [r7, #8]
 8001412:	b2ca      	uxtb	r2, r1
 8001414:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	dbf0      	blt.n	8001406 <_read+0x12>
  }

  return len;
 8001424:	687b      	ldr	r3, [r7, #4]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	e009      	b.n	8001454 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	60ba      	str	r2, [r7, #8]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fe1b 	bl	8001084 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	dbf1      	blt.n	8001440 <_write+0x12>
  }
  return len;
 800145c:	687b      	ldr	r3, [r7, #4]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <_close>:

int _close(int file)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800148e:	605a      	str	r2, [r3, #4]
  return 0;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <_isatty>:

int _isatty(int file)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d8:	4a14      	ldr	r2, [pc, #80]	@ (800152c <_sbrk+0x5c>)
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <_sbrk+0x60>)
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <_sbrk+0x64>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	@ (8001538 <_sbrk+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d207      	bcs.n	8001510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001500:	f004 fae0 	bl	8005ac4 <__errno>
 8001504:	4603      	mov	r3, r0
 8001506:	220c      	movs	r2, #12
 8001508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e009      	b.n	8001524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001510:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <_sbrk+0x64>)
 8001520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20050000 	.word	0x20050000
 8001530:	00000400 	.word	0x00000400
 8001534:	20000260 	.word	0x20000260
 8001538:	20000460 	.word	0x20000460

0800153c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <SystemInit+0x20>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001546:	4a05      	ldr	r2, [pc, #20]	@ (800155c <SystemInit+0x20>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 8001566:	4a15      	ldr	r2, [pc, #84]	@ (80015bc <MX_USART1_UART_Init+0x5c>)
 8001568:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 80015a4:	f002 fcf4 	bl	8003f90 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015ae:	f7ff fea5 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000264 	.word	0x20000264
 80015bc:	40011000 	.word	0x40011000

080015c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b0aa      	sub	sp, #168	@ 0xa8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2284      	movs	r2, #132	@ 0x84
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f004 fa1c 	bl	8005a1e <memset>
  if(uartHandle->Instance==USART1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a21      	ldr	r2, [pc, #132]	@ (8001670 <HAL_UART_MspInit+0xb0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d13a      	bne.n	8001666 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015f0:	2340      	movs	r3, #64	@ 0x40
 80015f2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015f4:	2300      	movs	r3, #0
 80015f6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 f8d7 	bl	80037b0 <HAL_RCCEx_PeriphCLKConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001608:	f7ff fe78 	bl	80012fc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800160c:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <HAL_UART_MspInit+0xb4>)
 800160e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001610:	4a18      	ldr	r2, [pc, #96]	@ (8001674 <HAL_UART_MspInit+0xb4>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	6453      	str	r3, [r2, #68]	@ 0x44
 8001618:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <HAL_UART_MspInit+0xb4>)
 800161a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001624:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <HAL_UART_MspInit+0xb4>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001628:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <HAL_UART_MspInit+0xb4>)
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001630:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <HAL_UART_MspInit+0xb4>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800163c:	23c0      	movs	r3, #192	@ 0xc0
 800163e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001654:	2307      	movs	r3, #7
 8001656:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	@ (8001678 <HAL_UART_MspInit+0xb8>)
 8001662:	f000 fbfb 	bl	8001e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001666:	bf00      	nop
 8001668:	37a8      	adds	r7, #168	@ 0xa8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40011000 	.word	0x40011000
 8001674:	40023800 	.word	0x40023800
 8001678:	40020400 	.word	0x40020400

0800167c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001680:	f7ff ff5c 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001686:	490d      	ldr	r1, [pc, #52]	@ (80016bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001688:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800168c:	e002      	b.n	8001694 <LoopCopyDataInit>

0800168e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001692:	3304      	adds	r3, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001698:	d3f9      	bcc.n	800168e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169a:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800169c:	4c0a      	ldr	r4, [pc, #40]	@ (80016c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a0:	e001      	b.n	80016a6 <LoopFillZerobss>

080016a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a4:	3204      	adds	r2, #4

080016a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a8:	d3fb      	bcc.n	80016a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016aa:	f004 fa11 	bl	8005ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ae:	f7ff fcfb 	bl	80010a8 <main>
  bx  lr    
 80016b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016bc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80016c0:	0800802c 	.word	0x0800802c
  ldr r2, =_sbss
 80016c4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80016c8:	2000045c 	.word	0x2000045c

080016cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC_IRQHandler>

080016ce <BMP180_READ_CALDATA>:
#include "BMP180_api.h"

//reads and stores the calibration register values
//the function stores the calibration data into "reg_data" (given as passed parameter)
//input: BMP180_CAL_TypeDef* reg_data
HAL_StatusTypeDef BMP180_READ_CALDATA(I2C_HandleTypeDef *hi2c, BMP180_CAL_TypeDef* reg_data) {
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b08c      	sub	sp, #48	@ 0x30
 80016d2:	af04      	add	r7, sp, #16
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef output;
    uint8_t data[22];

    // Reading out the calibration registers
    output = BMP_READ(hi2c, BMP180_CALREGS_BASE_ADDRESS, data, sizeof(data));
 80016d8:	f04f 33ff 	mov.w	r3, #4294967295
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	2316      	movs	r3, #22
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2301      	movs	r3, #1
 80016ea:	22aa      	movs	r2, #170	@ 0xaa
 80016ec:	21ee      	movs	r1, #238	@ 0xee
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 ff10 	bl	8002514 <HAL_I2C_Mem_Read>
 80016f4:	4603      	mov	r3, r0
 80016f6:	77fb      	strb	r3, [r7, #31]

    if (output == HAL_OK) {
 80016f8:	7ffb      	ldrb	r3, [r7, #31]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d170      	bne.n	80017e0 <BMP180_READ_CALDATA+0x112>
        /* Parameters AC1-AC6 */
        reg_data->AC1 = (int16_t)((data[0] << 8) | data[1]);
 80016fe:	7a3b      	ldrb	r3, [r7, #8]
 8001700:	b21b      	sxth	r3, r3
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	b21a      	sxth	r2, r3
 8001706:	7a7b      	ldrb	r3, [r7, #9]
 8001708:	b21b      	sxth	r3, r3
 800170a:	4313      	orrs	r3, r2
 800170c:	b21a      	sxth	r2, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	801a      	strh	r2, [r3, #0]
        reg_data->AC2 = (int16_t)((data[2] << 8) | data[3]);
 8001712:	7abb      	ldrb	r3, [r7, #10]
 8001714:	b21b      	sxth	r3, r3
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	b21a      	sxth	r2, r3
 800171a:	7afb      	ldrb	r3, [r7, #11]
 800171c:	b21b      	sxth	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b21a      	sxth	r2, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	805a      	strh	r2, [r3, #2]
        reg_data->AC3 = (int16_t)((data[4] << 8) | data[5]);
 8001726:	7b3b      	ldrb	r3, [r7, #12]
 8001728:	b21b      	sxth	r3, r3
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	b21a      	sxth	r2, r3
 800172e:	7b7b      	ldrb	r3, [r7, #13]
 8001730:	b21b      	sxth	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b21a      	sxth	r2, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	809a      	strh	r2, [r3, #4]
        reg_data->AC4 = (uint16_t)((data[6] << 8) | data[7]);
 800173a:	7bbb      	ldrb	r3, [r7, #14]
 800173c:	b21b      	sxth	r3, r3
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	b21a      	sxth	r2, r3
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	b21b      	sxth	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	b21b      	sxth	r3, r3
 800174a:	b29a      	uxth	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	80da      	strh	r2, [r3, #6]
        reg_data->AC5 = (uint16_t)((data[8] << 8) | data[9]);
 8001750:	7c3b      	ldrb	r3, [r7, #16]
 8001752:	b21b      	sxth	r3, r3
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	b21a      	sxth	r2, r3
 8001758:	7c7b      	ldrb	r3, [r7, #17]
 800175a:	b21b      	sxth	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b21b      	sxth	r3, r3
 8001760:	b29a      	uxth	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	811a      	strh	r2, [r3, #8]
        reg_data->AC6 = (uint16_t)((data[10] << 8) | data[11]);
 8001766:	7cbb      	ldrb	r3, [r7, #18]
 8001768:	b21b      	sxth	r3, r3
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	b21a      	sxth	r2, r3
 800176e:	7cfb      	ldrb	r3, [r7, #19]
 8001770:	b21b      	sxth	r3, r3
 8001772:	4313      	orrs	r3, r2
 8001774:	b21b      	sxth	r3, r3
 8001776:	b29a      	uxth	r2, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	815a      	strh	r2, [r3, #10]

        /* Parameters B1,B2 */
        reg_data->B1 = (int16_t)((data[12] << 8) | data[13]);
 800177c:	7d3b      	ldrb	r3, [r7, #20]
 800177e:	b21b      	sxth	r3, r3
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	b21a      	sxth	r2, r3
 8001784:	7d7b      	ldrb	r3, [r7, #21]
 8001786:	b21b      	sxth	r3, r3
 8001788:	4313      	orrs	r3, r2
 800178a:	b21a      	sxth	r2, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	819a      	strh	r2, [r3, #12]
        reg_data->B2 = (int16_t)((data[14] << 8) | data[15]);
 8001790:	7dbb      	ldrb	r3, [r7, #22]
 8001792:	b21b      	sxth	r3, r3
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	b21a      	sxth	r2, r3
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	b21b      	sxth	r3, r3
 800179c:	4313      	orrs	r3, r2
 800179e:	b21a      	sxth	r2, r3
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	81da      	strh	r2, [r3, #14]

        /* Parameters MB,MC,MD */
        reg_data->MB = (int16_t)((data[16] << 8) | data[17]);
 80017a4:	7e3b      	ldrb	r3, [r7, #24]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	7e7b      	ldrb	r3, [r7, #25]
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	821a      	strh	r2, [r3, #16]
        reg_data->MC = (int16_t)((data[18] << 8) | data[19]);
 80017b8:	7ebb      	ldrb	r3, [r7, #26]
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	b21a      	sxth	r2, r3
 80017c0:	7efb      	ldrb	r3, [r7, #27]
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b21a      	sxth	r2, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	825a      	strh	r2, [r3, #18]
        reg_data->MD = (int16_t)((data[20] << 8) | data[21]);
 80017cc:	7f3b      	ldrb	r3, [r7, #28]
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	7f7b      	ldrb	r3, [r7, #29]
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	4313      	orrs	r3, r2
 80017da:	b21a      	sxth	r2, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	829a      	strh	r2, [r3, #20]
    }

    return output;
 80017e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3720      	adds	r7, #32
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <BMP180_READ_UT>:
//     the uncompensated temperature value will be stored in result->MSB and result->LSB
//output: unsigned char output
//     output == SUCCESSFUL -> the conversion was successful
//     output == FAILED -> the converion faild
//     the values of SUCCESSFUL and FAILD are defined in "stm32fxx_i2c_extension.h"
HAL_StatusTypeDef BMP180_READ_UT(I2C_HandleTypeDef *hi2c, BMP180_CTRL_TypeDef* result) {
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b088      	sub	sp, #32
 80017ee:	af04      	add	r7, sp, #16
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef output;
    uint8_t data[2];

    // Command to measure temperature
    data[0] = BMP180_COM_CTRL_MEAS_TEMP;
 80017f4:	232e      	movs	r3, #46	@ 0x2e
 80017f6:	733b      	strb	r3, [r7, #12]
    output = BMP_WRITE(hi2c, BMP180_ADDR_CTRL_MEAS, data, 1); // Note: sending only 1 byte command
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
 80017fc:	9302      	str	r3, [sp, #8]
 80017fe:	2301      	movs	r3, #1
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2301      	movs	r3, #1
 800180a:	22f4      	movs	r2, #244	@ 0xf4
 800180c:	21ee      	movs	r1, #238	@ 0xee
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fd6c 	bl	80022ec <HAL_I2C_Mem_Write>
 8001814:	4603      	mov	r3, r0
 8001816:	73fb      	strb	r3, [r7, #15]
    if(output != HAL_OK)
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <BMP180_READ_UT+0x38>
        return output;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	e01c      	b.n	800185c <BMP180_READ_UT+0x72>

    // Wait for temperature conversion to complete
    Delay(BMP180_WAIT_UT);
 8001822:	202d      	movs	r0, #45	@ 0x2d
 8001824:	f000 f998 	bl	8001b58 <HAL_Delay>

    // Read the uncompensated temperature value
    output = BMP_READ(hi2c, BMP180_ADDR_OUT_MSB, data, sizeof(data));
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	2302      	movs	r3, #2
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2301      	movs	r3, #1
 800183a:	22f6      	movs	r2, #246	@ 0xf6
 800183c:	21ee      	movs	r1, #238	@ 0xee
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fe68 	bl	8002514 <HAL_I2C_Mem_Read>
 8001844:	4603      	mov	r3, r0
 8001846:	73fb      	strb	r3, [r7, #15]
    if(output == HAL_OK) {
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d105      	bne.n	800185a <BMP180_READ_UT+0x70>
        result->MSB = data[0];
 800184e:	7b3a      	ldrb	r2, [r7, #12]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	709a      	strb	r2, [r3, #2]
        result->LSB = data[1];
 8001854:	7b7a      	ldrb	r2, [r7, #13]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	70da      	strb	r2, [r3, #3]
    }

    return output;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <BMP180_CALC_TEMP>:

//calculates valid temperature from uncompnsated temperature
//input: - unsigned long up: uncompensated temperature
//       - BMP180_CAL_TypeDef *reg_data: calibration register values
//output: short, the calculated temperature in 0.1C�
short BMP180_CALC_TEMP(unsigned long ut,BMP180_CAL_TypeDef *reg_data){
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
	short temperature;
	long x1, x2;
	x1=(((long)ut - (long)reg_data->AC6) * (long)reg_data->AC5) >> 15;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	8952      	ldrh	r2, [r2, #10]
 8001874:	b292      	uxth	r2, r2
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	8912      	ldrh	r2, [r2, #8]
 800187c:	b292      	uxth	r2, r2
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	13db      	asrs	r3, r3, #15
 8001884:	617b      	str	r3, [r7, #20]
	x2=((long)reg_data->MC << 11) / (x1 + reg_data->MD);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	8a5b      	ldrh	r3, [r3, #18]
 800188a:	b21b      	sxth	r3, r3
 800188c:	02da      	lsls	r2, r3, #11
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	8a9b      	ldrh	r3, [r3, #20]
 8001892:	b21b      	sxth	r3, r3
 8001894:	4619      	mov	r1, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	440b      	add	r3, r1
 800189a:	fb92 f3f3 	sdiv	r3, r2, r3
 800189e:	613b      	str	r3, [r7, #16]
	reg_data->B5 = x1+x2;
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	441a      	add	r2, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	619a      	str	r2, [r3, #24]
	temperature = (reg_data->B5+8) >> 4;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	3308      	adds	r3, #8
 80018b0:	111b      	asrs	r3, r3, #4
 80018b2:	81fb      	strh	r3, [r7, #14]
	return temperature;
 80018b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	371c      	adds	r7, #28
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <BMP180_READ_UP>:
//     the uncompensated pressure value will be stored in result->MSB, result->LSB and result->XLSB
//output: unsigned char output
//     output == SUCCESSFUL -> the conversion was successful
//     output == FAILED -> the converion faild
//     the values of SUCCESSFUL and FAILD are defined in "stm32fxx_i2c_extension.h"
HAL_StatusTypeDef BMP180_READ_UP(I2C_HandleTypeDef *hi2c, BMP180_CTRL_TypeDef* result, uint8_t oss) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	@ 0x28
 80018c8:	af04      	add	r7, sp, #16
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	4613      	mov	r3, r2
 80018d0:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef output;
    uint8_t data[3];
    uint8_t command;

    // Prepare command byte with oversampling setting
    command = BMP180_COM_CTRL_MEAS_PRESS | (oss << BMP180_BIT_CTRL_MEAS_OSS_SHIFT);
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	019b      	lsls	r3, r3, #6
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	f043 0334 	orr.w	r3, r3, #52	@ 0x34
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	74fb      	strb	r3, [r7, #19]

    // Send command to start pressure measurement
    output = BMP_WRITE(hi2c, BMP180_ADDR_CTRL_MEAS, &command, 1);
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	2301      	movs	r3, #1
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	f107 0313 	add.w	r3, r7, #19
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2301      	movs	r3, #1
 80018f6:	22f4      	movs	r2, #244	@ 0xf4
 80018f8:	21ee      	movs	r1, #238	@ 0xee
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 fcf6 	bl	80022ec <HAL_I2C_Mem_Write>
 8001900:	4603      	mov	r3, r0
 8001902:	75fb      	strb	r3, [r7, #23]
    if(output != HAL_OK)
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <BMP180_READ_UP+0x4a>
        return output;
 800190a:	7dfb      	ldrb	r3, [r7, #23]
 800190c:	e024      	b.n	8001958 <BMP180_READ_UP+0x94>

    // Wait based on oversampling setting
    Delay((BMP180_WAIT_UP_LOWPOWER-30) + (30 << oss));
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	221e      	movs	r2, #30
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	330f      	adds	r3, #15
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f91d 	bl	8001b58 <HAL_Delay>

    // Read the uncompensated pressure value (3 bytes)
    output = BMP_READ(hi2c, BMP180_ADDR_OUT_MSB, data, sizeof(data));
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	9302      	str	r3, [sp, #8]
 8001924:	2303      	movs	r3, #3
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2301      	movs	r3, #1
 8001930:	22f6      	movs	r2, #246	@ 0xf6
 8001932:	21ee      	movs	r1, #238	@ 0xee
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 fded 	bl	8002514 <HAL_I2C_Mem_Read>
 800193a:	4603      	mov	r3, r0
 800193c:	75fb      	strb	r3, [r7, #23]
    if(output == HAL_OK) {
 800193e:	7dfb      	ldrb	r3, [r7, #23]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d108      	bne.n	8001956 <BMP180_READ_UP+0x92>
        result->MSB = data[0];
 8001944:	7d3a      	ldrb	r2, [r7, #20]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	709a      	strb	r2, [r3, #2]
        result->LSB = data[1];
 800194a:	7d7a      	ldrb	r2, [r7, #21]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	70da      	strb	r2, [r3, #3]
        result->XLSB = data[2];
 8001950:	7dba      	ldrb	r2, [r7, #22]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	711a      	strb	r2, [r3, #4]
    }

    return output;
 8001956:	7dfb      	ldrb	r3, [r7, #23]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <BMP180_CALC_PRESS>:
//             typical values of oss:     BMP180_OSS_LOWPOWER
//                                        BMP180_OSS_STANDARD
//                                        BMP180_OSS_HIGHRES
//                                        BMP180_OSS_ULTRAHIGHRES
//output: long, the calculated pressure in Pa
long BMP180_CALC_PRESS(unsigned long up,BMP180_CAL_TypeDef *reg_data, unsigned char oss){
 8001960:	b480      	push	{r7}
 8001962:	b08d      	sub	sp, #52	@ 0x34
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	4613      	mov	r3, r2
 800196c:	71fb      	strb	r3, [r7, #7]
	long pressure, x1, x2, x3, b3, b6;
	unsigned long b4, b7;

	b6=reg_data->B5 - 4000;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8001976:	62bb      	str	r3, [r7, #40]	@ 0x28

	/*****calculate B3************/
	x1 = (b6*b6) >> 12;
 8001978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197a:	fb03 f303 	mul.w	r3, r3, r3
 800197e:	131b      	asrs	r3, r3, #12
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
	x1 *= reg_data->B2;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	89db      	ldrh	r3, [r3, #14]
 8001986:	b21b      	sxth	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	fb02 f303 	mul.w	r3, r2, r3
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
	x1 >>= 11;
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	12db      	asrs	r3, r3, #11
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
	x2 = (reg_data->AC2*b6);
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	885b      	ldrh	r3, [r3, #2]
 800199c:	b21b      	sxth	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	623b      	str	r3, [r7, #32]
	x2 >>= 11;
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	12db      	asrs	r3, r3, #11
 80019ac:	623b      	str	r3, [r7, #32]
	x3 = x1 + x2;
 80019ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	4413      	add	r3, r2
 80019b4:	61fb      	str	r3, [r7, #28]
	b3 = ((((((long)reg_data->AC1)<<2) + x3) << oss)+2) >> 2;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	009a      	lsls	r2, r3, #2
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	441a      	add	r2, r3
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	3302      	adds	r3, #2
 80019ca:	109b      	asrs	r3, r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]

	/*****calculate B4************/
	x1 = (reg_data->AC3 * b6) >> 13;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	889b      	ldrh	r3, [r3, #4]
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d8:	fb02 f303 	mul.w	r3, r2, r3
 80019dc:	135b      	asrs	r3, r3, #13
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
	x2 = (reg_data->B1 * ((b6*b6) >> 12)) >> 16;
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	899b      	ldrh	r3, [r3, #12]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ea:	fb03 f303 	mul.w	r3, r3, r3
 80019ee:	131b      	asrs	r3, r3, #12
 80019f0:	fb02 f303 	mul.w	r3, r2, r3
 80019f4:	141b      	asrs	r3, r3, #16
 80019f6:	623b      	str	r3, [r7, #32]
	x3 = ((x1 + x2) + 2) >> 2;
 80019f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	4413      	add	r3, r2
 80019fe:	3302      	adds	r3, #2
 8001a00:	109b      	asrs	r3, r3, #2
 8001a02:	61fb      	str	r3, [r7, #28]
	b4 = (reg_data->AC4 * (unsigned long) (x3 + 32768)) >> 15;
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	88db      	ldrh	r3, [r3, #6]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	0bdb      	lsrs	r3, r3, #15
 8001a18:	617b      	str	r3, [r7, #20]
	b7 = ((unsigned long)(up - b3) * (50000>>oss));
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	79fa      	ldrb	r2, [r7, #7]
 8001a22:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8001a26:	fa41 f202 	asr.w	r2, r1, r2
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	613b      	str	r3, [r7, #16]
	if (b7 < 0x80000000)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db06      	blt.n	8001a44 <BMP180_CALC_PRESS+0xe4>
		pressure = (b7 << 1) / b4;
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	005a      	lsls	r2, r3, #1
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a42:	e005      	b.n	8001a50 <BMP180_CALC_PRESS+0xf0>
	else
		pressure = (b7 / b4) << 1;
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	x1 = pressure >> 8;
 8001a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a52:	121b      	asrs	r3, r3, #8
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
	x1 *= x1;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	fb03 f303 	mul.w	r3, r3, r3
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
	x1 = (x1 * 3038) >> 16;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	f640 32de 	movw	r2, #3038	@ 0xbde
 8001a64:	fb02 f303 	mul.w	r3, r2, r3
 8001a68:	141b      	asrs	r3, r3, #16
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
	x2 = (pressure * -7357) >> 16;
 8001a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a98 <BMP180_CALC_PRESS+0x138>)
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	141b      	asrs	r3, r3, #16
 8001a76:	623b      	str	r3, [r7, #32]
	pressure += (x1 + x2 + 3791) >> 4;/* pressure in Pa*/
 8001a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8001a82:	111b      	asrs	r3, r3, #4
 8001a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a86:	4413      	add	r3, r2
 8001a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return pressure;
 8001a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3734      	adds	r7, #52	@ 0x34
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	ffffe343 	.word	0xffffe343

08001a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	f000 f92f 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa6:	200f      	movs	r0, #15
 8001aa8:	f000 f806 	bl	8001ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aac:	f7ff fc2c 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_InitTick+0x54>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <HAL_InitTick+0x58>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f93b 	bl	8001d52 <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f000 f911 	bl	8001d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	@ (8001b14 <HAL_InitTick+0x5c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000008 	.word	0x20000008
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	200002ec 	.word	0x200002ec

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	@ (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200002ec 	.word	0x200002ec

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ffee 	bl	8001b40 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b72:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_Delay+0x44>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffde 	bl	8001b40 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <__NVIC_SetPriorityGrouping+0x40>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bce:	4a04      	ldr	r2, [pc, #16]	@ (8001be0 <__NVIC_SetPriorityGrouping+0x40>)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	60d3      	str	r3, [r2, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00
 8001be4:	05fa0000 	.word	0x05fa0000

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db0a      	blt.n	8001c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	490c      	ldr	r1, [pc, #48]	@ (8001c50 <__NVIC_SetPriority+0x4c>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	0112      	lsls	r2, r2, #4
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c2c:	e00a      	b.n	8001c44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4908      	ldr	r1, [pc, #32]	@ (8001c54 <__NVIC_SetPriority+0x50>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	3b04      	subs	r3, #4
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	761a      	strb	r2, [r3, #24]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	@ 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f1c3 0307 	rsb	r3, r3, #7
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	bf28      	it	cs
 8001c76:	2304      	movcs	r3, #4
 8001c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d902      	bls.n	8001c88 <NVIC_EncodePriority+0x30>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3b03      	subs	r3, #3
 8001c86:	e000      	b.n	8001c8a <NVIC_EncodePriority+0x32>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	4313      	orrs	r3, r2
         );
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	@ 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cd0:	d301      	bcc.n	8001cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00f      	b.n	8001cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <SysTick_Config+0x40>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cde:	210f      	movs	r1, #15
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f7ff ff8e 	bl	8001c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce8:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <SysTick_Config+0x40>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cee:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <SysTick_Config+0x40>)
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	e000e010 	.word	0xe000e010

08001d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff47 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2c:	f7ff ff5c 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6978      	ldr	r0, [r7, #20]
 8001d38:	f7ff ff8e 	bl	8001c58 <NVIC_EncodePriority>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff5d 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ffb0 	bl	8001cc0 <SysTick_Config>
 8001d60:	4603      	mov	r3, r0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d70:	f3bf 8f5f 	dmb	sy
}
 8001d74:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d76:	4b07      	ldr	r3, [pc, #28]	@ (8001d94 <HAL_MPU_Disable+0x28>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7a:	4a06      	ldr	r2, [pc, #24]	@ (8001d94 <HAL_MPU_Disable+0x28>)
 8001d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d80:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d82:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_MPU_Disable+0x2c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	605a      	str	r2, [r3, #4]
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00
 8001d98:	e000ed90 	.word	0xe000ed90

08001d9c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001da4:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd4 <HAL_MPU_Enable+0x38>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <HAL_MPU_Enable+0x3c>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	4a09      	ldr	r2, [pc, #36]	@ (8001dd8 <HAL_MPU_Enable+0x3c>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001dba:	f3bf 8f4f 	dsb	sy
}
 8001dbe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dc0:	f3bf 8f6f 	isb	sy
}
 8001dc4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000ed90 	.word	0xe000ed90
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	785a      	ldrb	r2, [r3, #1]
 8001de8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <HAL_MPU_ConfigRegion+0x7c>)
 8001dea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001dec:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <HAL_MPU_ConfigRegion+0x7c>)
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <HAL_MPU_ConfigRegion+0x7c>)
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001df8:	4a17      	ldr	r2, [pc, #92]	@ (8001e58 <HAL_MPU_ConfigRegion+0x7c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	7b1b      	ldrb	r3, [r3, #12]
 8001e04:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7adb      	ldrb	r3, [r3, #11]
 8001e0a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	7a9b      	ldrb	r3, [r3, #10]
 8001e12:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7b5b      	ldrb	r3, [r3, #13]
 8001e1a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7b9b      	ldrb	r3, [r3, #14]
 8001e22:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7bdb      	ldrb	r3, [r3, #15]
 8001e2a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7a5b      	ldrb	r3, [r3, #9]
 8001e32:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7a1b      	ldrb	r3, [r3, #8]
 8001e3a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e3c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	7812      	ldrb	r2, [r2, #0]
 8001e42:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e44:	4a04      	ldr	r2, [pc, #16]	@ (8001e58 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e46:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e48:	6113      	str	r3, [r2, #16]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed90 	.word	0xe000ed90

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	@ 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	e175      	b.n	8002168 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	f040 8164 	bne.w	8002162 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d005      	beq.n	8001eb2 <HAL_GPIO_Init+0x56>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d130      	bne.n	8001f14 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 0201 	and.w	r2, r3, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d017      	beq.n	8001f50 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d123      	bne.n	8001fa4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	08da      	lsrs	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3208      	adds	r2, #8
 8001f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0203 	and.w	r2, r3, #3
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80be 	beq.w	8002162 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	4b66      	ldr	r3, [pc, #408]	@ (8002180 <HAL_GPIO_Init+0x324>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fea:	4a65      	ldr	r2, [pc, #404]	@ (8002180 <HAL_GPIO_Init+0x324>)
 8001fec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ff2:	4b63      	ldr	r3, [pc, #396]	@ (8002180 <HAL_GPIO_Init+0x324>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ffe:	4a61      	ldr	r2, [pc, #388]	@ (8002184 <HAL_GPIO_Init+0x328>)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	220f      	movs	r2, #15
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a58      	ldr	r2, [pc, #352]	@ (8002188 <HAL_GPIO_Init+0x32c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d037      	beq.n	800209a <HAL_GPIO_Init+0x23e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a57      	ldr	r2, [pc, #348]	@ (800218c <HAL_GPIO_Init+0x330>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d031      	beq.n	8002096 <HAL_GPIO_Init+0x23a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a56      	ldr	r2, [pc, #344]	@ (8002190 <HAL_GPIO_Init+0x334>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d02b      	beq.n	8002092 <HAL_GPIO_Init+0x236>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a55      	ldr	r2, [pc, #340]	@ (8002194 <HAL_GPIO_Init+0x338>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d025      	beq.n	800208e <HAL_GPIO_Init+0x232>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a54      	ldr	r2, [pc, #336]	@ (8002198 <HAL_GPIO_Init+0x33c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01f      	beq.n	800208a <HAL_GPIO_Init+0x22e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a53      	ldr	r2, [pc, #332]	@ (800219c <HAL_GPIO_Init+0x340>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0x22a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a52      	ldr	r2, [pc, #328]	@ (80021a0 <HAL_GPIO_Init+0x344>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0x226>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a51      	ldr	r2, [pc, #324]	@ (80021a4 <HAL_GPIO_Init+0x348>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_GPIO_Init+0x222>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a50      	ldr	r2, [pc, #320]	@ (80021a8 <HAL_GPIO_Init+0x34c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x21e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4f      	ldr	r2, [pc, #316]	@ (80021ac <HAL_GPIO_Init+0x350>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_GPIO_Init+0x21a>
 8002072:	2309      	movs	r3, #9
 8002074:	e012      	b.n	800209c <HAL_GPIO_Init+0x240>
 8002076:	230a      	movs	r3, #10
 8002078:	e010      	b.n	800209c <HAL_GPIO_Init+0x240>
 800207a:	2308      	movs	r3, #8
 800207c:	e00e      	b.n	800209c <HAL_GPIO_Init+0x240>
 800207e:	2307      	movs	r3, #7
 8002080:	e00c      	b.n	800209c <HAL_GPIO_Init+0x240>
 8002082:	2306      	movs	r3, #6
 8002084:	e00a      	b.n	800209c <HAL_GPIO_Init+0x240>
 8002086:	2305      	movs	r3, #5
 8002088:	e008      	b.n	800209c <HAL_GPIO_Init+0x240>
 800208a:	2304      	movs	r3, #4
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x240>
 800208e:	2303      	movs	r3, #3
 8002090:	e004      	b.n	800209c <HAL_GPIO_Init+0x240>
 8002092:	2302      	movs	r3, #2
 8002094:	e002      	b.n	800209c <HAL_GPIO_Init+0x240>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_GPIO_Init+0x240>
 800209a:	2300      	movs	r3, #0
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	f002 0203 	and.w	r2, r2, #3
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	4093      	lsls	r3, r2
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020ac:	4935      	ldr	r1, [pc, #212]	@ (8002184 <HAL_GPIO_Init+0x328>)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3302      	adds	r3, #2
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ba:	4b3d      	ldr	r3, [pc, #244]	@ (80021b0 <HAL_GPIO_Init+0x354>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020de:	4a34      	ldr	r2, [pc, #208]	@ (80021b0 <HAL_GPIO_Init+0x354>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e4:	4b32      	ldr	r3, [pc, #200]	@ (80021b0 <HAL_GPIO_Init+0x354>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002108:	4a29      	ldr	r2, [pc, #164]	@ (80021b0 <HAL_GPIO_Init+0x354>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800210e:	4b28      	ldr	r3, [pc, #160]	@ (80021b0 <HAL_GPIO_Init+0x354>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002132:	4a1f      	ldr	r2, [pc, #124]	@ (80021b0 <HAL_GPIO_Init+0x354>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002138:	4b1d      	ldr	r3, [pc, #116]	@ (80021b0 <HAL_GPIO_Init+0x354>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800215c:	4a14      	ldr	r2, [pc, #80]	@ (80021b0 <HAL_GPIO_Init+0x354>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3301      	adds	r3, #1
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b0f      	cmp	r3, #15
 800216c:	f67f ae86 	bls.w	8001e7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3724      	adds	r7, #36	@ 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	40013800 	.word	0x40013800
 8002188:	40020000 	.word	0x40020000
 800218c:	40020400 	.word	0x40020400
 8002190:	40020800 	.word	0x40020800
 8002194:	40020c00 	.word	0x40020c00
 8002198:	40021000 	.word	0x40021000
 800219c:	40021400 	.word	0x40021400
 80021a0:	40021800 	.word	0x40021800
 80021a4:	40021c00 	.word	0x40021c00
 80021a8:	40022000 	.word	0x40022000
 80021ac:	40022400 	.word	0x40022400
 80021b0:	40013c00 	.word	0x40013c00

080021b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e08b      	b.n	80022de <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe fef2 	bl	8000fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2224      	movs	r2, #36	@ 0x24
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002204:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002214:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	e006      	b.n	800223c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800223a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d108      	bne.n	8002256 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	e007      	b.n	8002266 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002264:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b1d      	ldr	r3, [pc, #116]	@ (80022e8 <HAL_I2C_Init+0x134>)
 8002272:	430b      	orrs	r3, r1
 8002274:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002284:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69d9      	ldr	r1, [r3, #28]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1a      	ldr	r2, [r3, #32]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2220      	movs	r2, #32
 80022ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	02008000 	.word	0x02008000

080022ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	4608      	mov	r0, r1
 80022f6:	4611      	mov	r1, r2
 80022f8:	461a      	mov	r2, r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	817b      	strh	r3, [r7, #10]
 80022fe:	460b      	mov	r3, r1
 8002300:	813b      	strh	r3, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b20      	cmp	r3, #32
 8002310:	f040 80f9 	bne.w	8002506 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_I2C_Mem_Write+0x34>
 800231a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002326:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0ed      	b.n	8002508 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_I2C_Mem_Write+0x4e>
 8002336:	2302      	movs	r3, #2
 8002338:	e0e6      	b.n	8002508 <HAL_I2C_Mem_Write+0x21c>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002342:	f7ff fbfd 	bl	8001b40 <HAL_GetTick>
 8002346:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2319      	movs	r3, #25
 800234e:	2201      	movs	r2, #1
 8002350:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 fac3 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0d1      	b.n	8002508 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2221      	movs	r2, #33	@ 0x21
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2240      	movs	r2, #64	@ 0x40
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a3a      	ldr	r2, [r7, #32]
 800237e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002384:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800238c:	88f8      	ldrh	r0, [r7, #6]
 800238e:	893a      	ldrh	r2, [r7, #8]
 8002390:	8979      	ldrh	r1, [r7, #10]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	4603      	mov	r3, r0
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f9d3 	bl	8002748 <I2C_RequestMemoryWrite>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0a9      	b.n	8002508 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2bff      	cmp	r3, #255	@ 0xff
 80023bc:	d90e      	bls.n	80023dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	22ff      	movs	r2, #255	@ 0xff
 80023c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	8979      	ldrh	r1, [r7, #10]
 80023cc:	2300      	movs	r3, #0
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 fc47 	bl	8002c68 <I2C_TransferConfig>
 80023da:	e00f      	b.n	80023fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	8979      	ldrh	r1, [r7, #10]
 80023ee:	2300      	movs	r3, #0
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 fc36 	bl	8002c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 fac6 	bl	8002992 <I2C_WaitOnTXISFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e07b      	b.n	8002508 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d034      	beq.n	80024b4 <HAL_I2C_Mem_Write+0x1c8>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244e:	2b00      	cmp	r3, #0
 8002450:	d130      	bne.n	80024b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002458:	2200      	movs	r2, #0
 800245a:	2180      	movs	r1, #128	@ 0x80
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 fa3f 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e04d      	b.n	8002508 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	2bff      	cmp	r3, #255	@ 0xff
 8002474:	d90e      	bls.n	8002494 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	22ff      	movs	r2, #255	@ 0xff
 800247a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002480:	b2da      	uxtb	r2, r3
 8002482:	8979      	ldrh	r1, [r7, #10]
 8002484:	2300      	movs	r3, #0
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fbeb 	bl	8002c68 <I2C_TransferConfig>
 8002492:	e00f      	b.n	80024b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	8979      	ldrh	r1, [r7, #10]
 80024a6:	2300      	movs	r3, #0
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fbda 	bl	8002c68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d19e      	bne.n	80023fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 faac 	bl	8002a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e01a      	b.n	8002508 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2220      	movs	r2, #32
 80024d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <HAL_I2C_Mem_Write+0x224>)
 80024e6:	400b      	ands	r3, r1
 80024e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002506:	2302      	movs	r3, #2
  }
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	fe00e800 	.word	0xfe00e800

08002514 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	4608      	mov	r0, r1
 800251e:	4611      	mov	r1, r2
 8002520:	461a      	mov	r2, r3
 8002522:	4603      	mov	r3, r0
 8002524:	817b      	strh	r3, [r7, #10]
 8002526:	460b      	mov	r3, r1
 8002528:	813b      	strh	r3, [r7, #8]
 800252a:	4613      	mov	r3, r2
 800252c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b20      	cmp	r3, #32
 8002538:	f040 80fd 	bne.w	8002736 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_I2C_Mem_Read+0x34>
 8002542:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800254e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0f1      	b.n	8002738 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_I2C_Mem_Read+0x4e>
 800255e:	2302      	movs	r3, #2
 8002560:	e0ea      	b.n	8002738 <HAL_I2C_Mem_Read+0x224>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800256a:	f7ff fae9 	bl	8001b40 <HAL_GetTick>
 800256e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2319      	movs	r3, #25
 8002576:	2201      	movs	r2, #1
 8002578:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f9af 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0d5      	b.n	8002738 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2222      	movs	r2, #34	@ 0x22
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2240      	movs	r2, #64	@ 0x40
 8002598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a3a      	ldr	r2, [r7, #32]
 80025a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80025ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025b4:	88f8      	ldrh	r0, [r7, #6]
 80025b6:	893a      	ldrh	r2, [r7, #8]
 80025b8:	8979      	ldrh	r1, [r7, #10]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	4603      	mov	r3, r0
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f913 	bl	80027f0 <I2C_RequestMemoryRead>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0ad      	b.n	8002738 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2bff      	cmp	r3, #255	@ 0xff
 80025e4:	d90e      	bls.n	8002604 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	8979      	ldrh	r1, [r7, #10]
 80025f4:	4b52      	ldr	r3, [pc, #328]	@ (8002740 <HAL_I2C_Mem_Read+0x22c>)
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 fb33 	bl	8002c68 <I2C_TransferConfig>
 8002602:	e00f      	b.n	8002624 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002612:	b2da      	uxtb	r2, r3
 8002614:	8979      	ldrh	r1, [r7, #10]
 8002616:	4b4a      	ldr	r3, [pc, #296]	@ (8002740 <HAL_I2C_Mem_Read+0x22c>)
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fb22 	bl	8002c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262a:	2200      	movs	r2, #0
 800262c:	2104      	movs	r1, #4
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f956 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e07c      	b.n	8002738 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d034      	beq.n	80026e4 <HAL_I2C_Mem_Read+0x1d0>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267e:	2b00      	cmp	r3, #0
 8002680:	d130      	bne.n	80026e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002688:	2200      	movs	r2, #0
 800268a:	2180      	movs	r1, #128	@ 0x80
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 f927 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e04d      	b.n	8002738 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2bff      	cmp	r3, #255	@ 0xff
 80026a4:	d90e      	bls.n	80026c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	8979      	ldrh	r1, [r7, #10]
 80026b4:	2300      	movs	r3, #0
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 fad3 	bl	8002c68 <I2C_TransferConfig>
 80026c2:	e00f      	b.n	80026e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	8979      	ldrh	r1, [r7, #10]
 80026d6:	2300      	movs	r3, #0
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 fac2 	bl	8002c68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d19a      	bne.n	8002624 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f994 	bl	8002a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e01a      	b.n	8002738 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2220      	movs	r2, #32
 8002708:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6859      	ldr	r1, [r3, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_I2C_Mem_Read+0x230>)
 8002716:	400b      	ands	r3, r1
 8002718:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e000      	b.n	8002738 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002736:	2302      	movs	r3, #2
  }
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	80002400 	.word	0x80002400
 8002744:	fe00e800 	.word	0xfe00e800

08002748 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	4608      	mov	r0, r1
 8002752:	4611      	mov	r1, r2
 8002754:	461a      	mov	r2, r3
 8002756:	4603      	mov	r3, r0
 8002758:	817b      	strh	r3, [r7, #10]
 800275a:	460b      	mov	r3, r1
 800275c:	813b      	strh	r3, [r7, #8]
 800275e:	4613      	mov	r3, r2
 8002760:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	b2da      	uxtb	r2, r3
 8002766:	8979      	ldrh	r1, [r7, #10]
 8002768:	4b20      	ldr	r3, [pc, #128]	@ (80027ec <I2C_RequestMemoryWrite+0xa4>)
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fa79 	bl	8002c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	69b9      	ldr	r1, [r7, #24]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f909 	bl	8002992 <I2C_WaitOnTXISFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e02c      	b.n	80027e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d105      	bne.n	800279c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002790:	893b      	ldrh	r3, [r7, #8]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	629a      	str	r2, [r3, #40]	@ 0x28
 800279a:	e015      	b.n	80027c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800279c:	893b      	ldrh	r3, [r7, #8]
 800279e:	0a1b      	lsrs	r3, r3, #8
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	69b9      	ldr	r1, [r7, #24]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f8ef 	bl	8002992 <I2C_WaitOnTXISFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e012      	b.n	80027e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027be:	893b      	ldrh	r3, [r7, #8]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2200      	movs	r2, #0
 80027d0:	2180      	movs	r1, #128	@ 0x80
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f884 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	80002000 	.word	0x80002000

080027f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	817b      	strh	r3, [r7, #10]
 8002802:	460b      	mov	r3, r1
 8002804:	813b      	strh	r3, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	8979      	ldrh	r1, [r7, #10]
 8002810:	4b20      	ldr	r3, [pc, #128]	@ (8002894 <I2C_RequestMemoryRead+0xa4>)
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2300      	movs	r3, #0
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fa26 	bl	8002c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	69b9      	ldr	r1, [r7, #24]
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f8b6 	bl	8002992 <I2C_WaitOnTXISFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e02c      	b.n	800288a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002836:	893b      	ldrh	r3, [r7, #8]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002840:	e015      	b.n	800286e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002842:	893b      	ldrh	r3, [r7, #8]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	b29b      	uxth	r3, r3
 8002848:	b2da      	uxtb	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	69b9      	ldr	r1, [r7, #24]
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f89c 	bl	8002992 <I2C_WaitOnTXISFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e012      	b.n	800288a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002864:	893b      	ldrh	r3, [r7, #8]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2200      	movs	r2, #0
 8002876:	2140      	movs	r1, #64	@ 0x40
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f831 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	80002000 	.word	0x80002000

08002898 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d103      	bne.n	80028b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2200      	movs	r2, #0
 80028b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d007      	beq.n	80028d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	619a      	str	r2, [r3, #24]
  }
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f0:	e03b      	b.n	800296a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	6839      	ldr	r1, [r7, #0]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f8d6 	bl	8002aa8 <I2C_IsErrorOccurred>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e041      	b.n	800298a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d02d      	beq.n	800296a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290e:	f7ff f917 	bl	8001b40 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d302      	bcc.n	8002924 <I2C_WaitOnFlagUntilTimeout+0x44>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d122      	bne.n	800296a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	4013      	ands	r3, r2
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	429a      	cmp	r2, r3
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	429a      	cmp	r2, r3
 8002940:	d113      	bne.n	800296a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	f043 0220 	orr.w	r2, r3, #32
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e00f      	b.n	800298a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699a      	ldr	r2, [r3, #24]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	429a      	cmp	r2, r3
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	429a      	cmp	r2, r3
 8002986:	d0b4      	beq.n	80028f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800299e:	e033      	b.n	8002a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 f87f 	bl	8002aa8 <I2C_IsErrorOccurred>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e031      	b.n	8002a18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ba:	d025      	beq.n	8002a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029bc:	f7ff f8c0 	bl	8001b40 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d302      	bcc.n	80029d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d11a      	bne.n	8002a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d013      	beq.n	8002a08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e007      	b.n	8002a18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d1c4      	bne.n	80029a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a2c:	e02f      	b.n	8002a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f838 	bl	8002aa8 <I2C_IsErrorOccurred>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e02d      	b.n	8002a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7ff f87d 	bl	8001b40 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11a      	bne.n	8002a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d013      	beq.n	8002a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	f043 0220 	orr.w	r2, r3, #32
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e007      	b.n	8002a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d1c8      	bne.n	8002a2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	@ 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d068      	beq.n	8002ba6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2210      	movs	r2, #16
 8002ada:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002adc:	e049      	b.n	8002b72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae4:	d045      	beq.n	8002b72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ae6:	f7ff f82b 	bl	8001b40 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d302      	bcc.n	8002afc <I2C_IsErrorOccurred+0x54>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d13a      	bne.n	8002b72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b1e:	d121      	bne.n	8002b64 <I2C_IsErrorOccurred+0xbc>
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b26:	d01d      	beq.n	8002b64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002b28:	7cfb      	ldrb	r3, [r7, #19]
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d01a      	beq.n	8002b64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b3e:	f7fe ffff 	bl	8001b40 <HAL_GetTick>
 8002b42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b44:	e00e      	b.n	8002b64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b46:	f7fe fffb 	bl	8001b40 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b19      	cmp	r3, #25
 8002b52:	d907      	bls.n	8002b64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	f043 0320 	orr.w	r3, r3, #32
 8002b5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002b62:	e006      	b.n	8002b72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d1e9      	bne.n	8002b46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d003      	beq.n	8002b88 <I2C_IsErrorOccurred+0xe0>
 8002b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0aa      	beq.n	8002ade <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d103      	bne.n	8002b98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2220      	movs	r2, #32
 8002b96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	f043 0304 	orr.w	r3, r3, #4
 8002b9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00b      	beq.n	8002bd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	f043 0308 	orr.w	r3, r3, #8
 8002be0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00b      	beq.n	8002c14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	f043 0302 	orr.w	r3, r3, #2
 8002c02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002c14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01c      	beq.n	8002c56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7ff fe3b 	bl	8002898 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c64 <I2C_IsErrorOccurred+0x1bc>)
 8002c2e:	400b      	ands	r3, r1
 8002c30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002c56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3728      	adds	r7, #40	@ 0x28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	fe00e800 	.word	0xfe00e800

08002c68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	817b      	strh	r3, [r7, #10]
 8002c76:	4613      	mov	r3, r2
 8002c78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c7a:	897b      	ldrh	r3, [r7, #10]
 8002c7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c80:	7a7b      	ldrb	r3, [r7, #9]
 8002c82:	041b      	lsls	r3, r3, #16
 8002c84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c88:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c96:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	0d5b      	lsrs	r3, r3, #21
 8002ca2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ca6:	4b08      	ldr	r3, [pc, #32]	@ (8002cc8 <I2C_TransferConfig+0x60>)
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	43db      	mvns	r3, r3
 8002cac:	ea02 0103 	and.w	r1, r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	03ff63ff 	.word	0x03ff63ff

08002ccc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	d138      	bne.n	8002d54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e032      	b.n	8002d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2224      	movs	r2, #36	@ 0x24
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6819      	ldr	r1, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e000      	b.n	8002d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b085      	sub	sp, #20
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d139      	bne.n	8002dec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e033      	b.n	8002dee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2224      	movs	r2, #36	@ 0x24
 8002d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0201 	bic.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002db4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	e000      	b.n	8002dee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
  }
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e06:	4b23      	ldr	r3, [pc, #140]	@ (8002e94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	4a22      	ldr	r2, [pc, #136]	@ (8002e94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e12:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a1d      	ldr	r2, [pc, #116]	@ (8002e98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e2a:	f7fe fe89 	bl	8001b40 <HAL_GetTick>
 8002e2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e30:	e009      	b.n	8002e46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e32:	f7fe fe85 	bl	8001b40 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e40:	d901      	bls.n	8002e46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e022      	b.n	8002e8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e46:	4b14      	ldr	r3, [pc, #80]	@ (8002e98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e52:	d1ee      	bne.n	8002e32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e54:	4b10      	ldr	r3, [pc, #64]	@ (8002e98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0f      	ldr	r2, [pc, #60]	@ (8002e98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e60:	f7fe fe6e 	bl	8001b40 <HAL_GetTick>
 8002e64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e66:	e009      	b.n	8002e7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e68:	f7fe fe6a 	bl	8001b40 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e76:	d901      	bls.n	8002e7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e007      	b.n	8002e8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e7c:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e88:	d1ee      	bne.n	8002e68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40007000 	.word	0x40007000

08002e9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e291      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 8087 	beq.w	8002fce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ec0:	4b96      	ldr	r3, [pc, #600]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d00c      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ecc:	4b93      	ldr	r3, [pc, #588]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d112      	bne.n	8002efe <HAL_RCC_OscConfig+0x62>
 8002ed8:	4b90      	ldr	r3, [pc, #576]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ee4:	d10b      	bne.n	8002efe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee6:	4b8d      	ldr	r3, [pc, #564]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d06c      	beq.n	8002fcc <HAL_RCC_OscConfig+0x130>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d168      	bne.n	8002fcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e26b      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x7a>
 8002f08:	4b84      	ldr	r3, [pc, #528]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a83      	ldr	r2, [pc, #524]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	e02e      	b.n	8002f74 <HAL_RCC_OscConfig+0xd8>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x9c>
 8002f1e:	4b7f      	ldr	r3, [pc, #508]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a7e      	ldr	r2, [pc, #504]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a7b      	ldr	r2, [pc, #492]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002f30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e01d      	b.n	8002f74 <HAL_RCC_OscConfig+0xd8>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCC_OscConfig+0xc0>
 8002f42:	4b76      	ldr	r3, [pc, #472]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a75      	ldr	r2, [pc, #468]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	4b73      	ldr	r3, [pc, #460]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a72      	ldr	r2, [pc, #456]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e00b      	b.n	8002f74 <HAL_RCC_OscConfig+0xd8>
 8002f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a6e      	ldr	r2, [pc, #440]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	4b6c      	ldr	r3, [pc, #432]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002f6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d013      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fde0 	bl	8001b40 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f84:	f7fe fddc 	bl	8001b40 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	@ 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e21f      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	4b61      	ldr	r3, [pc, #388]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0xe8>
 8002fa2:	e014      	b.n	8002fce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fdcc 	bl	8001b40 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fac:	f7fe fdc8 	bl	8001b40 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	@ 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e20b      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fbe:	4b57      	ldr	r3, [pc, #348]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x110>
 8002fca:	e000      	b.n	8002fce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d069      	beq.n	80030ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fda:	4b50      	ldr	r3, [pc, #320]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe6:	4b4d      	ldr	r3, [pc, #308]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d11c      	bne.n	800302c <HAL_RCC_OscConfig+0x190>
 8002ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d116      	bne.n	800302c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffe:	4b47      	ldr	r3, [pc, #284]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <HAL_RCC_OscConfig+0x17a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d001      	beq.n	8003016 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e1df      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003016:	4b41      	ldr	r3, [pc, #260]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	493d      	ldr	r1, [pc, #244]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302a:	e040      	b.n	80030ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d023      	beq.n	800307c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003034:	4b39      	ldr	r3, [pc, #228]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a38      	ldr	r2, [pc, #224]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe fd7e 	bl	8001b40 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003048:	f7fe fd7a 	bl	8001b40 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e1bd      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305a:	4b30      	ldr	r3, [pc, #192]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b2d      	ldr	r3, [pc, #180]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4929      	ldr	r1, [pc, #164]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
 800307a:	e018      	b.n	80030ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307c:	4b27      	ldr	r3, [pc, #156]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a26      	ldr	r2, [pc, #152]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fd5a 	bl	8001b40 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003090:	f7fe fd56 	bl	8001b40 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e199      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	4b1e      	ldr	r3, [pc, #120]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d038      	beq.n	800312c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d019      	beq.n	80030f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c2:	4b16      	ldr	r3, [pc, #88]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 80030c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c6:	4a15      	ldr	r2, [pc, #84]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ce:	f7fe fd37 	bl	8001b40 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d6:	f7fe fd33 	bl	8001b40 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e176      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e8:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 80030ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x23a>
 80030f4:	e01a      	b.n	800312c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f6:	4b09      	ldr	r3, [pc, #36]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 80030f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030fa:	4a08      	ldr	r2, [pc, #32]	@ (800311c <HAL_RCC_OscConfig+0x280>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003102:	f7fe fd1d 	bl	8001b40 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003108:	e00a      	b.n	8003120 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310a:	f7fe fd19 	bl	8001b40 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d903      	bls.n	8003120 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e15c      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>
 800311c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	4b91      	ldr	r3, [pc, #580]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 8003122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1ee      	bne.n	800310a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a4 	beq.w	8003282 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313a:	4b8b      	ldr	r3, [pc, #556]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10d      	bne.n	8003162 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	4b88      	ldr	r3, [pc, #544]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	4a87      	ldr	r2, [pc, #540]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 800314c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003150:	6413      	str	r3, [r2, #64]	@ 0x40
 8003152:	4b85      	ldr	r3, [pc, #532]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800315e:	2301      	movs	r3, #1
 8003160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003162:	4b82      	ldr	r3, [pc, #520]	@ (800336c <HAL_RCC_OscConfig+0x4d0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d118      	bne.n	80031a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800316e:	4b7f      	ldr	r3, [pc, #508]	@ (800336c <HAL_RCC_OscConfig+0x4d0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a7e      	ldr	r2, [pc, #504]	@ (800336c <HAL_RCC_OscConfig+0x4d0>)
 8003174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317a:	f7fe fce1 	bl	8001b40 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003182:	f7fe fcdd 	bl	8001b40 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b64      	cmp	r3, #100	@ 0x64
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e120      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003194:	4b75      	ldr	r3, [pc, #468]	@ (800336c <HAL_RCC_OscConfig+0x4d0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d106      	bne.n	80031b6 <HAL_RCC_OscConfig+0x31a>
 80031a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b4:	e02d      	b.n	8003212 <HAL_RCC_OscConfig+0x376>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x33c>
 80031be:	4b6a      	ldr	r3, [pc, #424]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c2:	4a69      	ldr	r2, [pc, #420]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ca:	4b67      	ldr	r3, [pc, #412]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ce:	4a66      	ldr	r2, [pc, #408]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80031d0:	f023 0304 	bic.w	r3, r3, #4
 80031d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d6:	e01c      	b.n	8003212 <HAL_RCC_OscConfig+0x376>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d10c      	bne.n	80031fa <HAL_RCC_OscConfig+0x35e>
 80031e0:	4b61      	ldr	r3, [pc, #388]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e4:	4a60      	ldr	r2, [pc, #384]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80031e6:	f043 0304 	orr.w	r3, r3, #4
 80031ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ec:	4b5e      	ldr	r3, [pc, #376]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f8:	e00b      	b.n	8003212 <HAL_RCC_OscConfig+0x376>
 80031fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fe:	4a5a      	ldr	r2, [pc, #360]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	6713      	str	r3, [r2, #112]	@ 0x70
 8003206:	4b58      	ldr	r3, [pc, #352]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320a:	4a57      	ldr	r2, [pc, #348]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 800320c:	f023 0304 	bic.w	r3, r3, #4
 8003210:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d015      	beq.n	8003246 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fe fc91 	bl	8001b40 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7fe fc8d 	bl	8001b40 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e0ce      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003238:	4b4b      	ldr	r3, [pc, #300]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ee      	beq.n	8003222 <HAL_RCC_OscConfig+0x386>
 8003244:	e014      	b.n	8003270 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003246:	f7fe fc7b 	bl	8001b40 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7fe fc77 	bl	8001b40 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e0b8      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003264:	4b40      	ldr	r3, [pc, #256]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ee      	bne.n	800324e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003270:	7dfb      	ldrb	r3, [r7, #23]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d105      	bne.n	8003282 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003276:	4b3c      	ldr	r3, [pc, #240]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	4a3b      	ldr	r2, [pc, #236]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 800327c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003280:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 80a4 	beq.w	80033d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800328c:	4b36      	ldr	r3, [pc, #216]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b08      	cmp	r3, #8
 8003296:	d06b      	beq.n	8003370 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d149      	bne.n	8003334 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a0:	4b31      	ldr	r3, [pc, #196]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a30      	ldr	r2, [pc, #192]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80032a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fe fc48 	bl	8001b40 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fe fc44 	bl	8001b40 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e087      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c6:	4b28      	ldr	r3, [pc, #160]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69da      	ldr	r2, [r3, #28]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	019b      	lsls	r3, r3, #6
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e8:	085b      	lsrs	r3, r3, #1
 80032ea:	3b01      	subs	r3, #1
 80032ec:	041b      	lsls	r3, r3, #16
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	061b      	lsls	r3, r3, #24
 80032f6:	4313      	orrs	r3, r2
 80032f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80032fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80032fe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003300:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a18      	ldr	r2, [pc, #96]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 8003306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800330a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fe fc18 	bl	8001b40 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fe fc14 	bl	8001b40 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e057      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003326:	4b10      	ldr	r3, [pc, #64]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x478>
 8003332:	e04f      	b.n	80033d4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003334:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0b      	ldr	r2, [pc, #44]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 800333a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800333e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe fbfe 	bl	8001b40 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003348:	f7fe fbfa 	bl	8001b40 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e03d      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	4b03      	ldr	r3, [pc, #12]	@ (8003368 <HAL_RCC_OscConfig+0x4cc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x4ac>
 8003366:	e035      	b.n	80033d4 <HAL_RCC_OscConfig+0x538>
 8003368:	40023800 	.word	0x40023800
 800336c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003370:	4b1b      	ldr	r3, [pc, #108]	@ (80033e0 <HAL_RCC_OscConfig+0x544>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d028      	beq.n	80033d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d121      	bne.n	80033d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d11a      	bne.n	80033d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033a0:	4013      	ands	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d111      	bne.n	80033d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b6:	085b      	lsrs	r3, r3, #1
 80033b8:	3b01      	subs	r3, #1
 80033ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d107      	bne.n	80033d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800

080033e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0d0      	b.n	800359e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033fc:	4b6a      	ldr	r3, [pc, #424]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d910      	bls.n	800342c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b67      	ldr	r3, [pc, #412]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 020f 	bic.w	r2, r3, #15
 8003412:	4965      	ldr	r1, [pc, #404]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b63      	ldr	r3, [pc, #396]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0b8      	b.n	800359e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d020      	beq.n	800347a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003444:	4b59      	ldr	r3, [pc, #356]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a58      	ldr	r2, [pc, #352]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 800344a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800344e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800345c:	4b53      	ldr	r3, [pc, #332]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a52      	ldr	r2, [pc, #328]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 8003462:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003466:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003468:	4b50      	ldr	r3, [pc, #320]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	494d      	ldr	r1, [pc, #308]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d040      	beq.n	8003508 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	4b47      	ldr	r3, [pc, #284]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d115      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e07f      	b.n	800359e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a6:	4b41      	ldr	r3, [pc, #260]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e073      	b.n	800359e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b6:	4b3d      	ldr	r3, [pc, #244]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e06b      	b.n	800359e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034c6:	4b39      	ldr	r3, [pc, #228]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f023 0203 	bic.w	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4936      	ldr	r1, [pc, #216]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d8:	f7fe fb32 	bl	8001b40 <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e0:	f7fe fb2e 	bl	8001b40 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e053      	b.n	800359e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	4b2d      	ldr	r3, [pc, #180]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 020c 	and.w	r2, r3, #12
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	429a      	cmp	r2, r3
 8003506:	d1eb      	bne.n	80034e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003508:	4b27      	ldr	r3, [pc, #156]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d210      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b24      	ldr	r3, [pc, #144]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 020f 	bic.w	r2, r3, #15
 800351e:	4922      	ldr	r1, [pc, #136]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b20      	ldr	r3, [pc, #128]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e032      	b.n	800359e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003544:	4b19      	ldr	r3, [pc, #100]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4916      	ldr	r1, [pc, #88]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003562:	4b12      	ldr	r3, [pc, #72]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	490e      	ldr	r1, [pc, #56]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003576:	f000 f821 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 800357a:	4602      	mov	r2, r0
 800357c:	4b0b      	ldr	r3, [pc, #44]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	490a      	ldr	r1, [pc, #40]	@ (80035b0 <HAL_RCC_ClockConfig+0x1cc>)
 8003588:	5ccb      	ldrb	r3, [r1, r3]
 800358a:	fa22 f303 	lsr.w	r3, r2, r3
 800358e:	4a09      	ldr	r2, [pc, #36]	@ (80035b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003592:	4b09      	ldr	r3, [pc, #36]	@ (80035b8 <HAL_RCC_ClockConfig+0x1d4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe fa8e 	bl	8001ab8 <HAL_InitTick>

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40023c00 	.word	0x40023c00
 80035ac:	40023800 	.word	0x40023800
 80035b0:	08007c90 	.word	0x08007c90
 80035b4:	20000000 	.word	0x20000000
 80035b8:	20000004 	.word	0x20000004

080035bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c0:	b090      	sub	sp, #64	@ 0x40
 80035c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80035c8:	2300      	movs	r3, #0
 80035ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035cc:	2300      	movs	r3, #0
 80035ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035d4:	4b59      	ldr	r3, [pc, #356]	@ (800373c <HAL_RCC_GetSysClockFreq+0x180>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 030c 	and.w	r3, r3, #12
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d00d      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x40>
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	f200 80a1 	bhi.w	8003728 <HAL_RCC_GetSysClockFreq+0x16c>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x34>
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d003      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ee:	e09b      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f0:	4b53      	ldr	r3, [pc, #332]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x184>)
 80035f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035f4:	e09b      	b.n	800372e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035f6:	4b53      	ldr	r3, [pc, #332]	@ (8003744 <HAL_RCC_GetSysClockFreq+0x188>)
 80035f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035fa:	e098      	b.n	800372e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035fc:	4b4f      	ldr	r3, [pc, #316]	@ (800373c <HAL_RCC_GetSysClockFreq+0x180>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003604:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003606:	4b4d      	ldr	r3, [pc, #308]	@ (800373c <HAL_RCC_GetSysClockFreq+0x180>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d028      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003612:	4b4a      	ldr	r3, [pc, #296]	@ (800373c <HAL_RCC_GetSysClockFreq+0x180>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	099b      	lsrs	r3, r3, #6
 8003618:	2200      	movs	r2, #0
 800361a:	623b      	str	r3, [r7, #32]
 800361c:	627a      	str	r2, [r7, #36]	@ 0x24
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003624:	2100      	movs	r1, #0
 8003626:	4b47      	ldr	r3, [pc, #284]	@ (8003744 <HAL_RCC_GetSysClockFreq+0x188>)
 8003628:	fb03 f201 	mul.w	r2, r3, r1
 800362c:	2300      	movs	r3, #0
 800362e:	fb00 f303 	mul.w	r3, r0, r3
 8003632:	4413      	add	r3, r2
 8003634:	4a43      	ldr	r2, [pc, #268]	@ (8003744 <HAL_RCC_GetSysClockFreq+0x188>)
 8003636:	fba0 1202 	umull	r1, r2, r0, r2
 800363a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800363c:	460a      	mov	r2, r1
 800363e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003642:	4413      	add	r3, r2
 8003644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003648:	2200      	movs	r2, #0
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	61fa      	str	r2, [r7, #28]
 800364e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003652:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003656:	f7fd fac7 	bl	8000be8 <__aeabi_uldivmod>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4613      	mov	r3, r2
 8003660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003662:	e053      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003664:	4b35      	ldr	r3, [pc, #212]	@ (800373c <HAL_RCC_GetSysClockFreq+0x180>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	099b      	lsrs	r3, r3, #6
 800366a:	2200      	movs	r2, #0
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	617a      	str	r2, [r7, #20]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003676:	f04f 0b00 	mov.w	fp, #0
 800367a:	4652      	mov	r2, sl
 800367c:	465b      	mov	r3, fp
 800367e:	f04f 0000 	mov.w	r0, #0
 8003682:	f04f 0100 	mov.w	r1, #0
 8003686:	0159      	lsls	r1, r3, #5
 8003688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800368c:	0150      	lsls	r0, r2, #5
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	ebb2 080a 	subs.w	r8, r2, sl
 8003696:	eb63 090b 	sbc.w	r9, r3, fp
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036ae:	ebb2 0408 	subs.w	r4, r2, r8
 80036b2:	eb63 0509 	sbc.w	r5, r3, r9
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	00eb      	lsls	r3, r5, #3
 80036c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036c4:	00e2      	lsls	r2, r4, #3
 80036c6:	4614      	mov	r4, r2
 80036c8:	461d      	mov	r5, r3
 80036ca:	eb14 030a 	adds.w	r3, r4, sl
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	eb45 030b 	adc.w	r3, r5, fp
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036e2:	4629      	mov	r1, r5
 80036e4:	028b      	lsls	r3, r1, #10
 80036e6:	4621      	mov	r1, r4
 80036e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036ec:	4621      	mov	r1, r4
 80036ee:	028a      	lsls	r2, r1, #10
 80036f0:	4610      	mov	r0, r2
 80036f2:	4619      	mov	r1, r3
 80036f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f6:	2200      	movs	r2, #0
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	60fa      	str	r2, [r7, #12]
 80036fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003700:	f7fd fa72 	bl	8000be8 <__aeabi_uldivmod>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4613      	mov	r3, r2
 800370a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800370c:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <HAL_RCC_GetSysClockFreq+0x180>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	0c1b      	lsrs	r3, r3, #16
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	3301      	adds	r3, #1
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800371c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800371e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003726:	e002      	b.n	800372e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003728:	4b05      	ldr	r3, [pc, #20]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x184>)
 800372a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800372c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800372e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003730:	4618      	mov	r0, r3
 8003732:	3740      	adds	r7, #64	@ 0x40
 8003734:	46bd      	mov	sp, r7
 8003736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800373a:	bf00      	nop
 800373c:	40023800 	.word	0x40023800
 8003740:	00f42400 	.word	0x00f42400
 8003744:	017d7840 	.word	0x017d7840

08003748 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800374c:	4b03      	ldr	r3, [pc, #12]	@ (800375c <HAL_RCC_GetHCLKFreq+0x14>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000000 	.word	0x20000000

08003760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003764:	f7ff fff0 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 8003768:	4602      	mov	r2, r0
 800376a:	4b05      	ldr	r3, [pc, #20]	@ (8003780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	0a9b      	lsrs	r3, r3, #10
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	4903      	ldr	r1, [pc, #12]	@ (8003784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003776:	5ccb      	ldrb	r3, [r1, r3]
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40023800 	.word	0x40023800
 8003784:	08007ca0 	.word	0x08007ca0

08003788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800378c:	f7ff ffdc 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 8003790:	4602      	mov	r2, r0
 8003792:	4b05      	ldr	r3, [pc, #20]	@ (80037a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	0b5b      	lsrs	r3, r3, #13
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	4903      	ldr	r1, [pc, #12]	@ (80037ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800379e:	5ccb      	ldrb	r3, [r1, r3]
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40023800 	.word	0x40023800
 80037ac:	08007ca0 	.word	0x08007ca0

080037b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d012      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037d8:	4b69      	ldr	r3, [pc, #420]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4a68      	ldr	r2, [pc, #416]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80037e2:	6093      	str	r3, [r2, #8]
 80037e4:	4b66      	ldr	r3, [pc, #408]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ec:	4964      	ldr	r1, [pc, #400]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80037fa:	2301      	movs	r3, #1
 80037fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d017      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800380a:	4b5d      	ldr	r3, [pc, #372]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800380c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003810:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003818:	4959      	ldr	r1, [pc, #356]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003824:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003828:	d101      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800382a:	2301      	movs	r3, #1
 800382c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003836:	2301      	movs	r3, #1
 8003838:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d017      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003846:	4b4e      	ldr	r3, [pc, #312]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800384c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	494a      	ldr	r1, [pc, #296]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003864:	d101      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003866:	2301      	movs	r3, #1
 8003868:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003872:	2301      	movs	r3, #1
 8003874:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003882:	2301      	movs	r3, #1
 8003884:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 808b 	beq.w	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003894:	4b3a      	ldr	r3, [pc, #232]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	4a39      	ldr	r2, [pc, #228]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800389e:	6413      	str	r3, [r2, #64]	@ 0x40
 80038a0:	4b37      	ldr	r3, [pc, #220]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038ac:	4b35      	ldr	r3, [pc, #212]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a34      	ldr	r2, [pc, #208]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b8:	f7fe f942 	bl	8001b40 <HAL_GetTick>
 80038bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c0:	f7fe f93e 	bl	8001b40 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	@ 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e357      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038de:	4b28      	ldr	r3, [pc, #160]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d035      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d02e      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038fc:	4b20      	ldr	r3, [pc, #128]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003904:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003906:	4b1e      	ldr	r3, [pc, #120]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390a:	4a1d      	ldr	r2, [pc, #116]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003910:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003912:	4b1b      	ldr	r3, [pc, #108]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003916:	4a1a      	ldr	r2, [pc, #104]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003918:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800391c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800391e:	4a18      	ldr	r2, [pc, #96]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003924:	4b16      	ldr	r3, [pc, #88]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b01      	cmp	r3, #1
 800392e:	d114      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fe f906 	bl	8001b40 <HAL_GetTick>
 8003934:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003936:	e00a      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003938:	f7fe f902 	bl	8001b40 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e319      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394e:	4b0c      	ldr	r3, [pc, #48]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0ee      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003962:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003966:	d111      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003968:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003974:	4b04      	ldr	r3, [pc, #16]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003976:	400b      	ands	r3, r1
 8003978:	4901      	ldr	r1, [pc, #4]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
 800397e:	e00b      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003980:	40023800 	.word	0x40023800
 8003984:	40007000 	.word	0x40007000
 8003988:	0ffffcff 	.word	0x0ffffcff
 800398c:	4baa      	ldr	r3, [pc, #680]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4aa9      	ldr	r2, [pc, #676]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003992:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003996:	6093      	str	r3, [r2, #8]
 8003998:	4ba7      	ldr	r3, [pc, #668]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800399a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a4:	49a4      	ldr	r1, [pc, #656]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d010      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039b6:	4ba0      	ldr	r3, [pc, #640]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039bc:	4a9e      	ldr	r2, [pc, #632]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80039c6:	4b9c      	ldr	r3, [pc, #624]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d0:	4999      	ldr	r1, [pc, #612]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039e4:	4b94      	ldr	r3, [pc, #592]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039f2:	4991      	ldr	r1, [pc, #580]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a06:	4b8c      	ldr	r3, [pc, #560]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a14:	4988      	ldr	r1, [pc, #544]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a28:	4b83      	ldr	r3, [pc, #524]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a36:	4980      	ldr	r1, [pc, #512]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a4a:	4b7b      	ldr	r3, [pc, #492]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a58:	4977      	ldr	r1, [pc, #476]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a6c:	4b72      	ldr	r3, [pc, #456]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a72:	f023 0203 	bic.w	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7a:	496f      	ldr	r1, [pc, #444]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a94:	f023 020c 	bic.w	r2, r3, #12
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9c:	4966      	ldr	r1, [pc, #408]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ab0:	4b61      	ldr	r3, [pc, #388]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abe:	495e      	ldr	r1, [pc, #376]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ad2:	4b59      	ldr	r3, [pc, #356]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae0:	4955      	ldr	r1, [pc, #340]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003af4:	4b50      	ldr	r3, [pc, #320]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003afa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b02:	494d      	ldr	r1, [pc, #308]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b16:	4b48      	ldr	r3, [pc, #288]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b24:	4944      	ldr	r1, [pc, #272]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b38:	4b3f      	ldr	r3, [pc, #252]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b3e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b46:	493c      	ldr	r1, [pc, #240]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b5a:	4b37      	ldr	r3, [pc, #220]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b68:	4933      	ldr	r1, [pc, #204]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b82:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b8a:	492b      	ldr	r1, [pc, #172]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d011      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b9e:	4b26      	ldr	r3, [pc, #152]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bac:	4922      	ldr	r1, [pc, #136]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bde:	4b16      	ldr	r3, [pc, #88]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bec:	4912      	ldr	r1, [pc, #72]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00b      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c00:	4b0d      	ldr	r3, [pc, #52]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c06:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c10:	4909      	ldr	r1, [pc, #36]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d006      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80d9 	beq.w	8003dde <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c2c:	4b02      	ldr	r3, [pc, #8]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a01      	ldr	r2, [pc, #4]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c36:	e001      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c3e:	f7fd ff7f 	bl	8001b40 <HAL_GetTick>
 8003c42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c46:	f7fd ff7b 	bl	8001b40 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b64      	cmp	r3, #100	@ 0x64
 8003c52:	d901      	bls.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e194      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c58:	4b6c      	ldr	r3, [pc, #432]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f0      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d021      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d11d      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c78:	4b64      	ldr	r3, [pc, #400]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c7e:	0c1b      	lsrs	r3, r3, #16
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c86:	4b61      	ldr	r3, [pc, #388]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c8c:	0e1b      	lsrs	r3, r3, #24
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	019a      	lsls	r2, r3, #6
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	041b      	lsls	r3, r3, #16
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	061b      	lsls	r3, r3, #24
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	071b      	lsls	r3, r3, #28
 8003cac:	4957      	ldr	r1, [pc, #348]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d004      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d02e      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cde:	d129      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ce0:	4b4a      	ldr	r3, [pc, #296]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ce6:	0c1b      	lsrs	r3, r3, #16
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cee:	4b47      	ldr	r3, [pc, #284]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cf4:	0f1b      	lsrs	r3, r3, #28
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	019a      	lsls	r2, r3, #6
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	061b      	lsls	r3, r3, #24
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	071b      	lsls	r3, r3, #28
 8003d14:	493d      	ldr	r1, [pc, #244]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d22:	f023 021f 	bic.w	r2, r3, #31
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	4937      	ldr	r1, [pc, #220]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01d      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d40:	4b32      	ldr	r3, [pc, #200]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d46:	0e1b      	lsrs	r3, r3, #24
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d54:	0f1b      	lsrs	r3, r3, #28
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	019a      	lsls	r2, r3, #6
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	041b      	lsls	r3, r3, #16
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	061b      	lsls	r3, r3, #24
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	071b      	lsls	r3, r3, #28
 8003d74:	4925      	ldr	r1, [pc, #148]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d011      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	019a      	lsls	r2, r3, #6
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	041b      	lsls	r3, r3, #16
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	061b      	lsls	r3, r3, #24
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	071b      	lsls	r3, r3, #28
 8003da4:	4919      	ldr	r1, [pc, #100]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003dac:	4b17      	ldr	r3, [pc, #92]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a16      	ldr	r2, [pc, #88]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003db2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db8:	f7fd fec2 	bl	8001b40 <HAL_GetTick>
 8003dbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dc0:	f7fd febe 	bl	8001b40 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	@ 0x64
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e0d7      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f040 80cd 	bne.w	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003de6:	4b09      	ldr	r3, [pc, #36]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a08      	ldr	r2, [pc, #32]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003df2:	f7fd fea5 	bl	8001b40 <HAL_GetTick>
 8003df6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003dfa:	f7fd fea1 	bl	8001b40 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b64      	cmp	r3, #100	@ 0x64
 8003e06:	d903      	bls.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e0ba      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003e0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e10:	4b5e      	ldr	r3, [pc, #376]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e1c:	d0ed      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d02e      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d12a      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e46:	4b51      	ldr	r3, [pc, #324]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4c:	0c1b      	lsrs	r3, r3, #16
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e54:	4b4d      	ldr	r3, [pc, #308]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5a:	0f1b      	lsrs	r3, r3, #28
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	019a      	lsls	r2, r3, #6
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	041b      	lsls	r3, r3, #16
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	061b      	lsls	r3, r3, #24
 8003e74:	431a      	orrs	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	071b      	lsls	r3, r3, #28
 8003e7a:	4944      	ldr	r1, [pc, #272]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e82:	4b42      	ldr	r3, [pc, #264]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e88:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e90:	3b01      	subs	r3, #1
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	493d      	ldr	r1, [pc, #244]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d022      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003eac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eb0:	d11d      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eb2:	4b36      	ldr	r3, [pc, #216]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb8:	0e1b      	lsrs	r3, r3, #24
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ec0:	4b32      	ldr	r3, [pc, #200]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec6:	0f1b      	lsrs	r3, r3, #28
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	019a      	lsls	r2, r3, #6
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	041b      	lsls	r3, r3, #16
 8003eda:	431a      	orrs	r2, r3
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	061b      	lsls	r3, r3, #24
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	071b      	lsls	r3, r3, #28
 8003ee6:	4929      	ldr	r1, [pc, #164]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d028      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003efa:	4b24      	ldr	r3, [pc, #144]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f00:	0e1b      	lsrs	r3, r3, #24
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f08:	4b20      	ldr	r3, [pc, #128]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0e:	0c1b      	lsrs	r3, r3, #16
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	019a      	lsls	r2, r3, #6
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	041b      	lsls	r3, r3, #16
 8003f20:	431a      	orrs	r2, r3
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	071b      	lsls	r3, r3, #28
 8003f2e:	4917      	ldr	r1, [pc, #92]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f36:	4b15      	ldr	r3, [pc, #84]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f44:	4911      	ldr	r1, [pc, #68]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a0e      	ldr	r2, [pc, #56]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f58:	f7fd fdf2 	bl	8001b40 <HAL_GetTick>
 8003f5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f60:	f7fd fdee 	bl	8001b40 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	@ 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e007      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f72:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f7e:	d1ef      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40023800 	.word	0x40023800

08003f90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e040      	b.n	8004024 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fd fb04 	bl	80015c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2224      	movs	r2, #36	@ 0x24
 8003fbc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fb16 	bl	8004608 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f8af 	bl	8004140 <UART_SetConfig>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e01b      	b.n	8004024 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800400a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fb95 	bl	800474c <UART_CheckIdleState>
 8004022:	4603      	mov	r3, r0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	@ 0x28
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004040:	2b20      	cmp	r3, #32
 8004042:	d177      	bne.n	8004134 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_UART_Transmit+0x24>
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e070      	b.n	8004136 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2221      	movs	r2, #33	@ 0x21
 8004060:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004062:	f7fd fd6d 	bl	8001b40 <HAL_GetTick>
 8004066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	88fa      	ldrh	r2, [r7, #6]
 800406c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	88fa      	ldrh	r2, [r7, #6]
 8004074:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004080:	d108      	bne.n	8004094 <HAL_UART_Transmit+0x68>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	e003      	b.n	800409c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004098:	2300      	movs	r3, #0
 800409a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800409c:	e02f      	b.n	80040fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2180      	movs	r1, #128	@ 0x80
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fba6 	bl	80047fa <UART_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d004      	beq.n	80040be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e03b      	b.n	8004136 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10b      	bne.n	80040dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	3302      	adds	r3, #2
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	e007      	b.n	80040ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	3301      	adds	r3, #1
 80040ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1c9      	bne.n	800409e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2200      	movs	r2, #0
 8004112:	2140      	movs	r1, #64	@ 0x40
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fb70 	bl	80047fa <UART_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e005      	b.n	8004136 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	e000      	b.n	8004136 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004134:	2302      	movs	r3, #2
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	4ba6      	ldr	r3, [pc, #664]	@ (8004404 <UART_SetConfig+0x2c4>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	6979      	ldr	r1, [r7, #20]
 8004174:	430b      	orrs	r3, r1
 8004176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a94      	ldr	r2, [pc, #592]	@ (8004408 <UART_SetConfig+0x2c8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d120      	bne.n	80041fe <UART_SetConfig+0xbe>
 80041bc:	4b93      	ldr	r3, [pc, #588]	@ (800440c <UART_SetConfig+0x2cc>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d816      	bhi.n	80041f8 <UART_SetConfig+0xb8>
 80041ca:	a201      	add	r2, pc, #4	@ (adr r2, 80041d0 <UART_SetConfig+0x90>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080041e1 	.word	0x080041e1
 80041d4:	080041ed 	.word	0x080041ed
 80041d8:	080041e7 	.word	0x080041e7
 80041dc:	080041f3 	.word	0x080041f3
 80041e0:	2301      	movs	r3, #1
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e150      	b.n	8004488 <UART_SetConfig+0x348>
 80041e6:	2302      	movs	r3, #2
 80041e8:	77fb      	strb	r3, [r7, #31]
 80041ea:	e14d      	b.n	8004488 <UART_SetConfig+0x348>
 80041ec:	2304      	movs	r3, #4
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e14a      	b.n	8004488 <UART_SetConfig+0x348>
 80041f2:	2308      	movs	r3, #8
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e147      	b.n	8004488 <UART_SetConfig+0x348>
 80041f8:	2310      	movs	r3, #16
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e144      	b.n	8004488 <UART_SetConfig+0x348>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a83      	ldr	r2, [pc, #524]	@ (8004410 <UART_SetConfig+0x2d0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d132      	bne.n	800426e <UART_SetConfig+0x12e>
 8004208:	4b80      	ldr	r3, [pc, #512]	@ (800440c <UART_SetConfig+0x2cc>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d828      	bhi.n	8004268 <UART_SetConfig+0x128>
 8004216:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <UART_SetConfig+0xdc>)
 8004218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421c:	08004251 	.word	0x08004251
 8004220:	08004269 	.word	0x08004269
 8004224:	08004269 	.word	0x08004269
 8004228:	08004269 	.word	0x08004269
 800422c:	0800425d 	.word	0x0800425d
 8004230:	08004269 	.word	0x08004269
 8004234:	08004269 	.word	0x08004269
 8004238:	08004269 	.word	0x08004269
 800423c:	08004257 	.word	0x08004257
 8004240:	08004269 	.word	0x08004269
 8004244:	08004269 	.word	0x08004269
 8004248:	08004269 	.word	0x08004269
 800424c:	08004263 	.word	0x08004263
 8004250:	2300      	movs	r3, #0
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e118      	b.n	8004488 <UART_SetConfig+0x348>
 8004256:	2302      	movs	r3, #2
 8004258:	77fb      	strb	r3, [r7, #31]
 800425a:	e115      	b.n	8004488 <UART_SetConfig+0x348>
 800425c:	2304      	movs	r3, #4
 800425e:	77fb      	strb	r3, [r7, #31]
 8004260:	e112      	b.n	8004488 <UART_SetConfig+0x348>
 8004262:	2308      	movs	r3, #8
 8004264:	77fb      	strb	r3, [r7, #31]
 8004266:	e10f      	b.n	8004488 <UART_SetConfig+0x348>
 8004268:	2310      	movs	r3, #16
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e10c      	b.n	8004488 <UART_SetConfig+0x348>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a68      	ldr	r2, [pc, #416]	@ (8004414 <UART_SetConfig+0x2d4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d120      	bne.n	80042ba <UART_SetConfig+0x17a>
 8004278:	4b64      	ldr	r3, [pc, #400]	@ (800440c <UART_SetConfig+0x2cc>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004282:	2b30      	cmp	r3, #48	@ 0x30
 8004284:	d013      	beq.n	80042ae <UART_SetConfig+0x16e>
 8004286:	2b30      	cmp	r3, #48	@ 0x30
 8004288:	d814      	bhi.n	80042b4 <UART_SetConfig+0x174>
 800428a:	2b20      	cmp	r3, #32
 800428c:	d009      	beq.n	80042a2 <UART_SetConfig+0x162>
 800428e:	2b20      	cmp	r3, #32
 8004290:	d810      	bhi.n	80042b4 <UART_SetConfig+0x174>
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <UART_SetConfig+0x15c>
 8004296:	2b10      	cmp	r3, #16
 8004298:	d006      	beq.n	80042a8 <UART_SetConfig+0x168>
 800429a:	e00b      	b.n	80042b4 <UART_SetConfig+0x174>
 800429c:	2300      	movs	r3, #0
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	e0f2      	b.n	8004488 <UART_SetConfig+0x348>
 80042a2:	2302      	movs	r3, #2
 80042a4:	77fb      	strb	r3, [r7, #31]
 80042a6:	e0ef      	b.n	8004488 <UART_SetConfig+0x348>
 80042a8:	2304      	movs	r3, #4
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e0ec      	b.n	8004488 <UART_SetConfig+0x348>
 80042ae:	2308      	movs	r3, #8
 80042b0:	77fb      	strb	r3, [r7, #31]
 80042b2:	e0e9      	b.n	8004488 <UART_SetConfig+0x348>
 80042b4:	2310      	movs	r3, #16
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e0e6      	b.n	8004488 <UART_SetConfig+0x348>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a56      	ldr	r2, [pc, #344]	@ (8004418 <UART_SetConfig+0x2d8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d120      	bne.n	8004306 <UART_SetConfig+0x1c6>
 80042c4:	4b51      	ldr	r3, [pc, #324]	@ (800440c <UART_SetConfig+0x2cc>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80042ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80042d0:	d013      	beq.n	80042fa <UART_SetConfig+0x1ba>
 80042d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80042d4:	d814      	bhi.n	8004300 <UART_SetConfig+0x1c0>
 80042d6:	2b80      	cmp	r3, #128	@ 0x80
 80042d8:	d009      	beq.n	80042ee <UART_SetConfig+0x1ae>
 80042da:	2b80      	cmp	r3, #128	@ 0x80
 80042dc:	d810      	bhi.n	8004300 <UART_SetConfig+0x1c0>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <UART_SetConfig+0x1a8>
 80042e2:	2b40      	cmp	r3, #64	@ 0x40
 80042e4:	d006      	beq.n	80042f4 <UART_SetConfig+0x1b4>
 80042e6:	e00b      	b.n	8004300 <UART_SetConfig+0x1c0>
 80042e8:	2300      	movs	r3, #0
 80042ea:	77fb      	strb	r3, [r7, #31]
 80042ec:	e0cc      	b.n	8004488 <UART_SetConfig+0x348>
 80042ee:	2302      	movs	r3, #2
 80042f0:	77fb      	strb	r3, [r7, #31]
 80042f2:	e0c9      	b.n	8004488 <UART_SetConfig+0x348>
 80042f4:	2304      	movs	r3, #4
 80042f6:	77fb      	strb	r3, [r7, #31]
 80042f8:	e0c6      	b.n	8004488 <UART_SetConfig+0x348>
 80042fa:	2308      	movs	r3, #8
 80042fc:	77fb      	strb	r3, [r7, #31]
 80042fe:	e0c3      	b.n	8004488 <UART_SetConfig+0x348>
 8004300:	2310      	movs	r3, #16
 8004302:	77fb      	strb	r3, [r7, #31]
 8004304:	e0c0      	b.n	8004488 <UART_SetConfig+0x348>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a44      	ldr	r2, [pc, #272]	@ (800441c <UART_SetConfig+0x2dc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d125      	bne.n	800435c <UART_SetConfig+0x21c>
 8004310:	4b3e      	ldr	r3, [pc, #248]	@ (800440c <UART_SetConfig+0x2cc>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800431a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800431e:	d017      	beq.n	8004350 <UART_SetConfig+0x210>
 8004320:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004324:	d817      	bhi.n	8004356 <UART_SetConfig+0x216>
 8004326:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800432a:	d00b      	beq.n	8004344 <UART_SetConfig+0x204>
 800432c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004330:	d811      	bhi.n	8004356 <UART_SetConfig+0x216>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <UART_SetConfig+0x1fe>
 8004336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800433a:	d006      	beq.n	800434a <UART_SetConfig+0x20a>
 800433c:	e00b      	b.n	8004356 <UART_SetConfig+0x216>
 800433e:	2300      	movs	r3, #0
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e0a1      	b.n	8004488 <UART_SetConfig+0x348>
 8004344:	2302      	movs	r3, #2
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e09e      	b.n	8004488 <UART_SetConfig+0x348>
 800434a:	2304      	movs	r3, #4
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e09b      	b.n	8004488 <UART_SetConfig+0x348>
 8004350:	2308      	movs	r3, #8
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e098      	b.n	8004488 <UART_SetConfig+0x348>
 8004356:	2310      	movs	r3, #16
 8004358:	77fb      	strb	r3, [r7, #31]
 800435a:	e095      	b.n	8004488 <UART_SetConfig+0x348>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2f      	ldr	r2, [pc, #188]	@ (8004420 <UART_SetConfig+0x2e0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d125      	bne.n	80043b2 <UART_SetConfig+0x272>
 8004366:	4b29      	ldr	r3, [pc, #164]	@ (800440c <UART_SetConfig+0x2cc>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004370:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004374:	d017      	beq.n	80043a6 <UART_SetConfig+0x266>
 8004376:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800437a:	d817      	bhi.n	80043ac <UART_SetConfig+0x26c>
 800437c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004380:	d00b      	beq.n	800439a <UART_SetConfig+0x25a>
 8004382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004386:	d811      	bhi.n	80043ac <UART_SetConfig+0x26c>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <UART_SetConfig+0x254>
 800438c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004390:	d006      	beq.n	80043a0 <UART_SetConfig+0x260>
 8004392:	e00b      	b.n	80043ac <UART_SetConfig+0x26c>
 8004394:	2301      	movs	r3, #1
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e076      	b.n	8004488 <UART_SetConfig+0x348>
 800439a:	2302      	movs	r3, #2
 800439c:	77fb      	strb	r3, [r7, #31]
 800439e:	e073      	b.n	8004488 <UART_SetConfig+0x348>
 80043a0:	2304      	movs	r3, #4
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e070      	b.n	8004488 <UART_SetConfig+0x348>
 80043a6:	2308      	movs	r3, #8
 80043a8:	77fb      	strb	r3, [r7, #31]
 80043aa:	e06d      	b.n	8004488 <UART_SetConfig+0x348>
 80043ac:	2310      	movs	r3, #16
 80043ae:	77fb      	strb	r3, [r7, #31]
 80043b0:	e06a      	b.n	8004488 <UART_SetConfig+0x348>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004424 <UART_SetConfig+0x2e4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d138      	bne.n	800442e <UART_SetConfig+0x2ee>
 80043bc:	4b13      	ldr	r3, [pc, #76]	@ (800440c <UART_SetConfig+0x2cc>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80043c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80043ca:	d017      	beq.n	80043fc <UART_SetConfig+0x2bc>
 80043cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80043d0:	d82a      	bhi.n	8004428 <UART_SetConfig+0x2e8>
 80043d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043d6:	d00b      	beq.n	80043f0 <UART_SetConfig+0x2b0>
 80043d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043dc:	d824      	bhi.n	8004428 <UART_SetConfig+0x2e8>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <UART_SetConfig+0x2aa>
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e6:	d006      	beq.n	80043f6 <UART_SetConfig+0x2b6>
 80043e8:	e01e      	b.n	8004428 <UART_SetConfig+0x2e8>
 80043ea:	2300      	movs	r3, #0
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e04b      	b.n	8004488 <UART_SetConfig+0x348>
 80043f0:	2302      	movs	r3, #2
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e048      	b.n	8004488 <UART_SetConfig+0x348>
 80043f6:	2304      	movs	r3, #4
 80043f8:	77fb      	strb	r3, [r7, #31]
 80043fa:	e045      	b.n	8004488 <UART_SetConfig+0x348>
 80043fc:	2308      	movs	r3, #8
 80043fe:	77fb      	strb	r3, [r7, #31]
 8004400:	e042      	b.n	8004488 <UART_SetConfig+0x348>
 8004402:	bf00      	nop
 8004404:	efff69f3 	.word	0xefff69f3
 8004408:	40011000 	.word	0x40011000
 800440c:	40023800 	.word	0x40023800
 8004410:	40004400 	.word	0x40004400
 8004414:	40004800 	.word	0x40004800
 8004418:	40004c00 	.word	0x40004c00
 800441c:	40005000 	.word	0x40005000
 8004420:	40011400 	.word	0x40011400
 8004424:	40007800 	.word	0x40007800
 8004428:	2310      	movs	r3, #16
 800442a:	77fb      	strb	r3, [r7, #31]
 800442c:	e02c      	b.n	8004488 <UART_SetConfig+0x348>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a72      	ldr	r2, [pc, #456]	@ (80045fc <UART_SetConfig+0x4bc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d125      	bne.n	8004484 <UART_SetConfig+0x344>
 8004438:	4b71      	ldr	r3, [pc, #452]	@ (8004600 <UART_SetConfig+0x4c0>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004442:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004446:	d017      	beq.n	8004478 <UART_SetConfig+0x338>
 8004448:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800444c:	d817      	bhi.n	800447e <UART_SetConfig+0x33e>
 800444e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004452:	d00b      	beq.n	800446c <UART_SetConfig+0x32c>
 8004454:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004458:	d811      	bhi.n	800447e <UART_SetConfig+0x33e>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <UART_SetConfig+0x326>
 800445e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004462:	d006      	beq.n	8004472 <UART_SetConfig+0x332>
 8004464:	e00b      	b.n	800447e <UART_SetConfig+0x33e>
 8004466:	2300      	movs	r3, #0
 8004468:	77fb      	strb	r3, [r7, #31]
 800446a:	e00d      	b.n	8004488 <UART_SetConfig+0x348>
 800446c:	2302      	movs	r3, #2
 800446e:	77fb      	strb	r3, [r7, #31]
 8004470:	e00a      	b.n	8004488 <UART_SetConfig+0x348>
 8004472:	2304      	movs	r3, #4
 8004474:	77fb      	strb	r3, [r7, #31]
 8004476:	e007      	b.n	8004488 <UART_SetConfig+0x348>
 8004478:	2308      	movs	r3, #8
 800447a:	77fb      	strb	r3, [r7, #31]
 800447c:	e004      	b.n	8004488 <UART_SetConfig+0x348>
 800447e:	2310      	movs	r3, #16
 8004480:	77fb      	strb	r3, [r7, #31]
 8004482:	e001      	b.n	8004488 <UART_SetConfig+0x348>
 8004484:	2310      	movs	r3, #16
 8004486:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004490:	d15b      	bne.n	800454a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004492:	7ffb      	ldrb	r3, [r7, #31]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d828      	bhi.n	80044ea <UART_SetConfig+0x3aa>
 8004498:	a201      	add	r2, pc, #4	@ (adr r2, 80044a0 <UART_SetConfig+0x360>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044c5 	.word	0x080044c5
 80044a4:	080044cd 	.word	0x080044cd
 80044a8:	080044d5 	.word	0x080044d5
 80044ac:	080044eb 	.word	0x080044eb
 80044b0:	080044db 	.word	0x080044db
 80044b4:	080044eb 	.word	0x080044eb
 80044b8:	080044eb 	.word	0x080044eb
 80044bc:	080044eb 	.word	0x080044eb
 80044c0:	080044e3 	.word	0x080044e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c4:	f7ff f94c 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 80044c8:	61b8      	str	r0, [r7, #24]
        break;
 80044ca:	e013      	b.n	80044f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044cc:	f7ff f95c 	bl	8003788 <HAL_RCC_GetPCLK2Freq>
 80044d0:	61b8      	str	r0, [r7, #24]
        break;
 80044d2:	e00f      	b.n	80044f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d4:	4b4b      	ldr	r3, [pc, #300]	@ (8004604 <UART_SetConfig+0x4c4>)
 80044d6:	61bb      	str	r3, [r7, #24]
        break;
 80044d8:	e00c      	b.n	80044f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044da:	f7ff f86f 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 80044de:	61b8      	str	r0, [r7, #24]
        break;
 80044e0:	e008      	b.n	80044f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044e6:	61bb      	str	r3, [r7, #24]
        break;
 80044e8:	e004      	b.n	80044f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	77bb      	strb	r3, [r7, #30]
        break;
 80044f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d074      	beq.n	80045e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	005a      	lsls	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	441a      	add	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	fbb2 f3f3 	udiv	r3, r2, r3
 800450e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b0f      	cmp	r3, #15
 8004514:	d916      	bls.n	8004544 <UART_SetConfig+0x404>
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800451c:	d212      	bcs.n	8004544 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	b29b      	uxth	r3, r3
 8004522:	f023 030f 	bic.w	r3, r3, #15
 8004526:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	085b      	lsrs	r3, r3, #1
 800452c:	b29b      	uxth	r3, r3
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	b29a      	uxth	r2, r3
 8004534:	89fb      	ldrh	r3, [r7, #14]
 8004536:	4313      	orrs	r3, r2
 8004538:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	89fa      	ldrh	r2, [r7, #14]
 8004540:	60da      	str	r2, [r3, #12]
 8004542:	e04f      	b.n	80045e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	77bb      	strb	r3, [r7, #30]
 8004548:	e04c      	b.n	80045e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800454a:	7ffb      	ldrb	r3, [r7, #31]
 800454c:	2b08      	cmp	r3, #8
 800454e:	d828      	bhi.n	80045a2 <UART_SetConfig+0x462>
 8004550:	a201      	add	r2, pc, #4	@ (adr r2, 8004558 <UART_SetConfig+0x418>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	0800457d 	.word	0x0800457d
 800455c:	08004585 	.word	0x08004585
 8004560:	0800458d 	.word	0x0800458d
 8004564:	080045a3 	.word	0x080045a3
 8004568:	08004593 	.word	0x08004593
 800456c:	080045a3 	.word	0x080045a3
 8004570:	080045a3 	.word	0x080045a3
 8004574:	080045a3 	.word	0x080045a3
 8004578:	0800459b 	.word	0x0800459b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800457c:	f7ff f8f0 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8004580:	61b8      	str	r0, [r7, #24]
        break;
 8004582:	e013      	b.n	80045ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004584:	f7ff f900 	bl	8003788 <HAL_RCC_GetPCLK2Freq>
 8004588:	61b8      	str	r0, [r7, #24]
        break;
 800458a:	e00f      	b.n	80045ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800458c:	4b1d      	ldr	r3, [pc, #116]	@ (8004604 <UART_SetConfig+0x4c4>)
 800458e:	61bb      	str	r3, [r7, #24]
        break;
 8004590:	e00c      	b.n	80045ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004592:	f7ff f813 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 8004596:	61b8      	str	r0, [r7, #24]
        break;
 8004598:	e008      	b.n	80045ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800459a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800459e:	61bb      	str	r3, [r7, #24]
        break;
 80045a0:	e004      	b.n	80045ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	77bb      	strb	r3, [r7, #30]
        break;
 80045aa:	bf00      	nop
    }

    if (pclk != 0U)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d018      	beq.n	80045e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	085a      	lsrs	r2, r3, #1
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	441a      	add	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b0f      	cmp	r3, #15
 80045ca:	d909      	bls.n	80045e0 <UART_SetConfig+0x4a0>
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d2:	d205      	bcs.n	80045e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	e001      	b.n	80045e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80045f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40007c00 	.word	0x40007c00
 8004600:	40023800 	.word	0x40023800
 8004604:	00f42400 	.word	0x00f42400

08004608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01a      	beq.n	800471e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004706:	d10a      	bne.n	800471e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	605a      	str	r2, [r3, #4]
  }
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08c      	sub	sp, #48	@ 0x30
 8004750:	af02      	add	r7, sp, #8
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800475c:	f7fd f9f0 	bl	8001b40 <HAL_GetTick>
 8004760:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d12e      	bne.n	80047ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004770:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	2200      	movs	r2, #0
 800477a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f83b 	bl	80047fa <UART_WaitOnFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d021      	beq.n	80047ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	60fb      	str	r3, [r7, #12]
   return(result);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800479e:	623b      	str	r3, [r7, #32]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	69b9      	ldr	r1, [r7, #24]
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	617b      	str	r3, [r7, #20]
   return(result);
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e6      	bne.n	800478a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e011      	b.n	80047f2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3728      	adds	r7, #40	@ 0x28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	4613      	mov	r3, r2
 8004808:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480a:	e04f      	b.n	80048ac <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004812:	d04b      	beq.n	80048ac <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004814:	f7fd f994 	bl	8001b40 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	429a      	cmp	r2, r3
 8004822:	d302      	bcc.n	800482a <UART_WaitOnFlagUntilTimeout+0x30>
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e04e      	b.n	80048cc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d037      	beq.n	80048ac <UART_WaitOnFlagUntilTimeout+0xb2>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b80      	cmp	r3, #128	@ 0x80
 8004840:	d034      	beq.n	80048ac <UART_WaitOnFlagUntilTimeout+0xb2>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b40      	cmp	r3, #64	@ 0x40
 8004846:	d031      	beq.n	80048ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b08      	cmp	r3, #8
 8004854:	d110      	bne.n	8004878 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2208      	movs	r2, #8
 800485c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f838 	bl	80048d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2208      	movs	r2, #8
 8004868:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e029      	b.n	80048cc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004882:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004886:	d111      	bne.n	80048ac <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004890:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 f81e 	bl	80048d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e00f      	b.n	80048cc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69da      	ldr	r2, [r3, #28]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4013      	ands	r3, r2
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	bf0c      	ite	eq
 80048bc:	2301      	moveq	r3, #1
 80048be:	2300      	movne	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d0a0      	beq.n	800480c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b095      	sub	sp, #84	@ 0x54
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80048fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004900:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e6      	bne.n	80048dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3308      	adds	r3, #8
 8004914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	61fb      	str	r3, [r7, #28]
   return(result);
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f023 0301 	bic.w	r3, r3, #1
 8004924:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3308      	adds	r3, #8
 800492c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800492e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004930:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004934:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e5      	bne.n	800490e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004946:	2b01      	cmp	r3, #1
 8004948:	d118      	bne.n	800497c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	60bb      	str	r3, [r7, #8]
   return(result);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f023 0310 	bic.w	r3, r3, #16
 800495e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	6979      	ldr	r1, [r7, #20]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	613b      	str	r3, [r7, #16]
   return(result);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e6      	bne.n	800494a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004990:	bf00      	nop
 8004992:	3754      	adds	r7, #84	@ 0x54
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <sensor_init>:
static const char *TAG = "sensor";

BMP180_CAL_TypeDef bmp180_calibration_data;
bool bmp180_initialized = false;

void sensor_init(I2C_HandleTypeDef *hi2c1) {
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af04      	add	r7, sp, #16
 80049a2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    // Reading calibration data from BMP180 sensor's eeprom initializes the sensor
    ret = BMP180_READ_CALDATA(hi2c1, &bmp180_calibration_data);
 80049a8:	493f      	ldr	r1, [pc, #252]	@ (8004aa8 <sensor_init+0x10c>)
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fc fe8f 	bl	80016ce <BMP180_READ_CALDATA>
 80049b0:	4603      	mov	r3, r0
 80049b2:	73fb      	strb	r3, [r7, #15]
    if(ret == HAL_OK) {
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <sensor_init+0x34>
        printf("%s: BMP180 initialized : %d\r\n", TAG, ret);
 80049ba:	4b3c      	ldr	r3, [pc, #240]	@ (8004aac <sensor_init+0x110>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	7bfa      	ldrb	r2, [r7, #15]
 80049c0:	4619      	mov	r1, r3
 80049c2:	483b      	ldr	r0, [pc, #236]	@ (8004ab0 <sensor_init+0x114>)
 80049c4:	f000 ffd6 	bl	8005974 <iprintf>
        bmp180_initialized = true;
 80049c8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ab4 <sensor_init+0x118>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	e006      	b.n	80049de <sensor_init+0x42>
    }
    else {
        printf("%s: BMP180 initialization failed: %d\r\n", TAG, ret);
 80049d0:	4b36      	ldr	r3, [pc, #216]	@ (8004aac <sensor_init+0x110>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	7bfa      	ldrb	r2, [r7, #15]
 80049d6:	4619      	mov	r1, r3
 80049d8:	4837      	ldr	r0, [pc, #220]	@ (8004ab8 <sensor_init+0x11c>)
 80049da:	f000 ffcb 	bl	8005974 <iprintf>
    }

    // Check if we can communicate with the sensor
    ret = HAL_I2C_Mem_Read(hi2c1, TH09C_ADDRESS << 1, TH09C_REG_SENS_STAT, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80049de:	f04f 33ff 	mov.w	r3, #4294967295
 80049e2:	9302      	str	r3, [sp, #8]
 80049e4:	2301      	movs	r3, #1
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	f107 030e 	add.w	r3, r7, #14
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	2301      	movs	r3, #1
 80049f0:	2224      	movs	r2, #36	@ 0x24
 80049f2:	2186      	movs	r1, #134	@ 0x86
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7fd fd8d 	bl	8002514 <HAL_I2C_Mem_Read>
 80049fa:	4603      	mov	r3, r0
 80049fc:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <sensor_init+0x78>
        printf("%s: Failed to communicate with TH09C sensor: %d\r\n", TAG, ret);
 8004a04:	4b29      	ldr	r3, [pc, #164]	@ (8004aac <sensor_init+0x110>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	7bfa      	ldrb	r2, [r7, #15]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	482b      	ldr	r0, [pc, #172]	@ (8004abc <sensor_init+0x120>)
 8004a0e:	f000 ffb1 	bl	8005974 <iprintf>
 8004a12:	e006      	b.n	8004a22 <sensor_init+0x86>
    }
    else {
        printf("%s: TH09C sensor found, status: 0x%02x\r\n", TAG, data);
 8004a14:	4b25      	ldr	r3, [pc, #148]	@ (8004aac <sensor_init+0x110>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	7bba      	ldrb	r2, [r7, #14]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4828      	ldr	r0, [pc, #160]	@ (8004ac0 <sensor_init+0x124>)
 8004a1e:	f000 ffa9 	bl	8005974 <iprintf>
    }

    // Configure sensor for single shot mode (0x00 = single shot mode for both sensors)
    data = 0x00;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Mem_Write(hi2c1, TH09C_ADDRESS << 1, TH09C_REG_SENS_RUN, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8004a26:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2a:	9302      	str	r3, [sp, #8]
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	9301      	str	r3, [sp, #4]
 8004a30:	f107 030e 	add.w	r3, r7, #14
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	2301      	movs	r3, #1
 8004a38:	2221      	movs	r2, #33	@ 0x21
 8004a3a:	2186      	movs	r1, #134	@ 0x86
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fd fc55 	bl	80022ec <HAL_I2C_Mem_Write>
 8004a42:	4603      	mov	r3, r0
 8004a44:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d006      	beq.n	8004a5a <sensor_init+0xbe>
        printf("%s: Failed to set TH09C run mode: %d\r\n", TAG, ret);
 8004a4c:	4b17      	ldr	r3, [pc, #92]	@ (8004aac <sensor_init+0x110>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	7bfa      	ldrb	r2, [r7, #15]
 8004a52:	4619      	mov	r1, r3
 8004a54:	481b      	ldr	r0, [pc, #108]	@ (8004ac4 <sensor_init+0x128>)
 8004a56:	f000 ff8d 	bl	8005974 <iprintf>
    }

    // Configure system control register - enable low power mode
    data = TH09C_LOW_POWER_BIT;  // Set low power bit
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Mem_Write(hi2c1, TH09C_ADDRESS << 1, TH09C_REG_SYS_CTRL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8004a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a62:	9302      	str	r3, [sp, #8]
 8004a64:	2301      	movs	r3, #1
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	f107 030e 	add.w	r3, r7, #14
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	2301      	movs	r3, #1
 8004a70:	2210      	movs	r2, #16
 8004a72:	2186      	movs	r1, #134	@ 0x86
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fd fc39 	bl	80022ec <HAL_I2C_Mem_Write>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d006      	beq.n	8004a92 <sensor_init+0xf6>
        printf("%s: Failed to configure TH09C system control: %d\r\n", TAG, ret);
 8004a84:	4b09      	ldr	r3, [pc, #36]	@ (8004aac <sensor_init+0x110>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	7bfa      	ldrb	r2, [r7, #15]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	480e      	ldr	r0, [pc, #56]	@ (8004ac8 <sensor_init+0x12c>)
 8004a8e:	f000 ff71 	bl	8005974 <iprintf>
    }

    printf("%s: TH09C sensor initialized successfully\r\n", TAG);
 8004a92:	4b06      	ldr	r3, [pc, #24]	@ (8004aac <sensor_init+0x110>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4619      	mov	r1, r3
 8004a98:	480c      	ldr	r0, [pc, #48]	@ (8004acc <sensor_init+0x130>)
 8004a9a:	f000 ff6b 	bl	8005974 <iprintf>
}
 8004a9e:	bf00      	nop
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	200002f0 	.word	0x200002f0
 8004aac:	2000000c 	.word	0x2000000c
 8004ab0:	08007938 	.word	0x08007938
 8004ab4:	2000030c 	.word	0x2000030c
 8004ab8:	08007958 	.word	0x08007958
 8004abc:	08007980 	.word	0x08007980
 8004ac0:	080079b4 	.word	0x080079b4
 8004ac4:	080079e0 	.word	0x080079e0
 8004ac8:	08007a08 	.word	0x08007a08
 8004acc:	08007a3c 	.word	0x08007a3c

08004ad0 <sensor_read_bmp180>:

bmp180_reading_t sensor_read_bmp180(I2C_HandleTypeDef *hi2c) {
 8004ad0:	b590      	push	{r4, r7, lr}
 8004ad2:	b08d      	sub	sp, #52	@ 0x34
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
    BMP180_CTRL_TypeDef temp_result, press_result;
    uint32_t ut, up;
    bmp180_reading_t reading = {0, 0, HAL_OK};
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	753b      	strb	r3, [r7, #20]
    
    if (!bmp180_initialized) {
 8004ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8004bdc <sensor_read_bmp180+0x10c>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	f083 0301 	eor.w	r3, r3, #1
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d010      	beq.n	8004b16 <sensor_read_bmp180+0x46>
        printf("%s: BMP180: Sensor not initialized\r\n", TAG);
 8004af4:	4b3a      	ldr	r3, [pc, #232]	@ (8004be0 <sensor_read_bmp180+0x110>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4619      	mov	r1, r3
 8004afa:	483a      	ldr	r0, [pc, #232]	@ (8004be4 <sensor_read_bmp180+0x114>)
 8004afc:	f000 ff3a 	bl	8005974 <iprintf>
        reading.status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	753b      	strb	r3, [r7, #20]
        return reading;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	461c      	mov	r4, r3
 8004b08:	f107 030c 	add.w	r3, r7, #12
 8004b0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b14:	e05e      	b.n	8004bd4 <sensor_read_bmp180+0x104>
    }
    
    // Step 1: Read uncompensated(raw) temp data
    reading.status = BMP180_READ_UT(hi2c, &temp_result);
 8004b16:	f107 0320 	add.w	r3, r7, #32
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6838      	ldr	r0, [r7, #0]
 8004b1e:	f7fc fe64 	bl	80017ea <BMP180_READ_UT>
 8004b22:	4603      	mov	r3, r0
 8004b24:	753b      	strb	r3, [r7, #20]
    if (reading.status != HAL_OK) {
 8004b26:	7d3b      	ldrb	r3, [r7, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00e      	beq.n	8004b4a <sensor_read_bmp180+0x7a>
        printf("%s: BMP180: Failed to read temperature\r\n", TAG);
 8004b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8004be0 <sensor_read_bmp180+0x110>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4619      	mov	r1, r3
 8004b32:	482d      	ldr	r0, [pc, #180]	@ (8004be8 <sensor_read_bmp180+0x118>)
 8004b34:	f000 ff1e 	bl	8005974 <iprintf>
        return reading;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	461c      	mov	r4, r3
 8004b3c:	f107 030c 	add.w	r3, r7, #12
 8004b40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b48:	e044      	b.n	8004bd4 <sensor_read_bmp180+0x104>
    }
    
    // Step 2: Calculate temperature to get B5 value
    ut = (((uint32_t)temp_result.MSB) << 8) | temp_result.LSB;
 8004b4a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    reading.temperature = BMP180_CALC_TEMP(ut, &bmp180_calibration_data);
 8004b5c:	4923      	ldr	r1, [pc, #140]	@ (8004bec <sensor_read_bmp180+0x11c>)
 8004b5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b60:	f7fc fe80 	bl	8001864 <BMP180_CALC_TEMP>
 8004b64:	4603      	mov	r3, r0
 8004b66:	60fb      	str	r3, [r7, #12]
    
    // Step 3: Read uncompensated pressure
    reading.status = BMP180_READ_UP(hi2c, &press_result, BMP180_OSS);
 8004b68:	f107 0318 	add.w	r3, r7, #24
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6838      	ldr	r0, [r7, #0]
 8004b72:	f7fc fea7 	bl	80018c4 <BMP180_READ_UP>
 8004b76:	4603      	mov	r3, r0
 8004b78:	753b      	strb	r3, [r7, #20]
    if (reading.status != HAL_OK) {
 8004b7a:	7d3b      	ldrb	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00e      	beq.n	8004b9e <sensor_read_bmp180+0xce>
        printf("%s: Failed to read BMP180 pressure\r\n", TAG);
 8004b80:	4b17      	ldr	r3, [pc, #92]	@ (8004be0 <sensor_read_bmp180+0x110>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4619      	mov	r1, r3
 8004b86:	481a      	ldr	r0, [pc, #104]	@ (8004bf0 <sensor_read_bmp180+0x120>)
 8004b88:	f000 fef4 	bl	8005974 <iprintf>
        return reading;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	461c      	mov	r4, r3
 8004b90:	f107 030c 	add.w	r3, r7, #12
 8004b94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b9c:	e01a      	b.n	8004bd4 <sensor_read_bmp180+0x104>
    }
    
    // Step 4: Calculate pressure with correct bit assembly
    up = (((uint32_t)press_result.MSB) << 16 | press_result.LSB << 8 | press_result.XLSB) >> (8-BMP180_OSS);
 8004b9e:	7ebb      	ldrb	r3, [r7, #26]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	041a      	lsls	r2, r3, #16
 8004ba4:	7efb      	ldrb	r3, [r7, #27]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	4313      	orrs	r3, r2
 8004bac:	7f3a      	ldrb	r2, [r7, #28]
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    reading.pressure = BMP180_CALC_PRESS(up, &bmp180_calibration_data, BMP180_OSS);
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	490c      	ldr	r1, [pc, #48]	@ (8004bec <sensor_read_bmp180+0x11c>)
 8004bba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bbc:	f7fc fed0 	bl	8001960 <BMP180_CALC_PRESS>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	613b      	str	r3, [r7, #16]
    
    return reading;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	461c      	mov	r4, r3
 8004bc8:	f107 030c 	add.w	r3, r7, #12
 8004bcc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004bd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	3734      	adds	r7, #52	@ 0x34
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd90      	pop	{r4, r7, pc}
 8004bdc:	2000030c 	.word	0x2000030c
 8004be0:	2000000c 	.word	0x2000000c
 8004be4:	08007a68 	.word	0x08007a68
 8004be8:	08007a90 	.word	0x08007a90
 8004bec:	200002f0 	.word	0x200002f0
 8004bf0:	08007abc 	.word	0x08007abc

08004bf4 <crc7>:

uint32_t crc7(uint32_t val) {
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
    // Setup polynomial
    uint32_t pol = CRC7POLY;
 8004bfc:	2389      	movs	r3, #137	@ 0x89
 8004bfe:	60fb      	str	r3, [r7, #12]

    // Align polynomial with data
    pol = pol << (DATA7WIDTH - CRC7WIDTH - 1);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	025b      	lsls	r3, r3, #9
 8004c04:	60fb      	str	r3, [r7, #12]

    // Loop variable (indicates which bit to test, start with highest)
    uint32_t bit = DATA7MSB;
 8004c06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c0a:	60bb      	str	r3, [r7, #8]

    // Make room for CRC value
    val = val << CRC7WIDTH;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	01db      	lsls	r3, r3, #7
 8004c10:	607b      	str	r3, [r7, #4]
    bit = bit << CRC7WIDTH;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	01db      	lsls	r3, r3, #7
 8004c16:	60bb      	str	r3, [r7, #8]
    pol = pol << CRC7WIDTH;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	01db      	lsls	r3, r3, #7
 8004c1c:	60fb      	str	r3, [r7, #12]

    // Insert initial vector
    val |= CRC7IVEC;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8004c24:	607b      	str	r3, [r7, #4]

    // Apply division until all bits done
    while (bit & (DATA7MASK << CRC7WIDTH)) {
 8004c26:	e00e      	b.n	8004c46 <crc7+0x52>
        if (bit & val) val ^= pol;
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <crc7+0x46>
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4053      	eors	r3, r2
 8004c38:	607b      	str	r3, [r7, #4]
        bit >>= 1;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	085b      	lsrs	r3, r3, #1
 8004c3e:	60bb      	str	r3, [r7, #8]
        pol >>= 1;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	085b      	lsrs	r3, r3, #1
 8004c44:	60fb      	str	r3, [r7, #12]
    while (bit & (DATA7MASK << CRC7WIDTH)) {
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	4b05      	ldr	r3, [pc, #20]	@ (8004c60 <crc7+0x6c>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1eb      	bne.n	8004c28 <crc7+0x34>
    }

    return val;
 8004c50:	687b      	ldr	r3, [r7, #4]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	00ffff80 	.word	0x00ffff80

08004c64 <sensor_read_th09c>:

// Read temperature and humidity from TH09C sensor
th09c_reading_t sensor_read_th09c(I2C_HandleTypeDef *hi2c) {
 8004c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c66:	b09b      	sub	sp, #108	@ 0x6c
 8004c68:	af04      	add	r7, sp, #16
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret;
    uint8_t data;

    th09c_reading_t reading = {0, 0, 0, 0, HAL_OK};
 8004c6e:	f107 0314 	add.w	r3, r7, #20
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	605a      	str	r2, [r3, #4]
 8004c78:	609a      	str	r2, [r3, #8]

    // Start both temperature and humidity measurements
    data = TH09C_TEMP_BIT | TH09C_HUM_BIT;  // Set bits for both sensors
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    reading.status = HAL_I2C_Mem_Write(hi2c, TH09C_ADDRESS << 1, TH09C_REG_SENS_START, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8004c80:	f04f 33ff 	mov.w	r3, #4294967295
 8004c84:	9302      	str	r3, [sp, #8]
 8004c86:	2301      	movs	r3, #1
 8004c88:	9301      	str	r3, [sp, #4]
 8004c8a:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	2301      	movs	r3, #1
 8004c92:	2222      	movs	r2, #34	@ 0x22
 8004c94:	2186      	movs	r1, #134	@ 0x86
 8004c96:	6838      	ldr	r0, [r7, #0]
 8004c98:	f7fd fb28 	bl	80022ec <HAL_I2C_Mem_Write>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	77bb      	strb	r3, [r7, #30]
    if (reading.status != HAL_OK) {
 8004ca0:	7fbb      	ldrb	r3, [r7, #30]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00f      	beq.n	8004cc6 <sensor_read_th09c+0x62>
        printf("%s: Failed to start TH09C measurements: %d\r\n", TAG, reading.status);
 8004ca6:	4b9a      	ldr	r3, [pc, #616]	@ (8004f10 <sensor_read_th09c+0x2ac>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	7fba      	ldrb	r2, [r7, #30]
 8004cac:	4619      	mov	r1, r3
 8004cae:	4899      	ldr	r0, [pc, #612]	@ (8004f14 <sensor_read_th09c+0x2b0>)
 8004cb0:	f000 fe60 	bl	8005974 <iprintf>
        return reading;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	461c      	mov	r4, r3
 8004cb8:	f107 0314 	add.w	r3, r7, #20
 8004cbc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004cc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004cc4:	e11f      	b.n	8004f06 <sensor_read_th09c+0x2a2>
    }

    // Wait for measurements to complete
    HAL_Delay(TH09C_CONVERSION_TIME_MS);
 8004cc6:	2082      	movs	r0, #130	@ 0x82
 8004cc8:	f7fc ff46 	bl	8001b58 <HAL_Delay>

    // Check if measurements are complete
    reading.status = HAL_I2C_Mem_Read(hi2c, TH09C_ADDRESS << 1, TH09C_REG_SENS_STAT, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8004ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd0:	9302      	str	r3, [sp, #8]
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	2301      	movs	r3, #1
 8004cde:	2224      	movs	r2, #36	@ 0x24
 8004ce0:	2186      	movs	r1, #134	@ 0x86
 8004ce2:	6838      	ldr	r0, [r7, #0]
 8004ce4:	f7fd fc16 	bl	8002514 <HAL_I2C_Mem_Read>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	77bb      	strb	r3, [r7, #30]
    if (reading.status != HAL_OK) {
 8004cec:	7fbb      	ldrb	r3, [r7, #30]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00f      	beq.n	8004d12 <sensor_read_th09c+0xae>
        printf("%s: Failed to read sensor status: %d\r\n", TAG, reading.status);
 8004cf2:	4b87      	ldr	r3, [pc, #540]	@ (8004f10 <sensor_read_th09c+0x2ac>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	7fba      	ldrb	r2, [r7, #30]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4887      	ldr	r0, [pc, #540]	@ (8004f18 <sensor_read_th09c+0x2b4>)
 8004cfc:	f000 fe3a 	bl	8005974 <iprintf>
        return reading;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	461c      	mov	r4, r3
 8004d04:	f107 0314 	add.w	r3, r7, #20
 8004d08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d10:	e0f9      	b.n	8004f06 <sensor_read_th09c+0x2a2>
    }

    if (data & (TH09C_TEMP_BIT | TH09C_HUM_BIT)) {
 8004d12:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <sensor_read_th09c+0xca>
        printf("%s: TH09C measurements still in progress, status: 0x%02x\r\n", TAG, data);
 8004d1e:	4b7c      	ldr	r3, [pc, #496]	@ (8004f10 <sensor_read_th09c+0x2ac>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8004d26:	4619      	mov	r1, r3
 8004d28:	487c      	ldr	r0, [pc, #496]	@ (8004f1c <sensor_read_th09c+0x2b8>)
 8004d2a:	f000 fe23 	bl	8005974 <iprintf>
        // We'll try to read anyway
    }

    // Read temperature value (3 bytes)
    uint8_t t_val_buf[3];
    reading.status = HAL_I2C_Mem_Read(hi2c, TH09C_ADDRESS << 1, TH09C_REG_T_VAL, I2C_MEMADD_SIZE_8BIT, t_val_buf, sizeof(t_val_buf), HAL_MAX_DELAY);
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d32:	9302      	str	r3, [sp, #8]
 8004d34:	2303      	movs	r3, #3
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	f107 0310 	add.w	r3, r7, #16
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	2301      	movs	r3, #1
 8004d40:	2230      	movs	r2, #48	@ 0x30
 8004d42:	2186      	movs	r1, #134	@ 0x86
 8004d44:	6838      	ldr	r0, [r7, #0]
 8004d46:	f7fd fbe5 	bl	8002514 <HAL_I2C_Mem_Read>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	77bb      	strb	r3, [r7, #30]
    if (reading.status == HAL_OK) {
 8004d4e:	7fbb      	ldrb	r3, [r7, #30]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d15e      	bne.n	8004e12 <sensor_read_th09c+0x1ae>
        // Extract the fields according to datasheet (little endian)
        uint32_t t_val = (t_val_buf[2] << 16) | (t_val_buf[1] << 8) | t_val_buf[0];
 8004d54:	7cbb      	ldrb	r3, [r7, #18]
 8004d56:	041a      	lsls	r2, r3, #16
 8004d58:	7c7b      	ldrb	r3, [r7, #17]
 8004d5a:	021b      	lsls	r3, r3, #8
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	7c3a      	ldrb	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	657b      	str	r3, [r7, #84]	@ 0x54
        uint32_t t_data = (t_val >> 0) & 0xFFFF;          // 16-bit data (bits 0-15)
 8004d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	653b      	str	r3, [r7, #80]	@ 0x50
        uint32_t t_valid = (t_val >> 16) & 0x1;           // Valid flag (bit 16)
 8004d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d6c:	0c1b      	lsrs	r3, r3, #16
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint32_t t_crc = (t_val >> 17) & 0x7F;            // CRC (bits 17-23)
 8004d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d76:	0c5b      	lsrs	r3, r3, #17
 8004d78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d7c:	64bb      	str	r3, [r7, #72]	@ 0x48

        // Check CRC
        uint32_t t_payload = (t_val >> 0) & 0x1FFFF;      // CRC is calculated over 17 bits
 8004d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d80:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004d84:	647b      	str	r3, [r7, #68]	@ 0x44
        bool t_crc_ok = (crc7(t_payload) == t_crc);
 8004d86:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004d88:	f7ff ff34 	bl	8004bf4 <crc7>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d90:	4293      	cmp	r3, r2
 8004d92:	bf0c      	ite	eq
 8004d94:	2301      	moveq	r3, #1
 8004d96:	2300      	movne	r3, #0
 8004d98:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

        if (t_valid && t_crc_ok) {
 8004d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d02e      	beq.n	8004e00 <sensor_read_th09c+0x19c>
 8004da2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d02a      	beq.n	8004e00 <sensor_read_th09c+0x19c>
            // Convert to temperature according to datasheet
            float temp_kelvin = (float)t_data / 64.0f;    // Temperature in Kelvin
 8004daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dac:	ee07 3a90 	vmov	s15, r3
 8004db0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004db4:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8004f20 <sensor_read_th09c+0x2bc>
 8004db8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dbc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            reading.temperature = temp_kelvin - 273.15f;  // Convert to Celsius
 8004dc0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004dc4:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8004f24 <sensor_read_th09c+0x2c0>
 8004dc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004dcc:	edc7 7a05 	vstr	s15, [r7, #20]
            reading.temp_valid = true;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	773b      	strb	r3, [r7, #28]

            printf("%s: Temperature: %.1fK, %.1fC\r\n", TAG, temp_kelvin, reading.temperature);
 8004dd4:	4b4e      	ldr	r3, [pc, #312]	@ (8004f10 <sensor_read_th09c+0x2ac>)
 8004dd6:	681e      	ldr	r6, [r3, #0]
 8004dd8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004dda:	f7fb fbd5 	bl	8000588 <__aeabi_f2d>
 8004dde:	4604      	mov	r4, r0
 8004de0:	460d      	mov	r5, r1
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fb fbcf 	bl	8000588 <__aeabi_f2d>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	e9cd 2300 	strd	r2, r3, [sp]
 8004df2:	4622      	mov	r2, r4
 8004df4:	462b      	mov	r3, r5
 8004df6:	4631      	mov	r1, r6
 8004df8:	484b      	ldr	r0, [pc, #300]	@ (8004f28 <sensor_read_th09c+0x2c4>)
 8004dfa:	f000 fdbb 	bl	8005974 <iprintf>
        if (t_valid && t_crc_ok) {
 8004dfe:	e00f      	b.n	8004e20 <sensor_read_th09c+0x1bc>
        } else {
            printf("%s: Temperature data not valid or CRC error (valid=%lu, crc_ok=%d)\r\n", TAG,
 8004e00:	4b43      	ldr	r3, [pc, #268]	@ (8004f10 <sensor_read_th09c+0x2ac>)
 8004e02:	6819      	ldr	r1, [r3, #0]
 8004e04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004e08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e0a:	4848      	ldr	r0, [pc, #288]	@ (8004f2c <sensor_read_th09c+0x2c8>)
 8004e0c:	f000 fdb2 	bl	8005974 <iprintf>
 8004e10:	e006      	b.n	8004e20 <sensor_read_th09c+0x1bc>
                   (unsigned long)t_valid, t_crc_ok);
        }
    } else {
        printf("%s: Failed to read temperature data: %d\r\n", TAG, reading.status);
 8004e12:	4b3f      	ldr	r3, [pc, #252]	@ (8004f10 <sensor_read_th09c+0x2ac>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	7fba      	ldrb	r2, [r7, #30]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4845      	ldr	r0, [pc, #276]	@ (8004f30 <sensor_read_th09c+0x2cc>)
 8004e1c:	f000 fdaa 	bl	8005974 <iprintf>
    }

    // Read humidity value (3 bytes)
    uint8_t h_val_buf[3];
    ret = HAL_I2C_Mem_Read(hi2c, TH09C_ADDRESS << 1, TH09C_REG_H_VAL, I2C_MEMADD_SIZE_8BIT, h_val_buf, sizeof(h_val_buf), HAL_MAX_DELAY);
 8004e20:	f04f 33ff 	mov.w	r3, #4294967295
 8004e24:	9302      	str	r3, [sp, #8]
 8004e26:	2303      	movs	r3, #3
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	f107 030c 	add.w	r3, r7, #12
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2301      	movs	r3, #1
 8004e32:	2233      	movs	r2, #51	@ 0x33
 8004e34:	2186      	movs	r1, #134	@ 0x86
 8004e36:	6838      	ldr	r0, [r7, #0]
 8004e38:	f7fd fb6c 	bl	8002514 <HAL_I2C_Mem_Read>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    if (ret == HAL_OK) {
 8004e42:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d14d      	bne.n	8004ee6 <sensor_read_th09c+0x282>
        // Extract the fields according to datasheet (little endian)
        uint32_t h_val = (h_val_buf[2] << 16) | (h_val_buf[1] << 8) | h_val_buf[0];
 8004e4a:	7bbb      	ldrb	r3, [r7, #14]
 8004e4c:	041a      	lsls	r2, r3, #16
 8004e4e:	7b7b      	ldrb	r3, [r7, #13]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	4313      	orrs	r3, r2
 8004e54:	7b3a      	ldrb	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t h_data = (h_val >> 0) & 0xFFFF;          // 16-bit data (bits 0-15)
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t h_valid = (h_val >> 16) & 0x1;           // Valid flag (bit 16)
 8004e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e62:	0c1b      	lsrs	r3, r3, #16
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t h_crc = (h_val >> 17) & 0x7F;            // CRC (bits 17-23)
 8004e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6c:	0c5b      	lsrs	r3, r3, #17
 8004e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e72:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Check CRC
        uint32_t h_payload = (h_val >> 0) & 0x1FFFF;      // CRC is calculated over 17 bits
 8004e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e76:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004e7a:	627b      	str	r3, [r7, #36]	@ 0x24
        bool h_crc_ok = (crc7(h_payload) == h_crc);
 8004e7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e7e:	f7ff feb9 	bl	8004bf4 <crc7>
 8004e82:	4602      	mov	r2, r0
 8004e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e86:	4293      	cmp	r3, r2
 8004e88:	bf0c      	ite	eq
 8004e8a:	2301      	moveq	r3, #1
 8004e8c:	2300      	movne	r3, #0
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        if (h_valid && h_crc_ok) {
 8004e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01d      	beq.n	8004ed4 <sensor_read_th09c+0x270>
 8004e98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d019      	beq.n	8004ed4 <sensor_read_th09c+0x270>
            // Convert to humidity according to datasheet
            reading.humidity = (float)h_data / 512.0f;   // Humidity in %RH
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004eaa:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8004f34 <sensor_read_th09c+0x2d0>
 8004eae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004eb2:	edc7 7a06 	vstr	s15, [r7, #24]
            reading.hum_valid = true;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	777b      	strb	r3, [r7, #29]

            printf("%s: Humidity: %.1f%%\r\n", TAG, reading.humidity);
 8004eba:	4b15      	ldr	r3, [pc, #84]	@ (8004f10 <sensor_read_th09c+0x2ac>)
 8004ebc:	681c      	ldr	r4, [r3, #0]
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fb fb61 	bl	8000588 <__aeabi_f2d>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4621      	mov	r1, r4
 8004ecc:	481a      	ldr	r0, [pc, #104]	@ (8004f38 <sensor_read_th09c+0x2d4>)
 8004ece:	f000 fd51 	bl	8005974 <iprintf>
 8004ed2:	e010      	b.n	8004ef6 <sensor_read_th09c+0x292>
        } else {
            printf("%s: Humidity data not valid or CRC error (valid=%lu, crc_ok=%d)\r\n", TAG,
 8004ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8004f10 <sensor_read_th09c+0x2ac>)
 8004ed6:	6819      	ldr	r1, [r3, #0]
 8004ed8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004edc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ede:	4817      	ldr	r0, [pc, #92]	@ (8004f3c <sensor_read_th09c+0x2d8>)
 8004ee0:	f000 fd48 	bl	8005974 <iprintf>
 8004ee4:	e007      	b.n	8004ef6 <sensor_read_th09c+0x292>
                   (unsigned long)h_valid, h_crc_ok);
        }
    } else {
        printf("%s: Failed to read humidity data: %d\r\n", TAG, ret);
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f10 <sensor_read_th09c+0x2ac>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4813      	ldr	r0, [pc, #76]	@ (8004f40 <sensor_read_th09c+0x2dc>)
 8004ef2:	f000 fd3f 	bl	8005974 <iprintf>
    }

    return reading;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	461c      	mov	r4, r3
 8004efa:	f107 0314 	add.w	r3, r7, #20
 8004efe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	375c      	adds	r7, #92	@ 0x5c
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	2000000c 	.word	0x2000000c
 8004f14:	08007ae4 	.word	0x08007ae4
 8004f18:	08007b14 	.word	0x08007b14
 8004f1c:	08007b3c 	.word	0x08007b3c
 8004f20:	42800000 	.word	0x42800000
 8004f24:	43889333 	.word	0x43889333
 8004f28:	08007b78 	.word	0x08007b78
 8004f2c:	08007b98 	.word	0x08007b98
 8004f30:	08007be0 	.word	0x08007be0
 8004f34:	44000000 	.word	0x44000000
 8004f38:	08007c0c 	.word	0x08007c0c
 8004f3c:	08007c24 	.word	0x08007c24
 8004f40:	08007c68 	.word	0x08007c68

08004f44 <__cvt>:
 8004f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f48:	ec57 6b10 	vmov	r6, r7, d0
 8004f4c:	2f00      	cmp	r7, #0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	4619      	mov	r1, r3
 8004f52:	463b      	mov	r3, r7
 8004f54:	bfbb      	ittet	lt
 8004f56:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004f5a:	461f      	movlt	r7, r3
 8004f5c:	2300      	movge	r3, #0
 8004f5e:	232d      	movlt	r3, #45	@ 0x2d
 8004f60:	700b      	strb	r3, [r1, #0]
 8004f62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f64:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004f68:	4691      	mov	r9, r2
 8004f6a:	f023 0820 	bic.w	r8, r3, #32
 8004f6e:	bfbc      	itt	lt
 8004f70:	4632      	movlt	r2, r6
 8004f72:	4616      	movlt	r6, r2
 8004f74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f78:	d005      	beq.n	8004f86 <__cvt+0x42>
 8004f7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f7e:	d100      	bne.n	8004f82 <__cvt+0x3e>
 8004f80:	3401      	adds	r4, #1
 8004f82:	2102      	movs	r1, #2
 8004f84:	e000      	b.n	8004f88 <__cvt+0x44>
 8004f86:	2103      	movs	r1, #3
 8004f88:	ab03      	add	r3, sp, #12
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	ab02      	add	r3, sp, #8
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	ec47 6b10 	vmov	d0, r6, r7
 8004f94:	4653      	mov	r3, sl
 8004f96:	4622      	mov	r2, r4
 8004f98:	f000 fe4a 	bl	8005c30 <_dtoa_r>
 8004f9c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004fa0:	4605      	mov	r5, r0
 8004fa2:	d119      	bne.n	8004fd8 <__cvt+0x94>
 8004fa4:	f019 0f01 	tst.w	r9, #1
 8004fa8:	d00e      	beq.n	8004fc8 <__cvt+0x84>
 8004faa:	eb00 0904 	add.w	r9, r0, r4
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	f7fb fda7 	bl	8000b08 <__aeabi_dcmpeq>
 8004fba:	b108      	cbz	r0, 8004fc0 <__cvt+0x7c>
 8004fbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fc0:	2230      	movs	r2, #48	@ 0x30
 8004fc2:	9b03      	ldr	r3, [sp, #12]
 8004fc4:	454b      	cmp	r3, r9
 8004fc6:	d31e      	bcc.n	8005006 <__cvt+0xc2>
 8004fc8:	9b03      	ldr	r3, [sp, #12]
 8004fca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004fcc:	1b5b      	subs	r3, r3, r5
 8004fce:	4628      	mov	r0, r5
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	b004      	add	sp, #16
 8004fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004fdc:	eb00 0904 	add.w	r9, r0, r4
 8004fe0:	d1e5      	bne.n	8004fae <__cvt+0x6a>
 8004fe2:	7803      	ldrb	r3, [r0, #0]
 8004fe4:	2b30      	cmp	r3, #48	@ 0x30
 8004fe6:	d10a      	bne.n	8004ffe <__cvt+0xba>
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2300      	movs	r3, #0
 8004fec:	4630      	mov	r0, r6
 8004fee:	4639      	mov	r1, r7
 8004ff0:	f7fb fd8a 	bl	8000b08 <__aeabi_dcmpeq>
 8004ff4:	b918      	cbnz	r0, 8004ffe <__cvt+0xba>
 8004ff6:	f1c4 0401 	rsb	r4, r4, #1
 8004ffa:	f8ca 4000 	str.w	r4, [sl]
 8004ffe:	f8da 3000 	ldr.w	r3, [sl]
 8005002:	4499      	add	r9, r3
 8005004:	e7d3      	b.n	8004fae <__cvt+0x6a>
 8005006:	1c59      	adds	r1, r3, #1
 8005008:	9103      	str	r1, [sp, #12]
 800500a:	701a      	strb	r2, [r3, #0]
 800500c:	e7d9      	b.n	8004fc2 <__cvt+0x7e>

0800500e <__exponent>:
 800500e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005010:	2900      	cmp	r1, #0
 8005012:	bfba      	itte	lt
 8005014:	4249      	neglt	r1, r1
 8005016:	232d      	movlt	r3, #45	@ 0x2d
 8005018:	232b      	movge	r3, #43	@ 0x2b
 800501a:	2909      	cmp	r1, #9
 800501c:	7002      	strb	r2, [r0, #0]
 800501e:	7043      	strb	r3, [r0, #1]
 8005020:	dd29      	ble.n	8005076 <__exponent+0x68>
 8005022:	f10d 0307 	add.w	r3, sp, #7
 8005026:	461d      	mov	r5, r3
 8005028:	270a      	movs	r7, #10
 800502a:	461a      	mov	r2, r3
 800502c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005030:	fb07 1416 	mls	r4, r7, r6, r1
 8005034:	3430      	adds	r4, #48	@ 0x30
 8005036:	f802 4c01 	strb.w	r4, [r2, #-1]
 800503a:	460c      	mov	r4, r1
 800503c:	2c63      	cmp	r4, #99	@ 0x63
 800503e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005042:	4631      	mov	r1, r6
 8005044:	dcf1      	bgt.n	800502a <__exponent+0x1c>
 8005046:	3130      	adds	r1, #48	@ 0x30
 8005048:	1e94      	subs	r4, r2, #2
 800504a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800504e:	1c41      	adds	r1, r0, #1
 8005050:	4623      	mov	r3, r4
 8005052:	42ab      	cmp	r3, r5
 8005054:	d30a      	bcc.n	800506c <__exponent+0x5e>
 8005056:	f10d 0309 	add.w	r3, sp, #9
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	42ac      	cmp	r4, r5
 800505e:	bf88      	it	hi
 8005060:	2300      	movhi	r3, #0
 8005062:	3302      	adds	r3, #2
 8005064:	4403      	add	r3, r0
 8005066:	1a18      	subs	r0, r3, r0
 8005068:	b003      	add	sp, #12
 800506a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800506c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005070:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005074:	e7ed      	b.n	8005052 <__exponent+0x44>
 8005076:	2330      	movs	r3, #48	@ 0x30
 8005078:	3130      	adds	r1, #48	@ 0x30
 800507a:	7083      	strb	r3, [r0, #2]
 800507c:	70c1      	strb	r1, [r0, #3]
 800507e:	1d03      	adds	r3, r0, #4
 8005080:	e7f1      	b.n	8005066 <__exponent+0x58>
	...

08005084 <_printf_float>:
 8005084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005088:	b08d      	sub	sp, #52	@ 0x34
 800508a:	460c      	mov	r4, r1
 800508c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005090:	4616      	mov	r6, r2
 8005092:	461f      	mov	r7, r3
 8005094:	4605      	mov	r5, r0
 8005096:	f000 fccb 	bl	8005a30 <_localeconv_r>
 800509a:	6803      	ldr	r3, [r0, #0]
 800509c:	9304      	str	r3, [sp, #16]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fb f906 	bl	80002b0 <strlen>
 80050a4:	2300      	movs	r3, #0
 80050a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80050a8:	f8d8 3000 	ldr.w	r3, [r8]
 80050ac:	9005      	str	r0, [sp, #20]
 80050ae:	3307      	adds	r3, #7
 80050b0:	f023 0307 	bic.w	r3, r3, #7
 80050b4:	f103 0208 	add.w	r2, r3, #8
 80050b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80050bc:	f8d4 b000 	ldr.w	fp, [r4]
 80050c0:	f8c8 2000 	str.w	r2, [r8]
 80050c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80050cc:	9307      	str	r3, [sp, #28]
 80050ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80050d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80050d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050da:	4b9c      	ldr	r3, [pc, #624]	@ (800534c <_printf_float+0x2c8>)
 80050dc:	f04f 32ff 	mov.w	r2, #4294967295
 80050e0:	f7fb fd44 	bl	8000b6c <__aeabi_dcmpun>
 80050e4:	bb70      	cbnz	r0, 8005144 <_printf_float+0xc0>
 80050e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050ea:	4b98      	ldr	r3, [pc, #608]	@ (800534c <_printf_float+0x2c8>)
 80050ec:	f04f 32ff 	mov.w	r2, #4294967295
 80050f0:	f7fb fd1e 	bl	8000b30 <__aeabi_dcmple>
 80050f4:	bb30      	cbnz	r0, 8005144 <_printf_float+0xc0>
 80050f6:	2200      	movs	r2, #0
 80050f8:	2300      	movs	r3, #0
 80050fa:	4640      	mov	r0, r8
 80050fc:	4649      	mov	r1, r9
 80050fe:	f7fb fd0d 	bl	8000b1c <__aeabi_dcmplt>
 8005102:	b110      	cbz	r0, 800510a <_printf_float+0x86>
 8005104:	232d      	movs	r3, #45	@ 0x2d
 8005106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800510a:	4a91      	ldr	r2, [pc, #580]	@ (8005350 <_printf_float+0x2cc>)
 800510c:	4b91      	ldr	r3, [pc, #580]	@ (8005354 <_printf_float+0x2d0>)
 800510e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005112:	bf8c      	ite	hi
 8005114:	4690      	movhi	r8, r2
 8005116:	4698      	movls	r8, r3
 8005118:	2303      	movs	r3, #3
 800511a:	6123      	str	r3, [r4, #16]
 800511c:	f02b 0304 	bic.w	r3, fp, #4
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	f04f 0900 	mov.w	r9, #0
 8005126:	9700      	str	r7, [sp, #0]
 8005128:	4633      	mov	r3, r6
 800512a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800512c:	4621      	mov	r1, r4
 800512e:	4628      	mov	r0, r5
 8005130:	f000 f9d2 	bl	80054d8 <_printf_common>
 8005134:	3001      	adds	r0, #1
 8005136:	f040 808d 	bne.w	8005254 <_printf_float+0x1d0>
 800513a:	f04f 30ff 	mov.w	r0, #4294967295
 800513e:	b00d      	add	sp, #52	@ 0x34
 8005140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005144:	4642      	mov	r2, r8
 8005146:	464b      	mov	r3, r9
 8005148:	4640      	mov	r0, r8
 800514a:	4649      	mov	r1, r9
 800514c:	f7fb fd0e 	bl	8000b6c <__aeabi_dcmpun>
 8005150:	b140      	cbz	r0, 8005164 <_printf_float+0xe0>
 8005152:	464b      	mov	r3, r9
 8005154:	2b00      	cmp	r3, #0
 8005156:	bfbc      	itt	lt
 8005158:	232d      	movlt	r3, #45	@ 0x2d
 800515a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800515e:	4a7e      	ldr	r2, [pc, #504]	@ (8005358 <_printf_float+0x2d4>)
 8005160:	4b7e      	ldr	r3, [pc, #504]	@ (800535c <_printf_float+0x2d8>)
 8005162:	e7d4      	b.n	800510e <_printf_float+0x8a>
 8005164:	6863      	ldr	r3, [r4, #4]
 8005166:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800516a:	9206      	str	r2, [sp, #24]
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	d13b      	bne.n	80051e8 <_printf_float+0x164>
 8005170:	2306      	movs	r3, #6
 8005172:	6063      	str	r3, [r4, #4]
 8005174:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005178:	2300      	movs	r3, #0
 800517a:	6022      	str	r2, [r4, #0]
 800517c:	9303      	str	r3, [sp, #12]
 800517e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005180:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005184:	ab09      	add	r3, sp, #36	@ 0x24
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	6861      	ldr	r1, [r4, #4]
 800518a:	ec49 8b10 	vmov	d0, r8, r9
 800518e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005192:	4628      	mov	r0, r5
 8005194:	f7ff fed6 	bl	8004f44 <__cvt>
 8005198:	9b06      	ldr	r3, [sp, #24]
 800519a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800519c:	2b47      	cmp	r3, #71	@ 0x47
 800519e:	4680      	mov	r8, r0
 80051a0:	d129      	bne.n	80051f6 <_printf_float+0x172>
 80051a2:	1cc8      	adds	r0, r1, #3
 80051a4:	db02      	blt.n	80051ac <_printf_float+0x128>
 80051a6:	6863      	ldr	r3, [r4, #4]
 80051a8:	4299      	cmp	r1, r3
 80051aa:	dd41      	ble.n	8005230 <_printf_float+0x1ac>
 80051ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80051b0:	fa5f fa8a 	uxtb.w	sl, sl
 80051b4:	3901      	subs	r1, #1
 80051b6:	4652      	mov	r2, sl
 80051b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80051bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80051be:	f7ff ff26 	bl	800500e <__exponent>
 80051c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051c4:	1813      	adds	r3, r2, r0
 80051c6:	2a01      	cmp	r2, #1
 80051c8:	4681      	mov	r9, r0
 80051ca:	6123      	str	r3, [r4, #16]
 80051cc:	dc02      	bgt.n	80051d4 <_printf_float+0x150>
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	07d2      	lsls	r2, r2, #31
 80051d2:	d501      	bpl.n	80051d8 <_printf_float+0x154>
 80051d4:	3301      	adds	r3, #1
 80051d6:	6123      	str	r3, [r4, #16]
 80051d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0a2      	beq.n	8005126 <_printf_float+0xa2>
 80051e0:	232d      	movs	r3, #45	@ 0x2d
 80051e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051e6:	e79e      	b.n	8005126 <_printf_float+0xa2>
 80051e8:	9a06      	ldr	r2, [sp, #24]
 80051ea:	2a47      	cmp	r2, #71	@ 0x47
 80051ec:	d1c2      	bne.n	8005174 <_printf_float+0xf0>
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1c0      	bne.n	8005174 <_printf_float+0xf0>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e7bd      	b.n	8005172 <_printf_float+0xee>
 80051f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051fa:	d9db      	bls.n	80051b4 <_printf_float+0x130>
 80051fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005200:	d118      	bne.n	8005234 <_printf_float+0x1b0>
 8005202:	2900      	cmp	r1, #0
 8005204:	6863      	ldr	r3, [r4, #4]
 8005206:	dd0b      	ble.n	8005220 <_printf_float+0x19c>
 8005208:	6121      	str	r1, [r4, #16]
 800520a:	b913      	cbnz	r3, 8005212 <_printf_float+0x18e>
 800520c:	6822      	ldr	r2, [r4, #0]
 800520e:	07d0      	lsls	r0, r2, #31
 8005210:	d502      	bpl.n	8005218 <_printf_float+0x194>
 8005212:	3301      	adds	r3, #1
 8005214:	440b      	add	r3, r1
 8005216:	6123      	str	r3, [r4, #16]
 8005218:	65a1      	str	r1, [r4, #88]	@ 0x58
 800521a:	f04f 0900 	mov.w	r9, #0
 800521e:	e7db      	b.n	80051d8 <_printf_float+0x154>
 8005220:	b913      	cbnz	r3, 8005228 <_printf_float+0x1a4>
 8005222:	6822      	ldr	r2, [r4, #0]
 8005224:	07d2      	lsls	r2, r2, #31
 8005226:	d501      	bpl.n	800522c <_printf_float+0x1a8>
 8005228:	3302      	adds	r3, #2
 800522a:	e7f4      	b.n	8005216 <_printf_float+0x192>
 800522c:	2301      	movs	r3, #1
 800522e:	e7f2      	b.n	8005216 <_printf_float+0x192>
 8005230:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005236:	4299      	cmp	r1, r3
 8005238:	db05      	blt.n	8005246 <_printf_float+0x1c2>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	6121      	str	r1, [r4, #16]
 800523e:	07d8      	lsls	r0, r3, #31
 8005240:	d5ea      	bpl.n	8005218 <_printf_float+0x194>
 8005242:	1c4b      	adds	r3, r1, #1
 8005244:	e7e7      	b.n	8005216 <_printf_float+0x192>
 8005246:	2900      	cmp	r1, #0
 8005248:	bfd4      	ite	le
 800524a:	f1c1 0202 	rsble	r2, r1, #2
 800524e:	2201      	movgt	r2, #1
 8005250:	4413      	add	r3, r2
 8005252:	e7e0      	b.n	8005216 <_printf_float+0x192>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	055a      	lsls	r2, r3, #21
 8005258:	d407      	bmi.n	800526a <_printf_float+0x1e6>
 800525a:	6923      	ldr	r3, [r4, #16]
 800525c:	4642      	mov	r2, r8
 800525e:	4631      	mov	r1, r6
 8005260:	4628      	mov	r0, r5
 8005262:	47b8      	blx	r7
 8005264:	3001      	adds	r0, #1
 8005266:	d12b      	bne.n	80052c0 <_printf_float+0x23c>
 8005268:	e767      	b.n	800513a <_printf_float+0xb6>
 800526a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800526e:	f240 80dd 	bls.w	800542c <_printf_float+0x3a8>
 8005272:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005276:	2200      	movs	r2, #0
 8005278:	2300      	movs	r3, #0
 800527a:	f7fb fc45 	bl	8000b08 <__aeabi_dcmpeq>
 800527e:	2800      	cmp	r0, #0
 8005280:	d033      	beq.n	80052ea <_printf_float+0x266>
 8005282:	4a37      	ldr	r2, [pc, #220]	@ (8005360 <_printf_float+0x2dc>)
 8005284:	2301      	movs	r3, #1
 8005286:	4631      	mov	r1, r6
 8005288:	4628      	mov	r0, r5
 800528a:	47b8      	blx	r7
 800528c:	3001      	adds	r0, #1
 800528e:	f43f af54 	beq.w	800513a <_printf_float+0xb6>
 8005292:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005296:	4543      	cmp	r3, r8
 8005298:	db02      	blt.n	80052a0 <_printf_float+0x21c>
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	07d8      	lsls	r0, r3, #31
 800529e:	d50f      	bpl.n	80052c0 <_printf_float+0x23c>
 80052a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052a4:	4631      	mov	r1, r6
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b8      	blx	r7
 80052aa:	3001      	adds	r0, #1
 80052ac:	f43f af45 	beq.w	800513a <_printf_float+0xb6>
 80052b0:	f04f 0900 	mov.w	r9, #0
 80052b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80052b8:	f104 0a1a 	add.w	sl, r4, #26
 80052bc:	45c8      	cmp	r8, r9
 80052be:	dc09      	bgt.n	80052d4 <_printf_float+0x250>
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	079b      	lsls	r3, r3, #30
 80052c4:	f100 8103 	bmi.w	80054ce <_printf_float+0x44a>
 80052c8:	68e0      	ldr	r0, [r4, #12]
 80052ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052cc:	4298      	cmp	r0, r3
 80052ce:	bfb8      	it	lt
 80052d0:	4618      	movlt	r0, r3
 80052d2:	e734      	b.n	800513e <_printf_float+0xba>
 80052d4:	2301      	movs	r3, #1
 80052d6:	4652      	mov	r2, sl
 80052d8:	4631      	mov	r1, r6
 80052da:	4628      	mov	r0, r5
 80052dc:	47b8      	blx	r7
 80052de:	3001      	adds	r0, #1
 80052e0:	f43f af2b 	beq.w	800513a <_printf_float+0xb6>
 80052e4:	f109 0901 	add.w	r9, r9, #1
 80052e8:	e7e8      	b.n	80052bc <_printf_float+0x238>
 80052ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	dc39      	bgt.n	8005364 <_printf_float+0x2e0>
 80052f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005360 <_printf_float+0x2dc>)
 80052f2:	2301      	movs	r3, #1
 80052f4:	4631      	mov	r1, r6
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b8      	blx	r7
 80052fa:	3001      	adds	r0, #1
 80052fc:	f43f af1d 	beq.w	800513a <_printf_float+0xb6>
 8005300:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005304:	ea59 0303 	orrs.w	r3, r9, r3
 8005308:	d102      	bne.n	8005310 <_printf_float+0x28c>
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	07d9      	lsls	r1, r3, #31
 800530e:	d5d7      	bpl.n	80052c0 <_printf_float+0x23c>
 8005310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005314:	4631      	mov	r1, r6
 8005316:	4628      	mov	r0, r5
 8005318:	47b8      	blx	r7
 800531a:	3001      	adds	r0, #1
 800531c:	f43f af0d 	beq.w	800513a <_printf_float+0xb6>
 8005320:	f04f 0a00 	mov.w	sl, #0
 8005324:	f104 0b1a 	add.w	fp, r4, #26
 8005328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800532a:	425b      	negs	r3, r3
 800532c:	4553      	cmp	r3, sl
 800532e:	dc01      	bgt.n	8005334 <_printf_float+0x2b0>
 8005330:	464b      	mov	r3, r9
 8005332:	e793      	b.n	800525c <_printf_float+0x1d8>
 8005334:	2301      	movs	r3, #1
 8005336:	465a      	mov	r2, fp
 8005338:	4631      	mov	r1, r6
 800533a:	4628      	mov	r0, r5
 800533c:	47b8      	blx	r7
 800533e:	3001      	adds	r0, #1
 8005340:	f43f aefb 	beq.w	800513a <_printf_float+0xb6>
 8005344:	f10a 0a01 	add.w	sl, sl, #1
 8005348:	e7ee      	b.n	8005328 <_printf_float+0x2a4>
 800534a:	bf00      	nop
 800534c:	7fefffff 	.word	0x7fefffff
 8005350:	08007cac 	.word	0x08007cac
 8005354:	08007ca8 	.word	0x08007ca8
 8005358:	08007cb4 	.word	0x08007cb4
 800535c:	08007cb0 	.word	0x08007cb0
 8005360:	08007cb8 	.word	0x08007cb8
 8005364:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005366:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800536a:	4553      	cmp	r3, sl
 800536c:	bfa8      	it	ge
 800536e:	4653      	movge	r3, sl
 8005370:	2b00      	cmp	r3, #0
 8005372:	4699      	mov	r9, r3
 8005374:	dc36      	bgt.n	80053e4 <_printf_float+0x360>
 8005376:	f04f 0b00 	mov.w	fp, #0
 800537a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800537e:	f104 021a 	add.w	r2, r4, #26
 8005382:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005384:	9306      	str	r3, [sp, #24]
 8005386:	eba3 0309 	sub.w	r3, r3, r9
 800538a:	455b      	cmp	r3, fp
 800538c:	dc31      	bgt.n	80053f2 <_printf_float+0x36e>
 800538e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005390:	459a      	cmp	sl, r3
 8005392:	dc3a      	bgt.n	800540a <_printf_float+0x386>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	07da      	lsls	r2, r3, #31
 8005398:	d437      	bmi.n	800540a <_printf_float+0x386>
 800539a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800539c:	ebaa 0903 	sub.w	r9, sl, r3
 80053a0:	9b06      	ldr	r3, [sp, #24]
 80053a2:	ebaa 0303 	sub.w	r3, sl, r3
 80053a6:	4599      	cmp	r9, r3
 80053a8:	bfa8      	it	ge
 80053aa:	4699      	movge	r9, r3
 80053ac:	f1b9 0f00 	cmp.w	r9, #0
 80053b0:	dc33      	bgt.n	800541a <_printf_float+0x396>
 80053b2:	f04f 0800 	mov.w	r8, #0
 80053b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053ba:	f104 0b1a 	add.w	fp, r4, #26
 80053be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053c0:	ebaa 0303 	sub.w	r3, sl, r3
 80053c4:	eba3 0309 	sub.w	r3, r3, r9
 80053c8:	4543      	cmp	r3, r8
 80053ca:	f77f af79 	ble.w	80052c0 <_printf_float+0x23c>
 80053ce:	2301      	movs	r3, #1
 80053d0:	465a      	mov	r2, fp
 80053d2:	4631      	mov	r1, r6
 80053d4:	4628      	mov	r0, r5
 80053d6:	47b8      	blx	r7
 80053d8:	3001      	adds	r0, #1
 80053da:	f43f aeae 	beq.w	800513a <_printf_float+0xb6>
 80053de:	f108 0801 	add.w	r8, r8, #1
 80053e2:	e7ec      	b.n	80053be <_printf_float+0x33a>
 80053e4:	4642      	mov	r2, r8
 80053e6:	4631      	mov	r1, r6
 80053e8:	4628      	mov	r0, r5
 80053ea:	47b8      	blx	r7
 80053ec:	3001      	adds	r0, #1
 80053ee:	d1c2      	bne.n	8005376 <_printf_float+0x2f2>
 80053f0:	e6a3      	b.n	800513a <_printf_float+0xb6>
 80053f2:	2301      	movs	r3, #1
 80053f4:	4631      	mov	r1, r6
 80053f6:	4628      	mov	r0, r5
 80053f8:	9206      	str	r2, [sp, #24]
 80053fa:	47b8      	blx	r7
 80053fc:	3001      	adds	r0, #1
 80053fe:	f43f ae9c 	beq.w	800513a <_printf_float+0xb6>
 8005402:	9a06      	ldr	r2, [sp, #24]
 8005404:	f10b 0b01 	add.w	fp, fp, #1
 8005408:	e7bb      	b.n	8005382 <_printf_float+0x2fe>
 800540a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800540e:	4631      	mov	r1, r6
 8005410:	4628      	mov	r0, r5
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	d1c0      	bne.n	800539a <_printf_float+0x316>
 8005418:	e68f      	b.n	800513a <_printf_float+0xb6>
 800541a:	9a06      	ldr	r2, [sp, #24]
 800541c:	464b      	mov	r3, r9
 800541e:	4442      	add	r2, r8
 8005420:	4631      	mov	r1, r6
 8005422:	4628      	mov	r0, r5
 8005424:	47b8      	blx	r7
 8005426:	3001      	adds	r0, #1
 8005428:	d1c3      	bne.n	80053b2 <_printf_float+0x32e>
 800542a:	e686      	b.n	800513a <_printf_float+0xb6>
 800542c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005430:	f1ba 0f01 	cmp.w	sl, #1
 8005434:	dc01      	bgt.n	800543a <_printf_float+0x3b6>
 8005436:	07db      	lsls	r3, r3, #31
 8005438:	d536      	bpl.n	80054a8 <_printf_float+0x424>
 800543a:	2301      	movs	r3, #1
 800543c:	4642      	mov	r2, r8
 800543e:	4631      	mov	r1, r6
 8005440:	4628      	mov	r0, r5
 8005442:	47b8      	blx	r7
 8005444:	3001      	adds	r0, #1
 8005446:	f43f ae78 	beq.w	800513a <_printf_float+0xb6>
 800544a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800544e:	4631      	mov	r1, r6
 8005450:	4628      	mov	r0, r5
 8005452:	47b8      	blx	r7
 8005454:	3001      	adds	r0, #1
 8005456:	f43f ae70 	beq.w	800513a <_printf_float+0xb6>
 800545a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800545e:	2200      	movs	r2, #0
 8005460:	2300      	movs	r3, #0
 8005462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005466:	f7fb fb4f 	bl	8000b08 <__aeabi_dcmpeq>
 800546a:	b9c0      	cbnz	r0, 800549e <_printf_float+0x41a>
 800546c:	4653      	mov	r3, sl
 800546e:	f108 0201 	add.w	r2, r8, #1
 8005472:	4631      	mov	r1, r6
 8005474:	4628      	mov	r0, r5
 8005476:	47b8      	blx	r7
 8005478:	3001      	adds	r0, #1
 800547a:	d10c      	bne.n	8005496 <_printf_float+0x412>
 800547c:	e65d      	b.n	800513a <_printf_float+0xb6>
 800547e:	2301      	movs	r3, #1
 8005480:	465a      	mov	r2, fp
 8005482:	4631      	mov	r1, r6
 8005484:	4628      	mov	r0, r5
 8005486:	47b8      	blx	r7
 8005488:	3001      	adds	r0, #1
 800548a:	f43f ae56 	beq.w	800513a <_printf_float+0xb6>
 800548e:	f108 0801 	add.w	r8, r8, #1
 8005492:	45d0      	cmp	r8, sl
 8005494:	dbf3      	blt.n	800547e <_printf_float+0x3fa>
 8005496:	464b      	mov	r3, r9
 8005498:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800549c:	e6df      	b.n	800525e <_printf_float+0x1da>
 800549e:	f04f 0800 	mov.w	r8, #0
 80054a2:	f104 0b1a 	add.w	fp, r4, #26
 80054a6:	e7f4      	b.n	8005492 <_printf_float+0x40e>
 80054a8:	2301      	movs	r3, #1
 80054aa:	4642      	mov	r2, r8
 80054ac:	e7e1      	b.n	8005472 <_printf_float+0x3ee>
 80054ae:	2301      	movs	r3, #1
 80054b0:	464a      	mov	r2, r9
 80054b2:	4631      	mov	r1, r6
 80054b4:	4628      	mov	r0, r5
 80054b6:	47b8      	blx	r7
 80054b8:	3001      	adds	r0, #1
 80054ba:	f43f ae3e 	beq.w	800513a <_printf_float+0xb6>
 80054be:	f108 0801 	add.w	r8, r8, #1
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80054c6:	1a5b      	subs	r3, r3, r1
 80054c8:	4543      	cmp	r3, r8
 80054ca:	dcf0      	bgt.n	80054ae <_printf_float+0x42a>
 80054cc:	e6fc      	b.n	80052c8 <_printf_float+0x244>
 80054ce:	f04f 0800 	mov.w	r8, #0
 80054d2:	f104 0919 	add.w	r9, r4, #25
 80054d6:	e7f4      	b.n	80054c2 <_printf_float+0x43e>

080054d8 <_printf_common>:
 80054d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	4616      	mov	r6, r2
 80054de:	4698      	mov	r8, r3
 80054e0:	688a      	ldr	r2, [r1, #8]
 80054e2:	690b      	ldr	r3, [r1, #16]
 80054e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054e8:	4293      	cmp	r3, r2
 80054ea:	bfb8      	it	lt
 80054ec:	4613      	movlt	r3, r2
 80054ee:	6033      	str	r3, [r6, #0]
 80054f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054f4:	4607      	mov	r7, r0
 80054f6:	460c      	mov	r4, r1
 80054f8:	b10a      	cbz	r2, 80054fe <_printf_common+0x26>
 80054fa:	3301      	adds	r3, #1
 80054fc:	6033      	str	r3, [r6, #0]
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	0699      	lsls	r1, r3, #26
 8005502:	bf42      	ittt	mi
 8005504:	6833      	ldrmi	r3, [r6, #0]
 8005506:	3302      	addmi	r3, #2
 8005508:	6033      	strmi	r3, [r6, #0]
 800550a:	6825      	ldr	r5, [r4, #0]
 800550c:	f015 0506 	ands.w	r5, r5, #6
 8005510:	d106      	bne.n	8005520 <_printf_common+0x48>
 8005512:	f104 0a19 	add.w	sl, r4, #25
 8005516:	68e3      	ldr	r3, [r4, #12]
 8005518:	6832      	ldr	r2, [r6, #0]
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	42ab      	cmp	r3, r5
 800551e:	dc26      	bgt.n	800556e <_printf_common+0x96>
 8005520:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005524:	6822      	ldr	r2, [r4, #0]
 8005526:	3b00      	subs	r3, #0
 8005528:	bf18      	it	ne
 800552a:	2301      	movne	r3, #1
 800552c:	0692      	lsls	r2, r2, #26
 800552e:	d42b      	bmi.n	8005588 <_printf_common+0xb0>
 8005530:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005534:	4641      	mov	r1, r8
 8005536:	4638      	mov	r0, r7
 8005538:	47c8      	blx	r9
 800553a:	3001      	adds	r0, #1
 800553c:	d01e      	beq.n	800557c <_printf_common+0xa4>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	6922      	ldr	r2, [r4, #16]
 8005542:	f003 0306 	and.w	r3, r3, #6
 8005546:	2b04      	cmp	r3, #4
 8005548:	bf02      	ittt	eq
 800554a:	68e5      	ldreq	r5, [r4, #12]
 800554c:	6833      	ldreq	r3, [r6, #0]
 800554e:	1aed      	subeq	r5, r5, r3
 8005550:	68a3      	ldr	r3, [r4, #8]
 8005552:	bf0c      	ite	eq
 8005554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005558:	2500      	movne	r5, #0
 800555a:	4293      	cmp	r3, r2
 800555c:	bfc4      	itt	gt
 800555e:	1a9b      	subgt	r3, r3, r2
 8005560:	18ed      	addgt	r5, r5, r3
 8005562:	2600      	movs	r6, #0
 8005564:	341a      	adds	r4, #26
 8005566:	42b5      	cmp	r5, r6
 8005568:	d11a      	bne.n	80055a0 <_printf_common+0xc8>
 800556a:	2000      	movs	r0, #0
 800556c:	e008      	b.n	8005580 <_printf_common+0xa8>
 800556e:	2301      	movs	r3, #1
 8005570:	4652      	mov	r2, sl
 8005572:	4641      	mov	r1, r8
 8005574:	4638      	mov	r0, r7
 8005576:	47c8      	blx	r9
 8005578:	3001      	adds	r0, #1
 800557a:	d103      	bne.n	8005584 <_printf_common+0xac>
 800557c:	f04f 30ff 	mov.w	r0, #4294967295
 8005580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005584:	3501      	adds	r5, #1
 8005586:	e7c6      	b.n	8005516 <_printf_common+0x3e>
 8005588:	18e1      	adds	r1, r4, r3
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	2030      	movs	r0, #48	@ 0x30
 800558e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005592:	4422      	add	r2, r4
 8005594:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005598:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800559c:	3302      	adds	r3, #2
 800559e:	e7c7      	b.n	8005530 <_printf_common+0x58>
 80055a0:	2301      	movs	r3, #1
 80055a2:	4622      	mov	r2, r4
 80055a4:	4641      	mov	r1, r8
 80055a6:	4638      	mov	r0, r7
 80055a8:	47c8      	blx	r9
 80055aa:	3001      	adds	r0, #1
 80055ac:	d0e6      	beq.n	800557c <_printf_common+0xa4>
 80055ae:	3601      	adds	r6, #1
 80055b0:	e7d9      	b.n	8005566 <_printf_common+0x8e>
	...

080055b4 <_printf_i>:
 80055b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055b8:	7e0f      	ldrb	r7, [r1, #24]
 80055ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055bc:	2f78      	cmp	r7, #120	@ 0x78
 80055be:	4691      	mov	r9, r2
 80055c0:	4680      	mov	r8, r0
 80055c2:	460c      	mov	r4, r1
 80055c4:	469a      	mov	sl, r3
 80055c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055ca:	d807      	bhi.n	80055dc <_printf_i+0x28>
 80055cc:	2f62      	cmp	r7, #98	@ 0x62
 80055ce:	d80a      	bhi.n	80055e6 <_printf_i+0x32>
 80055d0:	2f00      	cmp	r7, #0
 80055d2:	f000 80d1 	beq.w	8005778 <_printf_i+0x1c4>
 80055d6:	2f58      	cmp	r7, #88	@ 0x58
 80055d8:	f000 80b8 	beq.w	800574c <_printf_i+0x198>
 80055dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055e4:	e03a      	b.n	800565c <_printf_i+0xa8>
 80055e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055ea:	2b15      	cmp	r3, #21
 80055ec:	d8f6      	bhi.n	80055dc <_printf_i+0x28>
 80055ee:	a101      	add	r1, pc, #4	@ (adr r1, 80055f4 <_printf_i+0x40>)
 80055f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055f4:	0800564d 	.word	0x0800564d
 80055f8:	08005661 	.word	0x08005661
 80055fc:	080055dd 	.word	0x080055dd
 8005600:	080055dd 	.word	0x080055dd
 8005604:	080055dd 	.word	0x080055dd
 8005608:	080055dd 	.word	0x080055dd
 800560c:	08005661 	.word	0x08005661
 8005610:	080055dd 	.word	0x080055dd
 8005614:	080055dd 	.word	0x080055dd
 8005618:	080055dd 	.word	0x080055dd
 800561c:	080055dd 	.word	0x080055dd
 8005620:	0800575f 	.word	0x0800575f
 8005624:	0800568b 	.word	0x0800568b
 8005628:	08005719 	.word	0x08005719
 800562c:	080055dd 	.word	0x080055dd
 8005630:	080055dd 	.word	0x080055dd
 8005634:	08005781 	.word	0x08005781
 8005638:	080055dd 	.word	0x080055dd
 800563c:	0800568b 	.word	0x0800568b
 8005640:	080055dd 	.word	0x080055dd
 8005644:	080055dd 	.word	0x080055dd
 8005648:	08005721 	.word	0x08005721
 800564c:	6833      	ldr	r3, [r6, #0]
 800564e:	1d1a      	adds	r2, r3, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6032      	str	r2, [r6, #0]
 8005654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005658:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800565c:	2301      	movs	r3, #1
 800565e:	e09c      	b.n	800579a <_printf_i+0x1e6>
 8005660:	6833      	ldr	r3, [r6, #0]
 8005662:	6820      	ldr	r0, [r4, #0]
 8005664:	1d19      	adds	r1, r3, #4
 8005666:	6031      	str	r1, [r6, #0]
 8005668:	0606      	lsls	r6, r0, #24
 800566a:	d501      	bpl.n	8005670 <_printf_i+0xbc>
 800566c:	681d      	ldr	r5, [r3, #0]
 800566e:	e003      	b.n	8005678 <_printf_i+0xc4>
 8005670:	0645      	lsls	r5, r0, #25
 8005672:	d5fb      	bpl.n	800566c <_printf_i+0xb8>
 8005674:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005678:	2d00      	cmp	r5, #0
 800567a:	da03      	bge.n	8005684 <_printf_i+0xd0>
 800567c:	232d      	movs	r3, #45	@ 0x2d
 800567e:	426d      	negs	r5, r5
 8005680:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005684:	4858      	ldr	r0, [pc, #352]	@ (80057e8 <_printf_i+0x234>)
 8005686:	230a      	movs	r3, #10
 8005688:	e011      	b.n	80056ae <_printf_i+0xfa>
 800568a:	6821      	ldr	r1, [r4, #0]
 800568c:	6833      	ldr	r3, [r6, #0]
 800568e:	0608      	lsls	r0, r1, #24
 8005690:	f853 5b04 	ldr.w	r5, [r3], #4
 8005694:	d402      	bmi.n	800569c <_printf_i+0xe8>
 8005696:	0649      	lsls	r1, r1, #25
 8005698:	bf48      	it	mi
 800569a:	b2ad      	uxthmi	r5, r5
 800569c:	2f6f      	cmp	r7, #111	@ 0x6f
 800569e:	4852      	ldr	r0, [pc, #328]	@ (80057e8 <_printf_i+0x234>)
 80056a0:	6033      	str	r3, [r6, #0]
 80056a2:	bf14      	ite	ne
 80056a4:	230a      	movne	r3, #10
 80056a6:	2308      	moveq	r3, #8
 80056a8:	2100      	movs	r1, #0
 80056aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056ae:	6866      	ldr	r6, [r4, #4]
 80056b0:	60a6      	str	r6, [r4, #8]
 80056b2:	2e00      	cmp	r6, #0
 80056b4:	db05      	blt.n	80056c2 <_printf_i+0x10e>
 80056b6:	6821      	ldr	r1, [r4, #0]
 80056b8:	432e      	orrs	r6, r5
 80056ba:	f021 0104 	bic.w	r1, r1, #4
 80056be:	6021      	str	r1, [r4, #0]
 80056c0:	d04b      	beq.n	800575a <_printf_i+0x1a6>
 80056c2:	4616      	mov	r6, r2
 80056c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80056c8:	fb03 5711 	mls	r7, r3, r1, r5
 80056cc:	5dc7      	ldrb	r7, [r0, r7]
 80056ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056d2:	462f      	mov	r7, r5
 80056d4:	42bb      	cmp	r3, r7
 80056d6:	460d      	mov	r5, r1
 80056d8:	d9f4      	bls.n	80056c4 <_printf_i+0x110>
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d10b      	bne.n	80056f6 <_printf_i+0x142>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	07df      	lsls	r7, r3, #31
 80056e2:	d508      	bpl.n	80056f6 <_printf_i+0x142>
 80056e4:	6923      	ldr	r3, [r4, #16]
 80056e6:	6861      	ldr	r1, [r4, #4]
 80056e8:	4299      	cmp	r1, r3
 80056ea:	bfde      	ittt	le
 80056ec:	2330      	movle	r3, #48	@ 0x30
 80056ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056f6:	1b92      	subs	r2, r2, r6
 80056f8:	6122      	str	r2, [r4, #16]
 80056fa:	f8cd a000 	str.w	sl, [sp]
 80056fe:	464b      	mov	r3, r9
 8005700:	aa03      	add	r2, sp, #12
 8005702:	4621      	mov	r1, r4
 8005704:	4640      	mov	r0, r8
 8005706:	f7ff fee7 	bl	80054d8 <_printf_common>
 800570a:	3001      	adds	r0, #1
 800570c:	d14a      	bne.n	80057a4 <_printf_i+0x1f0>
 800570e:	f04f 30ff 	mov.w	r0, #4294967295
 8005712:	b004      	add	sp, #16
 8005714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	f043 0320 	orr.w	r3, r3, #32
 800571e:	6023      	str	r3, [r4, #0]
 8005720:	4832      	ldr	r0, [pc, #200]	@ (80057ec <_printf_i+0x238>)
 8005722:	2778      	movs	r7, #120	@ 0x78
 8005724:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	6831      	ldr	r1, [r6, #0]
 800572c:	061f      	lsls	r7, r3, #24
 800572e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005732:	d402      	bmi.n	800573a <_printf_i+0x186>
 8005734:	065f      	lsls	r7, r3, #25
 8005736:	bf48      	it	mi
 8005738:	b2ad      	uxthmi	r5, r5
 800573a:	6031      	str	r1, [r6, #0]
 800573c:	07d9      	lsls	r1, r3, #31
 800573e:	bf44      	itt	mi
 8005740:	f043 0320 	orrmi.w	r3, r3, #32
 8005744:	6023      	strmi	r3, [r4, #0]
 8005746:	b11d      	cbz	r5, 8005750 <_printf_i+0x19c>
 8005748:	2310      	movs	r3, #16
 800574a:	e7ad      	b.n	80056a8 <_printf_i+0xf4>
 800574c:	4826      	ldr	r0, [pc, #152]	@ (80057e8 <_printf_i+0x234>)
 800574e:	e7e9      	b.n	8005724 <_printf_i+0x170>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	f023 0320 	bic.w	r3, r3, #32
 8005756:	6023      	str	r3, [r4, #0]
 8005758:	e7f6      	b.n	8005748 <_printf_i+0x194>
 800575a:	4616      	mov	r6, r2
 800575c:	e7bd      	b.n	80056da <_printf_i+0x126>
 800575e:	6833      	ldr	r3, [r6, #0]
 8005760:	6825      	ldr	r5, [r4, #0]
 8005762:	6961      	ldr	r1, [r4, #20]
 8005764:	1d18      	adds	r0, r3, #4
 8005766:	6030      	str	r0, [r6, #0]
 8005768:	062e      	lsls	r6, r5, #24
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	d501      	bpl.n	8005772 <_printf_i+0x1be>
 800576e:	6019      	str	r1, [r3, #0]
 8005770:	e002      	b.n	8005778 <_printf_i+0x1c4>
 8005772:	0668      	lsls	r0, r5, #25
 8005774:	d5fb      	bpl.n	800576e <_printf_i+0x1ba>
 8005776:	8019      	strh	r1, [r3, #0]
 8005778:	2300      	movs	r3, #0
 800577a:	6123      	str	r3, [r4, #16]
 800577c:	4616      	mov	r6, r2
 800577e:	e7bc      	b.n	80056fa <_printf_i+0x146>
 8005780:	6833      	ldr	r3, [r6, #0]
 8005782:	1d1a      	adds	r2, r3, #4
 8005784:	6032      	str	r2, [r6, #0]
 8005786:	681e      	ldr	r6, [r3, #0]
 8005788:	6862      	ldr	r2, [r4, #4]
 800578a:	2100      	movs	r1, #0
 800578c:	4630      	mov	r0, r6
 800578e:	f7fa fd3f 	bl	8000210 <memchr>
 8005792:	b108      	cbz	r0, 8005798 <_printf_i+0x1e4>
 8005794:	1b80      	subs	r0, r0, r6
 8005796:	6060      	str	r0, [r4, #4]
 8005798:	6863      	ldr	r3, [r4, #4]
 800579a:	6123      	str	r3, [r4, #16]
 800579c:	2300      	movs	r3, #0
 800579e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057a2:	e7aa      	b.n	80056fa <_printf_i+0x146>
 80057a4:	6923      	ldr	r3, [r4, #16]
 80057a6:	4632      	mov	r2, r6
 80057a8:	4649      	mov	r1, r9
 80057aa:	4640      	mov	r0, r8
 80057ac:	47d0      	blx	sl
 80057ae:	3001      	adds	r0, #1
 80057b0:	d0ad      	beq.n	800570e <_printf_i+0x15a>
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	079b      	lsls	r3, r3, #30
 80057b6:	d413      	bmi.n	80057e0 <_printf_i+0x22c>
 80057b8:	68e0      	ldr	r0, [r4, #12]
 80057ba:	9b03      	ldr	r3, [sp, #12]
 80057bc:	4298      	cmp	r0, r3
 80057be:	bfb8      	it	lt
 80057c0:	4618      	movlt	r0, r3
 80057c2:	e7a6      	b.n	8005712 <_printf_i+0x15e>
 80057c4:	2301      	movs	r3, #1
 80057c6:	4632      	mov	r2, r6
 80057c8:	4649      	mov	r1, r9
 80057ca:	4640      	mov	r0, r8
 80057cc:	47d0      	blx	sl
 80057ce:	3001      	adds	r0, #1
 80057d0:	d09d      	beq.n	800570e <_printf_i+0x15a>
 80057d2:	3501      	adds	r5, #1
 80057d4:	68e3      	ldr	r3, [r4, #12]
 80057d6:	9903      	ldr	r1, [sp, #12]
 80057d8:	1a5b      	subs	r3, r3, r1
 80057da:	42ab      	cmp	r3, r5
 80057dc:	dcf2      	bgt.n	80057c4 <_printf_i+0x210>
 80057de:	e7eb      	b.n	80057b8 <_printf_i+0x204>
 80057e0:	2500      	movs	r5, #0
 80057e2:	f104 0619 	add.w	r6, r4, #25
 80057e6:	e7f5      	b.n	80057d4 <_printf_i+0x220>
 80057e8:	08007cba 	.word	0x08007cba
 80057ec:	08007ccb 	.word	0x08007ccb

080057f0 <std>:
 80057f0:	2300      	movs	r3, #0
 80057f2:	b510      	push	{r4, lr}
 80057f4:	4604      	mov	r4, r0
 80057f6:	e9c0 3300 	strd	r3, r3, [r0]
 80057fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057fe:	6083      	str	r3, [r0, #8]
 8005800:	8181      	strh	r1, [r0, #12]
 8005802:	6643      	str	r3, [r0, #100]	@ 0x64
 8005804:	81c2      	strh	r2, [r0, #14]
 8005806:	6183      	str	r3, [r0, #24]
 8005808:	4619      	mov	r1, r3
 800580a:	2208      	movs	r2, #8
 800580c:	305c      	adds	r0, #92	@ 0x5c
 800580e:	f000 f906 	bl	8005a1e <memset>
 8005812:	4b0d      	ldr	r3, [pc, #52]	@ (8005848 <std+0x58>)
 8005814:	6263      	str	r3, [r4, #36]	@ 0x24
 8005816:	4b0d      	ldr	r3, [pc, #52]	@ (800584c <std+0x5c>)
 8005818:	62a3      	str	r3, [r4, #40]	@ 0x28
 800581a:	4b0d      	ldr	r3, [pc, #52]	@ (8005850 <std+0x60>)
 800581c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800581e:	4b0d      	ldr	r3, [pc, #52]	@ (8005854 <std+0x64>)
 8005820:	6323      	str	r3, [r4, #48]	@ 0x30
 8005822:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <std+0x68>)
 8005824:	6224      	str	r4, [r4, #32]
 8005826:	429c      	cmp	r4, r3
 8005828:	d006      	beq.n	8005838 <std+0x48>
 800582a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800582e:	4294      	cmp	r4, r2
 8005830:	d002      	beq.n	8005838 <std+0x48>
 8005832:	33d0      	adds	r3, #208	@ 0xd0
 8005834:	429c      	cmp	r4, r3
 8005836:	d105      	bne.n	8005844 <std+0x54>
 8005838:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800583c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005840:	f000 b96a 	b.w	8005b18 <__retarget_lock_init_recursive>
 8005844:	bd10      	pop	{r4, pc}
 8005846:	bf00      	nop
 8005848:	08005999 	.word	0x08005999
 800584c:	080059bb 	.word	0x080059bb
 8005850:	080059f3 	.word	0x080059f3
 8005854:	08005a17 	.word	0x08005a17
 8005858:	20000310 	.word	0x20000310

0800585c <stdio_exit_handler>:
 800585c:	4a02      	ldr	r2, [pc, #8]	@ (8005868 <stdio_exit_handler+0xc>)
 800585e:	4903      	ldr	r1, [pc, #12]	@ (800586c <stdio_exit_handler+0x10>)
 8005860:	4803      	ldr	r0, [pc, #12]	@ (8005870 <stdio_exit_handler+0x14>)
 8005862:	f000 b869 	b.w	8005938 <_fwalk_sglue>
 8005866:	bf00      	nop
 8005868:	20000010 	.word	0x20000010
 800586c:	08007451 	.word	0x08007451
 8005870:	20000020 	.word	0x20000020

08005874 <cleanup_stdio>:
 8005874:	6841      	ldr	r1, [r0, #4]
 8005876:	4b0c      	ldr	r3, [pc, #48]	@ (80058a8 <cleanup_stdio+0x34>)
 8005878:	4299      	cmp	r1, r3
 800587a:	b510      	push	{r4, lr}
 800587c:	4604      	mov	r4, r0
 800587e:	d001      	beq.n	8005884 <cleanup_stdio+0x10>
 8005880:	f001 fde6 	bl	8007450 <_fflush_r>
 8005884:	68a1      	ldr	r1, [r4, #8]
 8005886:	4b09      	ldr	r3, [pc, #36]	@ (80058ac <cleanup_stdio+0x38>)
 8005888:	4299      	cmp	r1, r3
 800588a:	d002      	beq.n	8005892 <cleanup_stdio+0x1e>
 800588c:	4620      	mov	r0, r4
 800588e:	f001 fddf 	bl	8007450 <_fflush_r>
 8005892:	68e1      	ldr	r1, [r4, #12]
 8005894:	4b06      	ldr	r3, [pc, #24]	@ (80058b0 <cleanup_stdio+0x3c>)
 8005896:	4299      	cmp	r1, r3
 8005898:	d004      	beq.n	80058a4 <cleanup_stdio+0x30>
 800589a:	4620      	mov	r0, r4
 800589c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a0:	f001 bdd6 	b.w	8007450 <_fflush_r>
 80058a4:	bd10      	pop	{r4, pc}
 80058a6:	bf00      	nop
 80058a8:	20000310 	.word	0x20000310
 80058ac:	20000378 	.word	0x20000378
 80058b0:	200003e0 	.word	0x200003e0

080058b4 <global_stdio_init.part.0>:
 80058b4:	b510      	push	{r4, lr}
 80058b6:	4b0b      	ldr	r3, [pc, #44]	@ (80058e4 <global_stdio_init.part.0+0x30>)
 80058b8:	4c0b      	ldr	r4, [pc, #44]	@ (80058e8 <global_stdio_init.part.0+0x34>)
 80058ba:	4a0c      	ldr	r2, [pc, #48]	@ (80058ec <global_stdio_init.part.0+0x38>)
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	4620      	mov	r0, r4
 80058c0:	2200      	movs	r2, #0
 80058c2:	2104      	movs	r1, #4
 80058c4:	f7ff ff94 	bl	80057f0 <std>
 80058c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058cc:	2201      	movs	r2, #1
 80058ce:	2109      	movs	r1, #9
 80058d0:	f7ff ff8e 	bl	80057f0 <std>
 80058d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058d8:	2202      	movs	r2, #2
 80058da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058de:	2112      	movs	r1, #18
 80058e0:	f7ff bf86 	b.w	80057f0 <std>
 80058e4:	20000448 	.word	0x20000448
 80058e8:	20000310 	.word	0x20000310
 80058ec:	0800585d 	.word	0x0800585d

080058f0 <__sfp_lock_acquire>:
 80058f0:	4801      	ldr	r0, [pc, #4]	@ (80058f8 <__sfp_lock_acquire+0x8>)
 80058f2:	f000 b912 	b.w	8005b1a <__retarget_lock_acquire_recursive>
 80058f6:	bf00      	nop
 80058f8:	20000451 	.word	0x20000451

080058fc <__sfp_lock_release>:
 80058fc:	4801      	ldr	r0, [pc, #4]	@ (8005904 <__sfp_lock_release+0x8>)
 80058fe:	f000 b90d 	b.w	8005b1c <__retarget_lock_release_recursive>
 8005902:	bf00      	nop
 8005904:	20000451 	.word	0x20000451

08005908 <__sinit>:
 8005908:	b510      	push	{r4, lr}
 800590a:	4604      	mov	r4, r0
 800590c:	f7ff fff0 	bl	80058f0 <__sfp_lock_acquire>
 8005910:	6a23      	ldr	r3, [r4, #32]
 8005912:	b11b      	cbz	r3, 800591c <__sinit+0x14>
 8005914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005918:	f7ff bff0 	b.w	80058fc <__sfp_lock_release>
 800591c:	4b04      	ldr	r3, [pc, #16]	@ (8005930 <__sinit+0x28>)
 800591e:	6223      	str	r3, [r4, #32]
 8005920:	4b04      	ldr	r3, [pc, #16]	@ (8005934 <__sinit+0x2c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1f5      	bne.n	8005914 <__sinit+0xc>
 8005928:	f7ff ffc4 	bl	80058b4 <global_stdio_init.part.0>
 800592c:	e7f2      	b.n	8005914 <__sinit+0xc>
 800592e:	bf00      	nop
 8005930:	08005875 	.word	0x08005875
 8005934:	20000448 	.word	0x20000448

08005938 <_fwalk_sglue>:
 8005938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800593c:	4607      	mov	r7, r0
 800593e:	4688      	mov	r8, r1
 8005940:	4614      	mov	r4, r2
 8005942:	2600      	movs	r6, #0
 8005944:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005948:	f1b9 0901 	subs.w	r9, r9, #1
 800594c:	d505      	bpl.n	800595a <_fwalk_sglue+0x22>
 800594e:	6824      	ldr	r4, [r4, #0]
 8005950:	2c00      	cmp	r4, #0
 8005952:	d1f7      	bne.n	8005944 <_fwalk_sglue+0xc>
 8005954:	4630      	mov	r0, r6
 8005956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800595a:	89ab      	ldrh	r3, [r5, #12]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d907      	bls.n	8005970 <_fwalk_sglue+0x38>
 8005960:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005964:	3301      	adds	r3, #1
 8005966:	d003      	beq.n	8005970 <_fwalk_sglue+0x38>
 8005968:	4629      	mov	r1, r5
 800596a:	4638      	mov	r0, r7
 800596c:	47c0      	blx	r8
 800596e:	4306      	orrs	r6, r0
 8005970:	3568      	adds	r5, #104	@ 0x68
 8005972:	e7e9      	b.n	8005948 <_fwalk_sglue+0x10>

08005974 <iprintf>:
 8005974:	b40f      	push	{r0, r1, r2, r3}
 8005976:	b507      	push	{r0, r1, r2, lr}
 8005978:	4906      	ldr	r1, [pc, #24]	@ (8005994 <iprintf+0x20>)
 800597a:	ab04      	add	r3, sp, #16
 800597c:	6808      	ldr	r0, [r1, #0]
 800597e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005982:	6881      	ldr	r1, [r0, #8]
 8005984:	9301      	str	r3, [sp, #4]
 8005986:	f001 fbc7 	bl	8007118 <_vfiprintf_r>
 800598a:	b003      	add	sp, #12
 800598c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005990:	b004      	add	sp, #16
 8005992:	4770      	bx	lr
 8005994:	2000001c 	.word	0x2000001c

08005998 <__sread>:
 8005998:	b510      	push	{r4, lr}
 800599a:	460c      	mov	r4, r1
 800599c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a0:	f000 f86c 	bl	8005a7c <_read_r>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	bfab      	itete	ge
 80059a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059aa:	89a3      	ldrhlt	r3, [r4, #12]
 80059ac:	181b      	addge	r3, r3, r0
 80059ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059b2:	bfac      	ite	ge
 80059b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059b6:	81a3      	strhlt	r3, [r4, #12]
 80059b8:	bd10      	pop	{r4, pc}

080059ba <__swrite>:
 80059ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059be:	461f      	mov	r7, r3
 80059c0:	898b      	ldrh	r3, [r1, #12]
 80059c2:	05db      	lsls	r3, r3, #23
 80059c4:	4605      	mov	r5, r0
 80059c6:	460c      	mov	r4, r1
 80059c8:	4616      	mov	r6, r2
 80059ca:	d505      	bpl.n	80059d8 <__swrite+0x1e>
 80059cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d0:	2302      	movs	r3, #2
 80059d2:	2200      	movs	r2, #0
 80059d4:	f000 f840 	bl	8005a58 <_lseek_r>
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059e2:	81a3      	strh	r3, [r4, #12]
 80059e4:	4632      	mov	r2, r6
 80059e6:	463b      	mov	r3, r7
 80059e8:	4628      	mov	r0, r5
 80059ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059ee:	f000 b857 	b.w	8005aa0 <_write_r>

080059f2 <__sseek>:
 80059f2:	b510      	push	{r4, lr}
 80059f4:	460c      	mov	r4, r1
 80059f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059fa:	f000 f82d 	bl	8005a58 <_lseek_r>
 80059fe:	1c43      	adds	r3, r0, #1
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	bf15      	itete	ne
 8005a04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a0e:	81a3      	strheq	r3, [r4, #12]
 8005a10:	bf18      	it	ne
 8005a12:	81a3      	strhne	r3, [r4, #12]
 8005a14:	bd10      	pop	{r4, pc}

08005a16 <__sclose>:
 8005a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1a:	f000 b80d 	b.w	8005a38 <_close_r>

08005a1e <memset>:
 8005a1e:	4402      	add	r2, r0
 8005a20:	4603      	mov	r3, r0
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d100      	bne.n	8005a28 <memset+0xa>
 8005a26:	4770      	bx	lr
 8005a28:	f803 1b01 	strb.w	r1, [r3], #1
 8005a2c:	e7f9      	b.n	8005a22 <memset+0x4>
	...

08005a30 <_localeconv_r>:
 8005a30:	4800      	ldr	r0, [pc, #0]	@ (8005a34 <_localeconv_r+0x4>)
 8005a32:	4770      	bx	lr
 8005a34:	2000015c 	.word	0x2000015c

08005a38 <_close_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4d06      	ldr	r5, [pc, #24]	@ (8005a54 <_close_r+0x1c>)
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	4604      	mov	r4, r0
 8005a40:	4608      	mov	r0, r1
 8005a42:	602b      	str	r3, [r5, #0]
 8005a44:	f7fb fd0f 	bl	8001466 <_close>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d102      	bne.n	8005a52 <_close_r+0x1a>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	b103      	cbz	r3, 8005a52 <_close_r+0x1a>
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	2000044c 	.word	0x2000044c

08005a58 <_lseek_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4d07      	ldr	r5, [pc, #28]	@ (8005a78 <_lseek_r+0x20>)
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	4608      	mov	r0, r1
 8005a60:	4611      	mov	r1, r2
 8005a62:	2200      	movs	r2, #0
 8005a64:	602a      	str	r2, [r5, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f7fb fd24 	bl	80014b4 <_lseek>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d102      	bne.n	8005a76 <_lseek_r+0x1e>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	b103      	cbz	r3, 8005a76 <_lseek_r+0x1e>
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	2000044c 	.word	0x2000044c

08005a7c <_read_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4d07      	ldr	r5, [pc, #28]	@ (8005a9c <_read_r+0x20>)
 8005a80:	4604      	mov	r4, r0
 8005a82:	4608      	mov	r0, r1
 8005a84:	4611      	mov	r1, r2
 8005a86:	2200      	movs	r2, #0
 8005a88:	602a      	str	r2, [r5, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f7fb fcb2 	bl	80013f4 <_read>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_read_r+0x1e>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_read_r+0x1e>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	2000044c 	.word	0x2000044c

08005aa0 <_write_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d07      	ldr	r5, [pc, #28]	@ (8005ac0 <_write_r+0x20>)
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	602a      	str	r2, [r5, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f7fb fcbd 	bl	800142e <_write>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_write_r+0x1e>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_write_r+0x1e>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	2000044c 	.word	0x2000044c

08005ac4 <__errno>:
 8005ac4:	4b01      	ldr	r3, [pc, #4]	@ (8005acc <__errno+0x8>)
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	2000001c 	.word	0x2000001c

08005ad0 <__libc_init_array>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	4d0d      	ldr	r5, [pc, #52]	@ (8005b08 <__libc_init_array+0x38>)
 8005ad4:	4c0d      	ldr	r4, [pc, #52]	@ (8005b0c <__libc_init_array+0x3c>)
 8005ad6:	1b64      	subs	r4, r4, r5
 8005ad8:	10a4      	asrs	r4, r4, #2
 8005ada:	2600      	movs	r6, #0
 8005adc:	42a6      	cmp	r6, r4
 8005ade:	d109      	bne.n	8005af4 <__libc_init_array+0x24>
 8005ae0:	4d0b      	ldr	r5, [pc, #44]	@ (8005b10 <__libc_init_array+0x40>)
 8005ae2:	4c0c      	ldr	r4, [pc, #48]	@ (8005b14 <__libc_init_array+0x44>)
 8005ae4:	f001 fec2 	bl	800786c <_init>
 8005ae8:	1b64      	subs	r4, r4, r5
 8005aea:	10a4      	asrs	r4, r4, #2
 8005aec:	2600      	movs	r6, #0
 8005aee:	42a6      	cmp	r6, r4
 8005af0:	d105      	bne.n	8005afe <__libc_init_array+0x2e>
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af8:	4798      	blx	r3
 8005afa:	3601      	adds	r6, #1
 8005afc:	e7ee      	b.n	8005adc <__libc_init_array+0xc>
 8005afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b02:	4798      	blx	r3
 8005b04:	3601      	adds	r6, #1
 8005b06:	e7f2      	b.n	8005aee <__libc_init_array+0x1e>
 8005b08:	08008024 	.word	0x08008024
 8005b0c:	08008024 	.word	0x08008024
 8005b10:	08008024 	.word	0x08008024
 8005b14:	08008028 	.word	0x08008028

08005b18 <__retarget_lock_init_recursive>:
 8005b18:	4770      	bx	lr

08005b1a <__retarget_lock_acquire_recursive>:
 8005b1a:	4770      	bx	lr

08005b1c <__retarget_lock_release_recursive>:
 8005b1c:	4770      	bx	lr

08005b1e <quorem>:
 8005b1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b22:	6903      	ldr	r3, [r0, #16]
 8005b24:	690c      	ldr	r4, [r1, #16]
 8005b26:	42a3      	cmp	r3, r4
 8005b28:	4607      	mov	r7, r0
 8005b2a:	db7e      	blt.n	8005c2a <quorem+0x10c>
 8005b2c:	3c01      	subs	r4, #1
 8005b2e:	f101 0814 	add.w	r8, r1, #20
 8005b32:	00a3      	lsls	r3, r4, #2
 8005b34:	f100 0514 	add.w	r5, r0, #20
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b50:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b54:	d32e      	bcc.n	8005bb4 <quorem+0x96>
 8005b56:	f04f 0a00 	mov.w	sl, #0
 8005b5a:	46c4      	mov	ip, r8
 8005b5c:	46ae      	mov	lr, r5
 8005b5e:	46d3      	mov	fp, sl
 8005b60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b64:	b298      	uxth	r0, r3
 8005b66:	fb06 a000 	mla	r0, r6, r0, sl
 8005b6a:	0c02      	lsrs	r2, r0, #16
 8005b6c:	0c1b      	lsrs	r3, r3, #16
 8005b6e:	fb06 2303 	mla	r3, r6, r3, r2
 8005b72:	f8de 2000 	ldr.w	r2, [lr]
 8005b76:	b280      	uxth	r0, r0
 8005b78:	b292      	uxth	r2, r2
 8005b7a:	1a12      	subs	r2, r2, r0
 8005b7c:	445a      	add	r2, fp
 8005b7e:	f8de 0000 	ldr.w	r0, [lr]
 8005b82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b90:	b292      	uxth	r2, r2
 8005b92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b96:	45e1      	cmp	r9, ip
 8005b98:	f84e 2b04 	str.w	r2, [lr], #4
 8005b9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005ba0:	d2de      	bcs.n	8005b60 <quorem+0x42>
 8005ba2:	9b00      	ldr	r3, [sp, #0]
 8005ba4:	58eb      	ldr	r3, [r5, r3]
 8005ba6:	b92b      	cbnz	r3, 8005bb4 <quorem+0x96>
 8005ba8:	9b01      	ldr	r3, [sp, #4]
 8005baa:	3b04      	subs	r3, #4
 8005bac:	429d      	cmp	r5, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	d32f      	bcc.n	8005c12 <quorem+0xf4>
 8005bb2:	613c      	str	r4, [r7, #16]
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	f001 f97d 	bl	8006eb4 <__mcmp>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	db25      	blt.n	8005c0a <quorem+0xec>
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bc6:	f8d1 c000 	ldr.w	ip, [r1]
 8005bca:	fa1f fe82 	uxth.w	lr, r2
 8005bce:	fa1f f38c 	uxth.w	r3, ip
 8005bd2:	eba3 030e 	sub.w	r3, r3, lr
 8005bd6:	4403      	add	r3, r0
 8005bd8:	0c12      	lsrs	r2, r2, #16
 8005bda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005be8:	45c1      	cmp	r9, r8
 8005bea:	f841 3b04 	str.w	r3, [r1], #4
 8005bee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005bf2:	d2e6      	bcs.n	8005bc2 <quorem+0xa4>
 8005bf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bfc:	b922      	cbnz	r2, 8005c08 <quorem+0xea>
 8005bfe:	3b04      	subs	r3, #4
 8005c00:	429d      	cmp	r5, r3
 8005c02:	461a      	mov	r2, r3
 8005c04:	d30b      	bcc.n	8005c1e <quorem+0x100>
 8005c06:	613c      	str	r4, [r7, #16]
 8005c08:	3601      	adds	r6, #1
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	b003      	add	sp, #12
 8005c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c12:	6812      	ldr	r2, [r2, #0]
 8005c14:	3b04      	subs	r3, #4
 8005c16:	2a00      	cmp	r2, #0
 8005c18:	d1cb      	bne.n	8005bb2 <quorem+0x94>
 8005c1a:	3c01      	subs	r4, #1
 8005c1c:	e7c6      	b.n	8005bac <quorem+0x8e>
 8005c1e:	6812      	ldr	r2, [r2, #0]
 8005c20:	3b04      	subs	r3, #4
 8005c22:	2a00      	cmp	r2, #0
 8005c24:	d1ef      	bne.n	8005c06 <quorem+0xe8>
 8005c26:	3c01      	subs	r4, #1
 8005c28:	e7ea      	b.n	8005c00 <quorem+0xe2>
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	e7ee      	b.n	8005c0c <quorem+0xee>
	...

08005c30 <_dtoa_r>:
 8005c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c34:	69c7      	ldr	r7, [r0, #28]
 8005c36:	b097      	sub	sp, #92	@ 0x5c
 8005c38:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005c3c:	ec55 4b10 	vmov	r4, r5, d0
 8005c40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005c42:	9107      	str	r1, [sp, #28]
 8005c44:	4681      	mov	r9, r0
 8005c46:	920c      	str	r2, [sp, #48]	@ 0x30
 8005c48:	9311      	str	r3, [sp, #68]	@ 0x44
 8005c4a:	b97f      	cbnz	r7, 8005c6c <_dtoa_r+0x3c>
 8005c4c:	2010      	movs	r0, #16
 8005c4e:	f000 fe09 	bl	8006864 <malloc>
 8005c52:	4602      	mov	r2, r0
 8005c54:	f8c9 001c 	str.w	r0, [r9, #28]
 8005c58:	b920      	cbnz	r0, 8005c64 <_dtoa_r+0x34>
 8005c5a:	4ba9      	ldr	r3, [pc, #676]	@ (8005f00 <_dtoa_r+0x2d0>)
 8005c5c:	21ef      	movs	r1, #239	@ 0xef
 8005c5e:	48a9      	ldr	r0, [pc, #676]	@ (8005f04 <_dtoa_r+0x2d4>)
 8005c60:	f001 fcd0 	bl	8007604 <__assert_func>
 8005c64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c68:	6007      	str	r7, [r0, #0]
 8005c6a:	60c7      	str	r7, [r0, #12]
 8005c6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005c70:	6819      	ldr	r1, [r3, #0]
 8005c72:	b159      	cbz	r1, 8005c8c <_dtoa_r+0x5c>
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	604a      	str	r2, [r1, #4]
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4093      	lsls	r3, r2
 8005c7c:	608b      	str	r3, [r1, #8]
 8005c7e:	4648      	mov	r0, r9
 8005c80:	f000 fee6 	bl	8006a50 <_Bfree>
 8005c84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	1e2b      	subs	r3, r5, #0
 8005c8e:	bfb9      	ittee	lt
 8005c90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c94:	9305      	strlt	r3, [sp, #20]
 8005c96:	2300      	movge	r3, #0
 8005c98:	6033      	strge	r3, [r6, #0]
 8005c9a:	9f05      	ldr	r7, [sp, #20]
 8005c9c:	4b9a      	ldr	r3, [pc, #616]	@ (8005f08 <_dtoa_r+0x2d8>)
 8005c9e:	bfbc      	itt	lt
 8005ca0:	2201      	movlt	r2, #1
 8005ca2:	6032      	strlt	r2, [r6, #0]
 8005ca4:	43bb      	bics	r3, r7
 8005ca6:	d112      	bne.n	8005cce <_dtoa_r+0x9e>
 8005ca8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005caa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cb4:	4323      	orrs	r3, r4
 8005cb6:	f000 855a 	beq.w	800676e <_dtoa_r+0xb3e>
 8005cba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cbc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005f1c <_dtoa_r+0x2ec>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 855c 	beq.w	800677e <_dtoa_r+0xb4e>
 8005cc6:	f10a 0303 	add.w	r3, sl, #3
 8005cca:	f000 bd56 	b.w	800677a <_dtoa_r+0xb4a>
 8005cce:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	ec51 0b17 	vmov	r0, r1, d7
 8005cd8:	2300      	movs	r3, #0
 8005cda:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005cde:	f7fa ff13 	bl	8000b08 <__aeabi_dcmpeq>
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	b158      	cbz	r0, 8005cfe <_dtoa_r+0xce>
 8005ce6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005ce8:	2301      	movs	r3, #1
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cee:	b113      	cbz	r3, 8005cf6 <_dtoa_r+0xc6>
 8005cf0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005cf2:	4b86      	ldr	r3, [pc, #536]	@ (8005f0c <_dtoa_r+0x2dc>)
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005f20 <_dtoa_r+0x2f0>
 8005cfa:	f000 bd40 	b.w	800677e <_dtoa_r+0xb4e>
 8005cfe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005d02:	aa14      	add	r2, sp, #80	@ 0x50
 8005d04:	a915      	add	r1, sp, #84	@ 0x54
 8005d06:	4648      	mov	r0, r9
 8005d08:	f001 f984 	bl	8007014 <__d2b>
 8005d0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005d10:	9002      	str	r0, [sp, #8]
 8005d12:	2e00      	cmp	r6, #0
 8005d14:	d078      	beq.n	8005e08 <_dtoa_r+0x1d8>
 8005d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005d24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d30:	4619      	mov	r1, r3
 8005d32:	2200      	movs	r2, #0
 8005d34:	4b76      	ldr	r3, [pc, #472]	@ (8005f10 <_dtoa_r+0x2e0>)
 8005d36:	f7fa fac7 	bl	80002c8 <__aeabi_dsub>
 8005d3a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005ee8 <_dtoa_r+0x2b8>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa fc7a 	bl	8000638 <__aeabi_dmul>
 8005d44:	a36a      	add	r3, pc, #424	@ (adr r3, 8005ef0 <_dtoa_r+0x2c0>)
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	f7fa fabf 	bl	80002cc <__adddf3>
 8005d4e:	4604      	mov	r4, r0
 8005d50:	4630      	mov	r0, r6
 8005d52:	460d      	mov	r5, r1
 8005d54:	f7fa fc06 	bl	8000564 <__aeabi_i2d>
 8005d58:	a367      	add	r3, pc, #412	@ (adr r3, 8005ef8 <_dtoa_r+0x2c8>)
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f7fa fc6b 	bl	8000638 <__aeabi_dmul>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4620      	mov	r0, r4
 8005d68:	4629      	mov	r1, r5
 8005d6a:	f7fa faaf 	bl	80002cc <__adddf3>
 8005d6e:	4604      	mov	r4, r0
 8005d70:	460d      	mov	r5, r1
 8005d72:	f7fa ff11 	bl	8000b98 <__aeabi_d2iz>
 8005d76:	2200      	movs	r2, #0
 8005d78:	4607      	mov	r7, r0
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	4629      	mov	r1, r5
 8005d80:	f7fa fecc 	bl	8000b1c <__aeabi_dcmplt>
 8005d84:	b140      	cbz	r0, 8005d98 <_dtoa_r+0x168>
 8005d86:	4638      	mov	r0, r7
 8005d88:	f7fa fbec 	bl	8000564 <__aeabi_i2d>
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	462b      	mov	r3, r5
 8005d90:	f7fa feba 	bl	8000b08 <__aeabi_dcmpeq>
 8005d94:	b900      	cbnz	r0, 8005d98 <_dtoa_r+0x168>
 8005d96:	3f01      	subs	r7, #1
 8005d98:	2f16      	cmp	r7, #22
 8005d9a:	d852      	bhi.n	8005e42 <_dtoa_r+0x212>
 8005d9c:	4b5d      	ldr	r3, [pc, #372]	@ (8005f14 <_dtoa_r+0x2e4>)
 8005d9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005daa:	f7fa feb7 	bl	8000b1c <__aeabi_dcmplt>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d049      	beq.n	8005e46 <_dtoa_r+0x216>
 8005db2:	3f01      	subs	r7, #1
 8005db4:	2300      	movs	r3, #0
 8005db6:	9310      	str	r3, [sp, #64]	@ 0x40
 8005db8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005dba:	1b9b      	subs	r3, r3, r6
 8005dbc:	1e5a      	subs	r2, r3, #1
 8005dbe:	bf45      	ittet	mi
 8005dc0:	f1c3 0301 	rsbmi	r3, r3, #1
 8005dc4:	9300      	strmi	r3, [sp, #0]
 8005dc6:	2300      	movpl	r3, #0
 8005dc8:	2300      	movmi	r3, #0
 8005dca:	9206      	str	r2, [sp, #24]
 8005dcc:	bf54      	ite	pl
 8005dce:	9300      	strpl	r3, [sp, #0]
 8005dd0:	9306      	strmi	r3, [sp, #24]
 8005dd2:	2f00      	cmp	r7, #0
 8005dd4:	db39      	blt.n	8005e4a <_dtoa_r+0x21a>
 8005dd6:	9b06      	ldr	r3, [sp, #24]
 8005dd8:	970d      	str	r7, [sp, #52]	@ 0x34
 8005dda:	443b      	add	r3, r7
 8005ddc:	9306      	str	r3, [sp, #24]
 8005dde:	2300      	movs	r3, #0
 8005de0:	9308      	str	r3, [sp, #32]
 8005de2:	9b07      	ldr	r3, [sp, #28]
 8005de4:	2b09      	cmp	r3, #9
 8005de6:	d863      	bhi.n	8005eb0 <_dtoa_r+0x280>
 8005de8:	2b05      	cmp	r3, #5
 8005dea:	bfc4      	itt	gt
 8005dec:	3b04      	subgt	r3, #4
 8005dee:	9307      	strgt	r3, [sp, #28]
 8005df0:	9b07      	ldr	r3, [sp, #28]
 8005df2:	f1a3 0302 	sub.w	r3, r3, #2
 8005df6:	bfcc      	ite	gt
 8005df8:	2400      	movgt	r4, #0
 8005dfa:	2401      	movle	r4, #1
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d863      	bhi.n	8005ec8 <_dtoa_r+0x298>
 8005e00:	e8df f003 	tbb	[pc, r3]
 8005e04:	2b375452 	.word	0x2b375452
 8005e08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005e0c:	441e      	add	r6, r3
 8005e0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	bfc1      	itttt	gt
 8005e16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e1a:	409f      	lslgt	r7, r3
 8005e1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e20:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e24:	bfd6      	itet	le
 8005e26:	f1c3 0320 	rsble	r3, r3, #32
 8005e2a:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e2e:	fa04 f003 	lslle.w	r0, r4, r3
 8005e32:	f7fa fb87 	bl	8000544 <__aeabi_ui2d>
 8005e36:	2201      	movs	r2, #1
 8005e38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e3c:	3e01      	subs	r6, #1
 8005e3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005e40:	e776      	b.n	8005d30 <_dtoa_r+0x100>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e7b7      	b.n	8005db6 <_dtoa_r+0x186>
 8005e46:	9010      	str	r0, [sp, #64]	@ 0x40
 8005e48:	e7b6      	b.n	8005db8 <_dtoa_r+0x188>
 8005e4a:	9b00      	ldr	r3, [sp, #0]
 8005e4c:	1bdb      	subs	r3, r3, r7
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	427b      	negs	r3, r7
 8005e52:	9308      	str	r3, [sp, #32]
 8005e54:	2300      	movs	r3, #0
 8005e56:	930d      	str	r3, [sp, #52]	@ 0x34
 8005e58:	e7c3      	b.n	8005de2 <_dtoa_r+0x1b2>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e60:	eb07 0b03 	add.w	fp, r7, r3
 8005e64:	f10b 0301 	add.w	r3, fp, #1
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	9303      	str	r3, [sp, #12]
 8005e6c:	bfb8      	it	lt
 8005e6e:	2301      	movlt	r3, #1
 8005e70:	e006      	b.n	8005e80 <_dtoa_r+0x250>
 8005e72:	2301      	movs	r3, #1
 8005e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	dd28      	ble.n	8005ece <_dtoa_r+0x29e>
 8005e7c:	469b      	mov	fp, r3
 8005e7e:	9303      	str	r3, [sp, #12]
 8005e80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005e84:	2100      	movs	r1, #0
 8005e86:	2204      	movs	r2, #4
 8005e88:	f102 0514 	add.w	r5, r2, #20
 8005e8c:	429d      	cmp	r5, r3
 8005e8e:	d926      	bls.n	8005ede <_dtoa_r+0x2ae>
 8005e90:	6041      	str	r1, [r0, #4]
 8005e92:	4648      	mov	r0, r9
 8005e94:	f000 fd9c 	bl	80069d0 <_Balloc>
 8005e98:	4682      	mov	sl, r0
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d142      	bne.n	8005f24 <_dtoa_r+0x2f4>
 8005e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005f18 <_dtoa_r+0x2e8>)
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	f240 11af 	movw	r1, #431	@ 0x1af
 8005ea6:	e6da      	b.n	8005c5e <_dtoa_r+0x2e>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e7e3      	b.n	8005e74 <_dtoa_r+0x244>
 8005eac:	2300      	movs	r3, #0
 8005eae:	e7d5      	b.n	8005e5c <_dtoa_r+0x22c>
 8005eb0:	2401      	movs	r4, #1
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	9307      	str	r3, [sp, #28]
 8005eb6:	9409      	str	r4, [sp, #36]	@ 0x24
 8005eb8:	f04f 3bff 	mov.w	fp, #4294967295
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8cd b00c 	str.w	fp, [sp, #12]
 8005ec2:	2312      	movs	r3, #18
 8005ec4:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ec6:	e7db      	b.n	8005e80 <_dtoa_r+0x250>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ecc:	e7f4      	b.n	8005eb8 <_dtoa_r+0x288>
 8005ece:	f04f 0b01 	mov.w	fp, #1
 8005ed2:	f8cd b00c 	str.w	fp, [sp, #12]
 8005ed6:	465b      	mov	r3, fp
 8005ed8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005edc:	e7d0      	b.n	8005e80 <_dtoa_r+0x250>
 8005ede:	3101      	adds	r1, #1
 8005ee0:	0052      	lsls	r2, r2, #1
 8005ee2:	e7d1      	b.n	8005e88 <_dtoa_r+0x258>
 8005ee4:	f3af 8000 	nop.w
 8005ee8:	636f4361 	.word	0x636f4361
 8005eec:	3fd287a7 	.word	0x3fd287a7
 8005ef0:	8b60c8b3 	.word	0x8b60c8b3
 8005ef4:	3fc68a28 	.word	0x3fc68a28
 8005ef8:	509f79fb 	.word	0x509f79fb
 8005efc:	3fd34413 	.word	0x3fd34413
 8005f00:	08007ce9 	.word	0x08007ce9
 8005f04:	08007d00 	.word	0x08007d00
 8005f08:	7ff00000 	.word	0x7ff00000
 8005f0c:	08007cb9 	.word	0x08007cb9
 8005f10:	3ff80000 	.word	0x3ff80000
 8005f14:	08007e50 	.word	0x08007e50
 8005f18:	08007d58 	.word	0x08007d58
 8005f1c:	08007ce5 	.word	0x08007ce5
 8005f20:	08007cb8 	.word	0x08007cb8
 8005f24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005f28:	6018      	str	r0, [r3, #0]
 8005f2a:	9b03      	ldr	r3, [sp, #12]
 8005f2c:	2b0e      	cmp	r3, #14
 8005f2e:	f200 80a1 	bhi.w	8006074 <_dtoa_r+0x444>
 8005f32:	2c00      	cmp	r4, #0
 8005f34:	f000 809e 	beq.w	8006074 <_dtoa_r+0x444>
 8005f38:	2f00      	cmp	r7, #0
 8005f3a:	dd33      	ble.n	8005fa4 <_dtoa_r+0x374>
 8005f3c:	4b9c      	ldr	r3, [pc, #624]	@ (80061b0 <_dtoa_r+0x580>)
 8005f3e:	f007 020f 	and.w	r2, r7, #15
 8005f42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f46:	ed93 7b00 	vldr	d7, [r3]
 8005f4a:	05f8      	lsls	r0, r7, #23
 8005f4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005f50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f54:	d516      	bpl.n	8005f84 <_dtoa_r+0x354>
 8005f56:	4b97      	ldr	r3, [pc, #604]	@ (80061b4 <_dtoa_r+0x584>)
 8005f58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f60:	f7fa fc94 	bl	800088c <__aeabi_ddiv>
 8005f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f68:	f004 040f 	and.w	r4, r4, #15
 8005f6c:	2603      	movs	r6, #3
 8005f6e:	4d91      	ldr	r5, [pc, #580]	@ (80061b4 <_dtoa_r+0x584>)
 8005f70:	b954      	cbnz	r4, 8005f88 <_dtoa_r+0x358>
 8005f72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005f76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f7a:	f7fa fc87 	bl	800088c <__aeabi_ddiv>
 8005f7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f82:	e028      	b.n	8005fd6 <_dtoa_r+0x3a6>
 8005f84:	2602      	movs	r6, #2
 8005f86:	e7f2      	b.n	8005f6e <_dtoa_r+0x33e>
 8005f88:	07e1      	lsls	r1, r4, #31
 8005f8a:	d508      	bpl.n	8005f9e <_dtoa_r+0x36e>
 8005f8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005f90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f94:	f7fa fb50 	bl	8000638 <__aeabi_dmul>
 8005f98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005f9c:	3601      	adds	r6, #1
 8005f9e:	1064      	asrs	r4, r4, #1
 8005fa0:	3508      	adds	r5, #8
 8005fa2:	e7e5      	b.n	8005f70 <_dtoa_r+0x340>
 8005fa4:	f000 80af 	beq.w	8006106 <_dtoa_r+0x4d6>
 8005fa8:	427c      	negs	r4, r7
 8005faa:	4b81      	ldr	r3, [pc, #516]	@ (80061b0 <_dtoa_r+0x580>)
 8005fac:	4d81      	ldr	r5, [pc, #516]	@ (80061b4 <_dtoa_r+0x584>)
 8005fae:	f004 020f 	and.w	r2, r4, #15
 8005fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005fbe:	f7fa fb3b 	bl	8000638 <__aeabi_dmul>
 8005fc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fc6:	1124      	asrs	r4, r4, #4
 8005fc8:	2300      	movs	r3, #0
 8005fca:	2602      	movs	r6, #2
 8005fcc:	2c00      	cmp	r4, #0
 8005fce:	f040 808f 	bne.w	80060f0 <_dtoa_r+0x4c0>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1d3      	bne.n	8005f7e <_dtoa_r+0x34e>
 8005fd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005fd8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8094 	beq.w	800610a <_dtoa_r+0x4da>
 8005fe2:	4b75      	ldr	r3, [pc, #468]	@ (80061b8 <_dtoa_r+0x588>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	4629      	mov	r1, r5
 8005fea:	f7fa fd97 	bl	8000b1c <__aeabi_dcmplt>
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	f000 808b 	beq.w	800610a <_dtoa_r+0x4da>
 8005ff4:	9b03      	ldr	r3, [sp, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 8087 	beq.w	800610a <_dtoa_r+0x4da>
 8005ffc:	f1bb 0f00 	cmp.w	fp, #0
 8006000:	dd34      	ble.n	800606c <_dtoa_r+0x43c>
 8006002:	4620      	mov	r0, r4
 8006004:	4b6d      	ldr	r3, [pc, #436]	@ (80061bc <_dtoa_r+0x58c>)
 8006006:	2200      	movs	r2, #0
 8006008:	4629      	mov	r1, r5
 800600a:	f7fa fb15 	bl	8000638 <__aeabi_dmul>
 800600e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006012:	f107 38ff 	add.w	r8, r7, #4294967295
 8006016:	3601      	adds	r6, #1
 8006018:	465c      	mov	r4, fp
 800601a:	4630      	mov	r0, r6
 800601c:	f7fa faa2 	bl	8000564 <__aeabi_i2d>
 8006020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006024:	f7fa fb08 	bl	8000638 <__aeabi_dmul>
 8006028:	4b65      	ldr	r3, [pc, #404]	@ (80061c0 <_dtoa_r+0x590>)
 800602a:	2200      	movs	r2, #0
 800602c:	f7fa f94e 	bl	80002cc <__adddf3>
 8006030:	4605      	mov	r5, r0
 8006032:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006036:	2c00      	cmp	r4, #0
 8006038:	d16a      	bne.n	8006110 <_dtoa_r+0x4e0>
 800603a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800603e:	4b61      	ldr	r3, [pc, #388]	@ (80061c4 <_dtoa_r+0x594>)
 8006040:	2200      	movs	r2, #0
 8006042:	f7fa f941 	bl	80002c8 <__aeabi_dsub>
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800604e:	462a      	mov	r2, r5
 8006050:	4633      	mov	r3, r6
 8006052:	f7fa fd81 	bl	8000b58 <__aeabi_dcmpgt>
 8006056:	2800      	cmp	r0, #0
 8006058:	f040 8298 	bne.w	800658c <_dtoa_r+0x95c>
 800605c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006060:	462a      	mov	r2, r5
 8006062:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006066:	f7fa fd59 	bl	8000b1c <__aeabi_dcmplt>
 800606a:	bb38      	cbnz	r0, 80060bc <_dtoa_r+0x48c>
 800606c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006070:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006074:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006076:	2b00      	cmp	r3, #0
 8006078:	f2c0 8157 	blt.w	800632a <_dtoa_r+0x6fa>
 800607c:	2f0e      	cmp	r7, #14
 800607e:	f300 8154 	bgt.w	800632a <_dtoa_r+0x6fa>
 8006082:	4b4b      	ldr	r3, [pc, #300]	@ (80061b0 <_dtoa_r+0x580>)
 8006084:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006088:	ed93 7b00 	vldr	d7, [r3]
 800608c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800608e:	2b00      	cmp	r3, #0
 8006090:	ed8d 7b00 	vstr	d7, [sp]
 8006094:	f280 80e5 	bge.w	8006262 <_dtoa_r+0x632>
 8006098:	9b03      	ldr	r3, [sp, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f300 80e1 	bgt.w	8006262 <_dtoa_r+0x632>
 80060a0:	d10c      	bne.n	80060bc <_dtoa_r+0x48c>
 80060a2:	4b48      	ldr	r3, [pc, #288]	@ (80061c4 <_dtoa_r+0x594>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	ec51 0b17 	vmov	r0, r1, d7
 80060aa:	f7fa fac5 	bl	8000638 <__aeabi_dmul>
 80060ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060b2:	f7fa fd47 	bl	8000b44 <__aeabi_dcmpge>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	f000 8266 	beq.w	8006588 <_dtoa_r+0x958>
 80060bc:	2400      	movs	r4, #0
 80060be:	4625      	mov	r5, r4
 80060c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060c2:	4656      	mov	r6, sl
 80060c4:	ea6f 0803 	mvn.w	r8, r3
 80060c8:	2700      	movs	r7, #0
 80060ca:	4621      	mov	r1, r4
 80060cc:	4648      	mov	r0, r9
 80060ce:	f000 fcbf 	bl	8006a50 <_Bfree>
 80060d2:	2d00      	cmp	r5, #0
 80060d4:	f000 80bd 	beq.w	8006252 <_dtoa_r+0x622>
 80060d8:	b12f      	cbz	r7, 80060e6 <_dtoa_r+0x4b6>
 80060da:	42af      	cmp	r7, r5
 80060dc:	d003      	beq.n	80060e6 <_dtoa_r+0x4b6>
 80060de:	4639      	mov	r1, r7
 80060e0:	4648      	mov	r0, r9
 80060e2:	f000 fcb5 	bl	8006a50 <_Bfree>
 80060e6:	4629      	mov	r1, r5
 80060e8:	4648      	mov	r0, r9
 80060ea:	f000 fcb1 	bl	8006a50 <_Bfree>
 80060ee:	e0b0      	b.n	8006252 <_dtoa_r+0x622>
 80060f0:	07e2      	lsls	r2, r4, #31
 80060f2:	d505      	bpl.n	8006100 <_dtoa_r+0x4d0>
 80060f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060f8:	f7fa fa9e 	bl	8000638 <__aeabi_dmul>
 80060fc:	3601      	adds	r6, #1
 80060fe:	2301      	movs	r3, #1
 8006100:	1064      	asrs	r4, r4, #1
 8006102:	3508      	adds	r5, #8
 8006104:	e762      	b.n	8005fcc <_dtoa_r+0x39c>
 8006106:	2602      	movs	r6, #2
 8006108:	e765      	b.n	8005fd6 <_dtoa_r+0x3a6>
 800610a:	9c03      	ldr	r4, [sp, #12]
 800610c:	46b8      	mov	r8, r7
 800610e:	e784      	b.n	800601a <_dtoa_r+0x3ea>
 8006110:	4b27      	ldr	r3, [pc, #156]	@ (80061b0 <_dtoa_r+0x580>)
 8006112:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006114:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006118:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800611c:	4454      	add	r4, sl
 800611e:	2900      	cmp	r1, #0
 8006120:	d054      	beq.n	80061cc <_dtoa_r+0x59c>
 8006122:	4929      	ldr	r1, [pc, #164]	@ (80061c8 <_dtoa_r+0x598>)
 8006124:	2000      	movs	r0, #0
 8006126:	f7fa fbb1 	bl	800088c <__aeabi_ddiv>
 800612a:	4633      	mov	r3, r6
 800612c:	462a      	mov	r2, r5
 800612e:	f7fa f8cb 	bl	80002c8 <__aeabi_dsub>
 8006132:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006136:	4656      	mov	r6, sl
 8006138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800613c:	f7fa fd2c 	bl	8000b98 <__aeabi_d2iz>
 8006140:	4605      	mov	r5, r0
 8006142:	f7fa fa0f 	bl	8000564 <__aeabi_i2d>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800614e:	f7fa f8bb 	bl	80002c8 <__aeabi_dsub>
 8006152:	3530      	adds	r5, #48	@ 0x30
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800615c:	f806 5b01 	strb.w	r5, [r6], #1
 8006160:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006164:	f7fa fcda 	bl	8000b1c <__aeabi_dcmplt>
 8006168:	2800      	cmp	r0, #0
 800616a:	d172      	bne.n	8006252 <_dtoa_r+0x622>
 800616c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006170:	4911      	ldr	r1, [pc, #68]	@ (80061b8 <_dtoa_r+0x588>)
 8006172:	2000      	movs	r0, #0
 8006174:	f7fa f8a8 	bl	80002c8 <__aeabi_dsub>
 8006178:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800617c:	f7fa fcce 	bl	8000b1c <__aeabi_dcmplt>
 8006180:	2800      	cmp	r0, #0
 8006182:	f040 80b4 	bne.w	80062ee <_dtoa_r+0x6be>
 8006186:	42a6      	cmp	r6, r4
 8006188:	f43f af70 	beq.w	800606c <_dtoa_r+0x43c>
 800618c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006190:	4b0a      	ldr	r3, [pc, #40]	@ (80061bc <_dtoa_r+0x58c>)
 8006192:	2200      	movs	r2, #0
 8006194:	f7fa fa50 	bl	8000638 <__aeabi_dmul>
 8006198:	4b08      	ldr	r3, [pc, #32]	@ (80061bc <_dtoa_r+0x58c>)
 800619a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800619e:	2200      	movs	r2, #0
 80061a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061a4:	f7fa fa48 	bl	8000638 <__aeabi_dmul>
 80061a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061ac:	e7c4      	b.n	8006138 <_dtoa_r+0x508>
 80061ae:	bf00      	nop
 80061b0:	08007e50 	.word	0x08007e50
 80061b4:	08007e28 	.word	0x08007e28
 80061b8:	3ff00000 	.word	0x3ff00000
 80061bc:	40240000 	.word	0x40240000
 80061c0:	401c0000 	.word	0x401c0000
 80061c4:	40140000 	.word	0x40140000
 80061c8:	3fe00000 	.word	0x3fe00000
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	f7fa fa32 	bl	8000638 <__aeabi_dmul>
 80061d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80061d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80061da:	4656      	mov	r6, sl
 80061dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061e0:	f7fa fcda 	bl	8000b98 <__aeabi_d2iz>
 80061e4:	4605      	mov	r5, r0
 80061e6:	f7fa f9bd 	bl	8000564 <__aeabi_i2d>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061f2:	f7fa f869 	bl	80002c8 <__aeabi_dsub>
 80061f6:	3530      	adds	r5, #48	@ 0x30
 80061f8:	f806 5b01 	strb.w	r5, [r6], #1
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	42a6      	cmp	r6, r4
 8006202:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	d124      	bne.n	8006256 <_dtoa_r+0x626>
 800620c:	4baf      	ldr	r3, [pc, #700]	@ (80064cc <_dtoa_r+0x89c>)
 800620e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006212:	f7fa f85b 	bl	80002cc <__adddf3>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800621e:	f7fa fc9b 	bl	8000b58 <__aeabi_dcmpgt>
 8006222:	2800      	cmp	r0, #0
 8006224:	d163      	bne.n	80062ee <_dtoa_r+0x6be>
 8006226:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800622a:	49a8      	ldr	r1, [pc, #672]	@ (80064cc <_dtoa_r+0x89c>)
 800622c:	2000      	movs	r0, #0
 800622e:	f7fa f84b 	bl	80002c8 <__aeabi_dsub>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800623a:	f7fa fc6f 	bl	8000b1c <__aeabi_dcmplt>
 800623e:	2800      	cmp	r0, #0
 8006240:	f43f af14 	beq.w	800606c <_dtoa_r+0x43c>
 8006244:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006246:	1e73      	subs	r3, r6, #1
 8006248:	9313      	str	r3, [sp, #76]	@ 0x4c
 800624a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800624e:	2b30      	cmp	r3, #48	@ 0x30
 8006250:	d0f8      	beq.n	8006244 <_dtoa_r+0x614>
 8006252:	4647      	mov	r7, r8
 8006254:	e03b      	b.n	80062ce <_dtoa_r+0x69e>
 8006256:	4b9e      	ldr	r3, [pc, #632]	@ (80064d0 <_dtoa_r+0x8a0>)
 8006258:	f7fa f9ee 	bl	8000638 <__aeabi_dmul>
 800625c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006260:	e7bc      	b.n	80061dc <_dtoa_r+0x5ac>
 8006262:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006266:	4656      	mov	r6, sl
 8006268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800626c:	4620      	mov	r0, r4
 800626e:	4629      	mov	r1, r5
 8006270:	f7fa fb0c 	bl	800088c <__aeabi_ddiv>
 8006274:	f7fa fc90 	bl	8000b98 <__aeabi_d2iz>
 8006278:	4680      	mov	r8, r0
 800627a:	f7fa f973 	bl	8000564 <__aeabi_i2d>
 800627e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006282:	f7fa f9d9 	bl	8000638 <__aeabi_dmul>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4620      	mov	r0, r4
 800628c:	4629      	mov	r1, r5
 800628e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006292:	f7fa f819 	bl	80002c8 <__aeabi_dsub>
 8006296:	f806 4b01 	strb.w	r4, [r6], #1
 800629a:	9d03      	ldr	r5, [sp, #12]
 800629c:	eba6 040a 	sub.w	r4, r6, sl
 80062a0:	42a5      	cmp	r5, r4
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	d133      	bne.n	8006310 <_dtoa_r+0x6e0>
 80062a8:	f7fa f810 	bl	80002cc <__adddf3>
 80062ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062b0:	4604      	mov	r4, r0
 80062b2:	460d      	mov	r5, r1
 80062b4:	f7fa fc50 	bl	8000b58 <__aeabi_dcmpgt>
 80062b8:	b9c0      	cbnz	r0, 80062ec <_dtoa_r+0x6bc>
 80062ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062be:	4620      	mov	r0, r4
 80062c0:	4629      	mov	r1, r5
 80062c2:	f7fa fc21 	bl	8000b08 <__aeabi_dcmpeq>
 80062c6:	b110      	cbz	r0, 80062ce <_dtoa_r+0x69e>
 80062c8:	f018 0f01 	tst.w	r8, #1
 80062cc:	d10e      	bne.n	80062ec <_dtoa_r+0x6bc>
 80062ce:	9902      	ldr	r1, [sp, #8]
 80062d0:	4648      	mov	r0, r9
 80062d2:	f000 fbbd 	bl	8006a50 <_Bfree>
 80062d6:	2300      	movs	r3, #0
 80062d8:	7033      	strb	r3, [r6, #0]
 80062da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80062dc:	3701      	adds	r7, #1
 80062de:	601f      	str	r7, [r3, #0]
 80062e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 824b 	beq.w	800677e <_dtoa_r+0xb4e>
 80062e8:	601e      	str	r6, [r3, #0]
 80062ea:	e248      	b.n	800677e <_dtoa_r+0xb4e>
 80062ec:	46b8      	mov	r8, r7
 80062ee:	4633      	mov	r3, r6
 80062f0:	461e      	mov	r6, r3
 80062f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062f6:	2a39      	cmp	r2, #57	@ 0x39
 80062f8:	d106      	bne.n	8006308 <_dtoa_r+0x6d8>
 80062fa:	459a      	cmp	sl, r3
 80062fc:	d1f8      	bne.n	80062f0 <_dtoa_r+0x6c0>
 80062fe:	2230      	movs	r2, #48	@ 0x30
 8006300:	f108 0801 	add.w	r8, r8, #1
 8006304:	f88a 2000 	strb.w	r2, [sl]
 8006308:	781a      	ldrb	r2, [r3, #0]
 800630a:	3201      	adds	r2, #1
 800630c:	701a      	strb	r2, [r3, #0]
 800630e:	e7a0      	b.n	8006252 <_dtoa_r+0x622>
 8006310:	4b6f      	ldr	r3, [pc, #444]	@ (80064d0 <_dtoa_r+0x8a0>)
 8006312:	2200      	movs	r2, #0
 8006314:	f7fa f990 	bl	8000638 <__aeabi_dmul>
 8006318:	2200      	movs	r2, #0
 800631a:	2300      	movs	r3, #0
 800631c:	4604      	mov	r4, r0
 800631e:	460d      	mov	r5, r1
 8006320:	f7fa fbf2 	bl	8000b08 <__aeabi_dcmpeq>
 8006324:	2800      	cmp	r0, #0
 8006326:	d09f      	beq.n	8006268 <_dtoa_r+0x638>
 8006328:	e7d1      	b.n	80062ce <_dtoa_r+0x69e>
 800632a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800632c:	2a00      	cmp	r2, #0
 800632e:	f000 80ea 	beq.w	8006506 <_dtoa_r+0x8d6>
 8006332:	9a07      	ldr	r2, [sp, #28]
 8006334:	2a01      	cmp	r2, #1
 8006336:	f300 80cd 	bgt.w	80064d4 <_dtoa_r+0x8a4>
 800633a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800633c:	2a00      	cmp	r2, #0
 800633e:	f000 80c1 	beq.w	80064c4 <_dtoa_r+0x894>
 8006342:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006346:	9c08      	ldr	r4, [sp, #32]
 8006348:	9e00      	ldr	r6, [sp, #0]
 800634a:	9a00      	ldr	r2, [sp, #0]
 800634c:	441a      	add	r2, r3
 800634e:	9200      	str	r2, [sp, #0]
 8006350:	9a06      	ldr	r2, [sp, #24]
 8006352:	2101      	movs	r1, #1
 8006354:	441a      	add	r2, r3
 8006356:	4648      	mov	r0, r9
 8006358:	9206      	str	r2, [sp, #24]
 800635a:	f000 fc2d 	bl	8006bb8 <__i2b>
 800635e:	4605      	mov	r5, r0
 8006360:	b166      	cbz	r6, 800637c <_dtoa_r+0x74c>
 8006362:	9b06      	ldr	r3, [sp, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	dd09      	ble.n	800637c <_dtoa_r+0x74c>
 8006368:	42b3      	cmp	r3, r6
 800636a:	9a00      	ldr	r2, [sp, #0]
 800636c:	bfa8      	it	ge
 800636e:	4633      	movge	r3, r6
 8006370:	1ad2      	subs	r2, r2, r3
 8006372:	9200      	str	r2, [sp, #0]
 8006374:	9a06      	ldr	r2, [sp, #24]
 8006376:	1af6      	subs	r6, r6, r3
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	9306      	str	r3, [sp, #24]
 800637c:	9b08      	ldr	r3, [sp, #32]
 800637e:	b30b      	cbz	r3, 80063c4 <_dtoa_r+0x794>
 8006380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 80c6 	beq.w	8006514 <_dtoa_r+0x8e4>
 8006388:	2c00      	cmp	r4, #0
 800638a:	f000 80c0 	beq.w	800650e <_dtoa_r+0x8de>
 800638e:	4629      	mov	r1, r5
 8006390:	4622      	mov	r2, r4
 8006392:	4648      	mov	r0, r9
 8006394:	f000 fcc8 	bl	8006d28 <__pow5mult>
 8006398:	9a02      	ldr	r2, [sp, #8]
 800639a:	4601      	mov	r1, r0
 800639c:	4605      	mov	r5, r0
 800639e:	4648      	mov	r0, r9
 80063a0:	f000 fc20 	bl	8006be4 <__multiply>
 80063a4:	9902      	ldr	r1, [sp, #8]
 80063a6:	4680      	mov	r8, r0
 80063a8:	4648      	mov	r0, r9
 80063aa:	f000 fb51 	bl	8006a50 <_Bfree>
 80063ae:	9b08      	ldr	r3, [sp, #32]
 80063b0:	1b1b      	subs	r3, r3, r4
 80063b2:	9308      	str	r3, [sp, #32]
 80063b4:	f000 80b1 	beq.w	800651a <_dtoa_r+0x8ea>
 80063b8:	9a08      	ldr	r2, [sp, #32]
 80063ba:	4641      	mov	r1, r8
 80063bc:	4648      	mov	r0, r9
 80063be:	f000 fcb3 	bl	8006d28 <__pow5mult>
 80063c2:	9002      	str	r0, [sp, #8]
 80063c4:	2101      	movs	r1, #1
 80063c6:	4648      	mov	r0, r9
 80063c8:	f000 fbf6 	bl	8006bb8 <__i2b>
 80063cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063ce:	4604      	mov	r4, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 81d8 	beq.w	8006786 <_dtoa_r+0xb56>
 80063d6:	461a      	mov	r2, r3
 80063d8:	4601      	mov	r1, r0
 80063da:	4648      	mov	r0, r9
 80063dc:	f000 fca4 	bl	8006d28 <__pow5mult>
 80063e0:	9b07      	ldr	r3, [sp, #28]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	4604      	mov	r4, r0
 80063e6:	f300 809f 	bgt.w	8006528 <_dtoa_r+0x8f8>
 80063ea:	9b04      	ldr	r3, [sp, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f040 8097 	bne.w	8006520 <_dtoa_r+0x8f0>
 80063f2:	9b05      	ldr	r3, [sp, #20]
 80063f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f040 8093 	bne.w	8006524 <_dtoa_r+0x8f4>
 80063fe:	9b05      	ldr	r3, [sp, #20]
 8006400:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006404:	0d1b      	lsrs	r3, r3, #20
 8006406:	051b      	lsls	r3, r3, #20
 8006408:	b133      	cbz	r3, 8006418 <_dtoa_r+0x7e8>
 800640a:	9b00      	ldr	r3, [sp, #0]
 800640c:	3301      	adds	r3, #1
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	9b06      	ldr	r3, [sp, #24]
 8006412:	3301      	adds	r3, #1
 8006414:	9306      	str	r3, [sp, #24]
 8006416:	2301      	movs	r3, #1
 8006418:	9308      	str	r3, [sp, #32]
 800641a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 81b8 	beq.w	8006792 <_dtoa_r+0xb62>
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006428:	6918      	ldr	r0, [r3, #16]
 800642a:	f000 fb79 	bl	8006b20 <__hi0bits>
 800642e:	f1c0 0020 	rsb	r0, r0, #32
 8006432:	9b06      	ldr	r3, [sp, #24]
 8006434:	4418      	add	r0, r3
 8006436:	f010 001f 	ands.w	r0, r0, #31
 800643a:	f000 8082 	beq.w	8006542 <_dtoa_r+0x912>
 800643e:	f1c0 0320 	rsb	r3, r0, #32
 8006442:	2b04      	cmp	r3, #4
 8006444:	dd73      	ble.n	800652e <_dtoa_r+0x8fe>
 8006446:	9b00      	ldr	r3, [sp, #0]
 8006448:	f1c0 001c 	rsb	r0, r0, #28
 800644c:	4403      	add	r3, r0
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	9b06      	ldr	r3, [sp, #24]
 8006452:	4403      	add	r3, r0
 8006454:	4406      	add	r6, r0
 8006456:	9306      	str	r3, [sp, #24]
 8006458:	9b00      	ldr	r3, [sp, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	dd05      	ble.n	800646a <_dtoa_r+0x83a>
 800645e:	9902      	ldr	r1, [sp, #8]
 8006460:	461a      	mov	r2, r3
 8006462:	4648      	mov	r0, r9
 8006464:	f000 fcba 	bl	8006ddc <__lshift>
 8006468:	9002      	str	r0, [sp, #8]
 800646a:	9b06      	ldr	r3, [sp, #24]
 800646c:	2b00      	cmp	r3, #0
 800646e:	dd05      	ble.n	800647c <_dtoa_r+0x84c>
 8006470:	4621      	mov	r1, r4
 8006472:	461a      	mov	r2, r3
 8006474:	4648      	mov	r0, r9
 8006476:	f000 fcb1 	bl	8006ddc <__lshift>
 800647a:	4604      	mov	r4, r0
 800647c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800647e:	2b00      	cmp	r3, #0
 8006480:	d061      	beq.n	8006546 <_dtoa_r+0x916>
 8006482:	9802      	ldr	r0, [sp, #8]
 8006484:	4621      	mov	r1, r4
 8006486:	f000 fd15 	bl	8006eb4 <__mcmp>
 800648a:	2800      	cmp	r0, #0
 800648c:	da5b      	bge.n	8006546 <_dtoa_r+0x916>
 800648e:	2300      	movs	r3, #0
 8006490:	9902      	ldr	r1, [sp, #8]
 8006492:	220a      	movs	r2, #10
 8006494:	4648      	mov	r0, r9
 8006496:	f000 fafd 	bl	8006a94 <__multadd>
 800649a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800649c:	9002      	str	r0, [sp, #8]
 800649e:	f107 38ff 	add.w	r8, r7, #4294967295
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 8177 	beq.w	8006796 <_dtoa_r+0xb66>
 80064a8:	4629      	mov	r1, r5
 80064aa:	2300      	movs	r3, #0
 80064ac:	220a      	movs	r2, #10
 80064ae:	4648      	mov	r0, r9
 80064b0:	f000 faf0 	bl	8006a94 <__multadd>
 80064b4:	f1bb 0f00 	cmp.w	fp, #0
 80064b8:	4605      	mov	r5, r0
 80064ba:	dc6f      	bgt.n	800659c <_dtoa_r+0x96c>
 80064bc:	9b07      	ldr	r3, [sp, #28]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	dc49      	bgt.n	8006556 <_dtoa_r+0x926>
 80064c2:	e06b      	b.n	800659c <_dtoa_r+0x96c>
 80064c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064ca:	e73c      	b.n	8006346 <_dtoa_r+0x716>
 80064cc:	3fe00000 	.word	0x3fe00000
 80064d0:	40240000 	.word	0x40240000
 80064d4:	9b03      	ldr	r3, [sp, #12]
 80064d6:	1e5c      	subs	r4, r3, #1
 80064d8:	9b08      	ldr	r3, [sp, #32]
 80064da:	42a3      	cmp	r3, r4
 80064dc:	db09      	blt.n	80064f2 <_dtoa_r+0x8c2>
 80064de:	1b1c      	subs	r4, r3, r4
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f6bf af30 	bge.w	8006348 <_dtoa_r+0x718>
 80064e8:	9b00      	ldr	r3, [sp, #0]
 80064ea:	9a03      	ldr	r2, [sp, #12]
 80064ec:	1a9e      	subs	r6, r3, r2
 80064ee:	2300      	movs	r3, #0
 80064f0:	e72b      	b.n	800634a <_dtoa_r+0x71a>
 80064f2:	9b08      	ldr	r3, [sp, #32]
 80064f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80064f6:	9408      	str	r4, [sp, #32]
 80064f8:	1ae3      	subs	r3, r4, r3
 80064fa:	441a      	add	r2, r3
 80064fc:	9e00      	ldr	r6, [sp, #0]
 80064fe:	9b03      	ldr	r3, [sp, #12]
 8006500:	920d      	str	r2, [sp, #52]	@ 0x34
 8006502:	2400      	movs	r4, #0
 8006504:	e721      	b.n	800634a <_dtoa_r+0x71a>
 8006506:	9c08      	ldr	r4, [sp, #32]
 8006508:	9e00      	ldr	r6, [sp, #0]
 800650a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800650c:	e728      	b.n	8006360 <_dtoa_r+0x730>
 800650e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006512:	e751      	b.n	80063b8 <_dtoa_r+0x788>
 8006514:	9a08      	ldr	r2, [sp, #32]
 8006516:	9902      	ldr	r1, [sp, #8]
 8006518:	e750      	b.n	80063bc <_dtoa_r+0x78c>
 800651a:	f8cd 8008 	str.w	r8, [sp, #8]
 800651e:	e751      	b.n	80063c4 <_dtoa_r+0x794>
 8006520:	2300      	movs	r3, #0
 8006522:	e779      	b.n	8006418 <_dtoa_r+0x7e8>
 8006524:	9b04      	ldr	r3, [sp, #16]
 8006526:	e777      	b.n	8006418 <_dtoa_r+0x7e8>
 8006528:	2300      	movs	r3, #0
 800652a:	9308      	str	r3, [sp, #32]
 800652c:	e779      	b.n	8006422 <_dtoa_r+0x7f2>
 800652e:	d093      	beq.n	8006458 <_dtoa_r+0x828>
 8006530:	9a00      	ldr	r2, [sp, #0]
 8006532:	331c      	adds	r3, #28
 8006534:	441a      	add	r2, r3
 8006536:	9200      	str	r2, [sp, #0]
 8006538:	9a06      	ldr	r2, [sp, #24]
 800653a:	441a      	add	r2, r3
 800653c:	441e      	add	r6, r3
 800653e:	9206      	str	r2, [sp, #24]
 8006540:	e78a      	b.n	8006458 <_dtoa_r+0x828>
 8006542:	4603      	mov	r3, r0
 8006544:	e7f4      	b.n	8006530 <_dtoa_r+0x900>
 8006546:	9b03      	ldr	r3, [sp, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	46b8      	mov	r8, r7
 800654c:	dc20      	bgt.n	8006590 <_dtoa_r+0x960>
 800654e:	469b      	mov	fp, r3
 8006550:	9b07      	ldr	r3, [sp, #28]
 8006552:	2b02      	cmp	r3, #2
 8006554:	dd1e      	ble.n	8006594 <_dtoa_r+0x964>
 8006556:	f1bb 0f00 	cmp.w	fp, #0
 800655a:	f47f adb1 	bne.w	80060c0 <_dtoa_r+0x490>
 800655e:	4621      	mov	r1, r4
 8006560:	465b      	mov	r3, fp
 8006562:	2205      	movs	r2, #5
 8006564:	4648      	mov	r0, r9
 8006566:	f000 fa95 	bl	8006a94 <__multadd>
 800656a:	4601      	mov	r1, r0
 800656c:	4604      	mov	r4, r0
 800656e:	9802      	ldr	r0, [sp, #8]
 8006570:	f000 fca0 	bl	8006eb4 <__mcmp>
 8006574:	2800      	cmp	r0, #0
 8006576:	f77f ada3 	ble.w	80060c0 <_dtoa_r+0x490>
 800657a:	4656      	mov	r6, sl
 800657c:	2331      	movs	r3, #49	@ 0x31
 800657e:	f806 3b01 	strb.w	r3, [r6], #1
 8006582:	f108 0801 	add.w	r8, r8, #1
 8006586:	e59f      	b.n	80060c8 <_dtoa_r+0x498>
 8006588:	9c03      	ldr	r4, [sp, #12]
 800658a:	46b8      	mov	r8, r7
 800658c:	4625      	mov	r5, r4
 800658e:	e7f4      	b.n	800657a <_dtoa_r+0x94a>
 8006590:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 8101 	beq.w	800679e <_dtoa_r+0xb6e>
 800659c:	2e00      	cmp	r6, #0
 800659e:	dd05      	ble.n	80065ac <_dtoa_r+0x97c>
 80065a0:	4629      	mov	r1, r5
 80065a2:	4632      	mov	r2, r6
 80065a4:	4648      	mov	r0, r9
 80065a6:	f000 fc19 	bl	8006ddc <__lshift>
 80065aa:	4605      	mov	r5, r0
 80065ac:	9b08      	ldr	r3, [sp, #32]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d05c      	beq.n	800666c <_dtoa_r+0xa3c>
 80065b2:	6869      	ldr	r1, [r5, #4]
 80065b4:	4648      	mov	r0, r9
 80065b6:	f000 fa0b 	bl	80069d0 <_Balloc>
 80065ba:	4606      	mov	r6, r0
 80065bc:	b928      	cbnz	r0, 80065ca <_dtoa_r+0x99a>
 80065be:	4b82      	ldr	r3, [pc, #520]	@ (80067c8 <_dtoa_r+0xb98>)
 80065c0:	4602      	mov	r2, r0
 80065c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80065c6:	f7ff bb4a 	b.w	8005c5e <_dtoa_r+0x2e>
 80065ca:	692a      	ldr	r2, [r5, #16]
 80065cc:	3202      	adds	r2, #2
 80065ce:	0092      	lsls	r2, r2, #2
 80065d0:	f105 010c 	add.w	r1, r5, #12
 80065d4:	300c      	adds	r0, #12
 80065d6:	f001 f807 	bl	80075e8 <memcpy>
 80065da:	2201      	movs	r2, #1
 80065dc:	4631      	mov	r1, r6
 80065de:	4648      	mov	r0, r9
 80065e0:	f000 fbfc 	bl	8006ddc <__lshift>
 80065e4:	f10a 0301 	add.w	r3, sl, #1
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	eb0a 030b 	add.w	r3, sl, fp
 80065ee:	9308      	str	r3, [sp, #32]
 80065f0:	9b04      	ldr	r3, [sp, #16]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	462f      	mov	r7, r5
 80065f8:	9306      	str	r3, [sp, #24]
 80065fa:	4605      	mov	r5, r0
 80065fc:	9b00      	ldr	r3, [sp, #0]
 80065fe:	9802      	ldr	r0, [sp, #8]
 8006600:	4621      	mov	r1, r4
 8006602:	f103 3bff 	add.w	fp, r3, #4294967295
 8006606:	f7ff fa8a 	bl	8005b1e <quorem>
 800660a:	4603      	mov	r3, r0
 800660c:	3330      	adds	r3, #48	@ 0x30
 800660e:	9003      	str	r0, [sp, #12]
 8006610:	4639      	mov	r1, r7
 8006612:	9802      	ldr	r0, [sp, #8]
 8006614:	9309      	str	r3, [sp, #36]	@ 0x24
 8006616:	f000 fc4d 	bl	8006eb4 <__mcmp>
 800661a:	462a      	mov	r2, r5
 800661c:	9004      	str	r0, [sp, #16]
 800661e:	4621      	mov	r1, r4
 8006620:	4648      	mov	r0, r9
 8006622:	f000 fc63 	bl	8006eec <__mdiff>
 8006626:	68c2      	ldr	r2, [r0, #12]
 8006628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800662a:	4606      	mov	r6, r0
 800662c:	bb02      	cbnz	r2, 8006670 <_dtoa_r+0xa40>
 800662e:	4601      	mov	r1, r0
 8006630:	9802      	ldr	r0, [sp, #8]
 8006632:	f000 fc3f 	bl	8006eb4 <__mcmp>
 8006636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006638:	4602      	mov	r2, r0
 800663a:	4631      	mov	r1, r6
 800663c:	4648      	mov	r0, r9
 800663e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006640:	9309      	str	r3, [sp, #36]	@ 0x24
 8006642:	f000 fa05 	bl	8006a50 <_Bfree>
 8006646:	9b07      	ldr	r3, [sp, #28]
 8006648:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800664a:	9e00      	ldr	r6, [sp, #0]
 800664c:	ea42 0103 	orr.w	r1, r2, r3
 8006650:	9b06      	ldr	r3, [sp, #24]
 8006652:	4319      	orrs	r1, r3
 8006654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006656:	d10d      	bne.n	8006674 <_dtoa_r+0xa44>
 8006658:	2b39      	cmp	r3, #57	@ 0x39
 800665a:	d027      	beq.n	80066ac <_dtoa_r+0xa7c>
 800665c:	9a04      	ldr	r2, [sp, #16]
 800665e:	2a00      	cmp	r2, #0
 8006660:	dd01      	ble.n	8006666 <_dtoa_r+0xa36>
 8006662:	9b03      	ldr	r3, [sp, #12]
 8006664:	3331      	adds	r3, #49	@ 0x31
 8006666:	f88b 3000 	strb.w	r3, [fp]
 800666a:	e52e      	b.n	80060ca <_dtoa_r+0x49a>
 800666c:	4628      	mov	r0, r5
 800666e:	e7b9      	b.n	80065e4 <_dtoa_r+0x9b4>
 8006670:	2201      	movs	r2, #1
 8006672:	e7e2      	b.n	800663a <_dtoa_r+0xa0a>
 8006674:	9904      	ldr	r1, [sp, #16]
 8006676:	2900      	cmp	r1, #0
 8006678:	db04      	blt.n	8006684 <_dtoa_r+0xa54>
 800667a:	9807      	ldr	r0, [sp, #28]
 800667c:	4301      	orrs	r1, r0
 800667e:	9806      	ldr	r0, [sp, #24]
 8006680:	4301      	orrs	r1, r0
 8006682:	d120      	bne.n	80066c6 <_dtoa_r+0xa96>
 8006684:	2a00      	cmp	r2, #0
 8006686:	ddee      	ble.n	8006666 <_dtoa_r+0xa36>
 8006688:	9902      	ldr	r1, [sp, #8]
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	2201      	movs	r2, #1
 800668e:	4648      	mov	r0, r9
 8006690:	f000 fba4 	bl	8006ddc <__lshift>
 8006694:	4621      	mov	r1, r4
 8006696:	9002      	str	r0, [sp, #8]
 8006698:	f000 fc0c 	bl	8006eb4 <__mcmp>
 800669c:	2800      	cmp	r0, #0
 800669e:	9b00      	ldr	r3, [sp, #0]
 80066a0:	dc02      	bgt.n	80066a8 <_dtoa_r+0xa78>
 80066a2:	d1e0      	bne.n	8006666 <_dtoa_r+0xa36>
 80066a4:	07da      	lsls	r2, r3, #31
 80066a6:	d5de      	bpl.n	8006666 <_dtoa_r+0xa36>
 80066a8:	2b39      	cmp	r3, #57	@ 0x39
 80066aa:	d1da      	bne.n	8006662 <_dtoa_r+0xa32>
 80066ac:	2339      	movs	r3, #57	@ 0x39
 80066ae:	f88b 3000 	strb.w	r3, [fp]
 80066b2:	4633      	mov	r3, r6
 80066b4:	461e      	mov	r6, r3
 80066b6:	3b01      	subs	r3, #1
 80066b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80066bc:	2a39      	cmp	r2, #57	@ 0x39
 80066be:	d04e      	beq.n	800675e <_dtoa_r+0xb2e>
 80066c0:	3201      	adds	r2, #1
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	e501      	b.n	80060ca <_dtoa_r+0x49a>
 80066c6:	2a00      	cmp	r2, #0
 80066c8:	dd03      	ble.n	80066d2 <_dtoa_r+0xaa2>
 80066ca:	2b39      	cmp	r3, #57	@ 0x39
 80066cc:	d0ee      	beq.n	80066ac <_dtoa_r+0xa7c>
 80066ce:	3301      	adds	r3, #1
 80066d0:	e7c9      	b.n	8006666 <_dtoa_r+0xa36>
 80066d2:	9a00      	ldr	r2, [sp, #0]
 80066d4:	9908      	ldr	r1, [sp, #32]
 80066d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80066da:	428a      	cmp	r2, r1
 80066dc:	d028      	beq.n	8006730 <_dtoa_r+0xb00>
 80066de:	9902      	ldr	r1, [sp, #8]
 80066e0:	2300      	movs	r3, #0
 80066e2:	220a      	movs	r2, #10
 80066e4:	4648      	mov	r0, r9
 80066e6:	f000 f9d5 	bl	8006a94 <__multadd>
 80066ea:	42af      	cmp	r7, r5
 80066ec:	9002      	str	r0, [sp, #8]
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	f04f 020a 	mov.w	r2, #10
 80066f6:	4639      	mov	r1, r7
 80066f8:	4648      	mov	r0, r9
 80066fa:	d107      	bne.n	800670c <_dtoa_r+0xadc>
 80066fc:	f000 f9ca 	bl	8006a94 <__multadd>
 8006700:	4607      	mov	r7, r0
 8006702:	4605      	mov	r5, r0
 8006704:	9b00      	ldr	r3, [sp, #0]
 8006706:	3301      	adds	r3, #1
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	e777      	b.n	80065fc <_dtoa_r+0x9cc>
 800670c:	f000 f9c2 	bl	8006a94 <__multadd>
 8006710:	4629      	mov	r1, r5
 8006712:	4607      	mov	r7, r0
 8006714:	2300      	movs	r3, #0
 8006716:	220a      	movs	r2, #10
 8006718:	4648      	mov	r0, r9
 800671a:	f000 f9bb 	bl	8006a94 <__multadd>
 800671e:	4605      	mov	r5, r0
 8006720:	e7f0      	b.n	8006704 <_dtoa_r+0xad4>
 8006722:	f1bb 0f00 	cmp.w	fp, #0
 8006726:	bfcc      	ite	gt
 8006728:	465e      	movgt	r6, fp
 800672a:	2601      	movle	r6, #1
 800672c:	4456      	add	r6, sl
 800672e:	2700      	movs	r7, #0
 8006730:	9902      	ldr	r1, [sp, #8]
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	2201      	movs	r2, #1
 8006736:	4648      	mov	r0, r9
 8006738:	f000 fb50 	bl	8006ddc <__lshift>
 800673c:	4621      	mov	r1, r4
 800673e:	9002      	str	r0, [sp, #8]
 8006740:	f000 fbb8 	bl	8006eb4 <__mcmp>
 8006744:	2800      	cmp	r0, #0
 8006746:	dcb4      	bgt.n	80066b2 <_dtoa_r+0xa82>
 8006748:	d102      	bne.n	8006750 <_dtoa_r+0xb20>
 800674a:	9b00      	ldr	r3, [sp, #0]
 800674c:	07db      	lsls	r3, r3, #31
 800674e:	d4b0      	bmi.n	80066b2 <_dtoa_r+0xa82>
 8006750:	4633      	mov	r3, r6
 8006752:	461e      	mov	r6, r3
 8006754:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006758:	2a30      	cmp	r2, #48	@ 0x30
 800675a:	d0fa      	beq.n	8006752 <_dtoa_r+0xb22>
 800675c:	e4b5      	b.n	80060ca <_dtoa_r+0x49a>
 800675e:	459a      	cmp	sl, r3
 8006760:	d1a8      	bne.n	80066b4 <_dtoa_r+0xa84>
 8006762:	2331      	movs	r3, #49	@ 0x31
 8006764:	f108 0801 	add.w	r8, r8, #1
 8006768:	f88a 3000 	strb.w	r3, [sl]
 800676c:	e4ad      	b.n	80060ca <_dtoa_r+0x49a>
 800676e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006770:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80067cc <_dtoa_r+0xb9c>
 8006774:	b11b      	cbz	r3, 800677e <_dtoa_r+0xb4e>
 8006776:	f10a 0308 	add.w	r3, sl, #8
 800677a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	4650      	mov	r0, sl
 8006780:	b017      	add	sp, #92	@ 0x5c
 8006782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006786:	9b07      	ldr	r3, [sp, #28]
 8006788:	2b01      	cmp	r3, #1
 800678a:	f77f ae2e 	ble.w	80063ea <_dtoa_r+0x7ba>
 800678e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006790:	9308      	str	r3, [sp, #32]
 8006792:	2001      	movs	r0, #1
 8006794:	e64d      	b.n	8006432 <_dtoa_r+0x802>
 8006796:	f1bb 0f00 	cmp.w	fp, #0
 800679a:	f77f aed9 	ble.w	8006550 <_dtoa_r+0x920>
 800679e:	4656      	mov	r6, sl
 80067a0:	9802      	ldr	r0, [sp, #8]
 80067a2:	4621      	mov	r1, r4
 80067a4:	f7ff f9bb 	bl	8005b1e <quorem>
 80067a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80067ac:	f806 3b01 	strb.w	r3, [r6], #1
 80067b0:	eba6 020a 	sub.w	r2, r6, sl
 80067b4:	4593      	cmp	fp, r2
 80067b6:	ddb4      	ble.n	8006722 <_dtoa_r+0xaf2>
 80067b8:	9902      	ldr	r1, [sp, #8]
 80067ba:	2300      	movs	r3, #0
 80067bc:	220a      	movs	r2, #10
 80067be:	4648      	mov	r0, r9
 80067c0:	f000 f968 	bl	8006a94 <__multadd>
 80067c4:	9002      	str	r0, [sp, #8]
 80067c6:	e7eb      	b.n	80067a0 <_dtoa_r+0xb70>
 80067c8:	08007d58 	.word	0x08007d58
 80067cc:	08007cdc 	.word	0x08007cdc

080067d0 <_free_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	4605      	mov	r5, r0
 80067d4:	2900      	cmp	r1, #0
 80067d6:	d041      	beq.n	800685c <_free_r+0x8c>
 80067d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067dc:	1f0c      	subs	r4, r1, #4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bfb8      	it	lt
 80067e2:	18e4      	addlt	r4, r4, r3
 80067e4:	f000 f8e8 	bl	80069b8 <__malloc_lock>
 80067e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006860 <_free_r+0x90>)
 80067ea:	6813      	ldr	r3, [r2, #0]
 80067ec:	b933      	cbnz	r3, 80067fc <_free_r+0x2c>
 80067ee:	6063      	str	r3, [r4, #4]
 80067f0:	6014      	str	r4, [r2, #0]
 80067f2:	4628      	mov	r0, r5
 80067f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067f8:	f000 b8e4 	b.w	80069c4 <__malloc_unlock>
 80067fc:	42a3      	cmp	r3, r4
 80067fe:	d908      	bls.n	8006812 <_free_r+0x42>
 8006800:	6820      	ldr	r0, [r4, #0]
 8006802:	1821      	adds	r1, r4, r0
 8006804:	428b      	cmp	r3, r1
 8006806:	bf01      	itttt	eq
 8006808:	6819      	ldreq	r1, [r3, #0]
 800680a:	685b      	ldreq	r3, [r3, #4]
 800680c:	1809      	addeq	r1, r1, r0
 800680e:	6021      	streq	r1, [r4, #0]
 8006810:	e7ed      	b.n	80067ee <_free_r+0x1e>
 8006812:	461a      	mov	r2, r3
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	b10b      	cbz	r3, 800681c <_free_r+0x4c>
 8006818:	42a3      	cmp	r3, r4
 800681a:	d9fa      	bls.n	8006812 <_free_r+0x42>
 800681c:	6811      	ldr	r1, [r2, #0]
 800681e:	1850      	adds	r0, r2, r1
 8006820:	42a0      	cmp	r0, r4
 8006822:	d10b      	bne.n	800683c <_free_r+0x6c>
 8006824:	6820      	ldr	r0, [r4, #0]
 8006826:	4401      	add	r1, r0
 8006828:	1850      	adds	r0, r2, r1
 800682a:	4283      	cmp	r3, r0
 800682c:	6011      	str	r1, [r2, #0]
 800682e:	d1e0      	bne.n	80067f2 <_free_r+0x22>
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	6053      	str	r3, [r2, #4]
 8006836:	4408      	add	r0, r1
 8006838:	6010      	str	r0, [r2, #0]
 800683a:	e7da      	b.n	80067f2 <_free_r+0x22>
 800683c:	d902      	bls.n	8006844 <_free_r+0x74>
 800683e:	230c      	movs	r3, #12
 8006840:	602b      	str	r3, [r5, #0]
 8006842:	e7d6      	b.n	80067f2 <_free_r+0x22>
 8006844:	6820      	ldr	r0, [r4, #0]
 8006846:	1821      	adds	r1, r4, r0
 8006848:	428b      	cmp	r3, r1
 800684a:	bf04      	itt	eq
 800684c:	6819      	ldreq	r1, [r3, #0]
 800684e:	685b      	ldreq	r3, [r3, #4]
 8006850:	6063      	str	r3, [r4, #4]
 8006852:	bf04      	itt	eq
 8006854:	1809      	addeq	r1, r1, r0
 8006856:	6021      	streq	r1, [r4, #0]
 8006858:	6054      	str	r4, [r2, #4]
 800685a:	e7ca      	b.n	80067f2 <_free_r+0x22>
 800685c:	bd38      	pop	{r3, r4, r5, pc}
 800685e:	bf00      	nop
 8006860:	20000458 	.word	0x20000458

08006864 <malloc>:
 8006864:	4b02      	ldr	r3, [pc, #8]	@ (8006870 <malloc+0xc>)
 8006866:	4601      	mov	r1, r0
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	f000 b825 	b.w	80068b8 <_malloc_r>
 800686e:	bf00      	nop
 8006870:	2000001c 	.word	0x2000001c

08006874 <sbrk_aligned>:
 8006874:	b570      	push	{r4, r5, r6, lr}
 8006876:	4e0f      	ldr	r6, [pc, #60]	@ (80068b4 <sbrk_aligned+0x40>)
 8006878:	460c      	mov	r4, r1
 800687a:	6831      	ldr	r1, [r6, #0]
 800687c:	4605      	mov	r5, r0
 800687e:	b911      	cbnz	r1, 8006886 <sbrk_aligned+0x12>
 8006880:	f000 fea2 	bl	80075c8 <_sbrk_r>
 8006884:	6030      	str	r0, [r6, #0]
 8006886:	4621      	mov	r1, r4
 8006888:	4628      	mov	r0, r5
 800688a:	f000 fe9d 	bl	80075c8 <_sbrk_r>
 800688e:	1c43      	adds	r3, r0, #1
 8006890:	d103      	bne.n	800689a <sbrk_aligned+0x26>
 8006892:	f04f 34ff 	mov.w	r4, #4294967295
 8006896:	4620      	mov	r0, r4
 8006898:	bd70      	pop	{r4, r5, r6, pc}
 800689a:	1cc4      	adds	r4, r0, #3
 800689c:	f024 0403 	bic.w	r4, r4, #3
 80068a0:	42a0      	cmp	r0, r4
 80068a2:	d0f8      	beq.n	8006896 <sbrk_aligned+0x22>
 80068a4:	1a21      	subs	r1, r4, r0
 80068a6:	4628      	mov	r0, r5
 80068a8:	f000 fe8e 	bl	80075c8 <_sbrk_r>
 80068ac:	3001      	adds	r0, #1
 80068ae:	d1f2      	bne.n	8006896 <sbrk_aligned+0x22>
 80068b0:	e7ef      	b.n	8006892 <sbrk_aligned+0x1e>
 80068b2:	bf00      	nop
 80068b4:	20000454 	.word	0x20000454

080068b8 <_malloc_r>:
 80068b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068bc:	1ccd      	adds	r5, r1, #3
 80068be:	f025 0503 	bic.w	r5, r5, #3
 80068c2:	3508      	adds	r5, #8
 80068c4:	2d0c      	cmp	r5, #12
 80068c6:	bf38      	it	cc
 80068c8:	250c      	movcc	r5, #12
 80068ca:	2d00      	cmp	r5, #0
 80068cc:	4606      	mov	r6, r0
 80068ce:	db01      	blt.n	80068d4 <_malloc_r+0x1c>
 80068d0:	42a9      	cmp	r1, r5
 80068d2:	d904      	bls.n	80068de <_malloc_r+0x26>
 80068d4:	230c      	movs	r3, #12
 80068d6:	6033      	str	r3, [r6, #0]
 80068d8:	2000      	movs	r0, #0
 80068da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069b4 <_malloc_r+0xfc>
 80068e2:	f000 f869 	bl	80069b8 <__malloc_lock>
 80068e6:	f8d8 3000 	ldr.w	r3, [r8]
 80068ea:	461c      	mov	r4, r3
 80068ec:	bb44      	cbnz	r4, 8006940 <_malloc_r+0x88>
 80068ee:	4629      	mov	r1, r5
 80068f0:	4630      	mov	r0, r6
 80068f2:	f7ff ffbf 	bl	8006874 <sbrk_aligned>
 80068f6:	1c43      	adds	r3, r0, #1
 80068f8:	4604      	mov	r4, r0
 80068fa:	d158      	bne.n	80069ae <_malloc_r+0xf6>
 80068fc:	f8d8 4000 	ldr.w	r4, [r8]
 8006900:	4627      	mov	r7, r4
 8006902:	2f00      	cmp	r7, #0
 8006904:	d143      	bne.n	800698e <_malloc_r+0xd6>
 8006906:	2c00      	cmp	r4, #0
 8006908:	d04b      	beq.n	80069a2 <_malloc_r+0xea>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	4639      	mov	r1, r7
 800690e:	4630      	mov	r0, r6
 8006910:	eb04 0903 	add.w	r9, r4, r3
 8006914:	f000 fe58 	bl	80075c8 <_sbrk_r>
 8006918:	4581      	cmp	r9, r0
 800691a:	d142      	bne.n	80069a2 <_malloc_r+0xea>
 800691c:	6821      	ldr	r1, [r4, #0]
 800691e:	1a6d      	subs	r5, r5, r1
 8006920:	4629      	mov	r1, r5
 8006922:	4630      	mov	r0, r6
 8006924:	f7ff ffa6 	bl	8006874 <sbrk_aligned>
 8006928:	3001      	adds	r0, #1
 800692a:	d03a      	beq.n	80069a2 <_malloc_r+0xea>
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	442b      	add	r3, r5
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	f8d8 3000 	ldr.w	r3, [r8]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	bb62      	cbnz	r2, 8006994 <_malloc_r+0xdc>
 800693a:	f8c8 7000 	str.w	r7, [r8]
 800693e:	e00f      	b.n	8006960 <_malloc_r+0xa8>
 8006940:	6822      	ldr	r2, [r4, #0]
 8006942:	1b52      	subs	r2, r2, r5
 8006944:	d420      	bmi.n	8006988 <_malloc_r+0xd0>
 8006946:	2a0b      	cmp	r2, #11
 8006948:	d917      	bls.n	800697a <_malloc_r+0xc2>
 800694a:	1961      	adds	r1, r4, r5
 800694c:	42a3      	cmp	r3, r4
 800694e:	6025      	str	r5, [r4, #0]
 8006950:	bf18      	it	ne
 8006952:	6059      	strne	r1, [r3, #4]
 8006954:	6863      	ldr	r3, [r4, #4]
 8006956:	bf08      	it	eq
 8006958:	f8c8 1000 	streq.w	r1, [r8]
 800695c:	5162      	str	r2, [r4, r5]
 800695e:	604b      	str	r3, [r1, #4]
 8006960:	4630      	mov	r0, r6
 8006962:	f000 f82f 	bl	80069c4 <__malloc_unlock>
 8006966:	f104 000b 	add.w	r0, r4, #11
 800696a:	1d23      	adds	r3, r4, #4
 800696c:	f020 0007 	bic.w	r0, r0, #7
 8006970:	1ac2      	subs	r2, r0, r3
 8006972:	bf1c      	itt	ne
 8006974:	1a1b      	subne	r3, r3, r0
 8006976:	50a3      	strne	r3, [r4, r2]
 8006978:	e7af      	b.n	80068da <_malloc_r+0x22>
 800697a:	6862      	ldr	r2, [r4, #4]
 800697c:	42a3      	cmp	r3, r4
 800697e:	bf0c      	ite	eq
 8006980:	f8c8 2000 	streq.w	r2, [r8]
 8006984:	605a      	strne	r2, [r3, #4]
 8006986:	e7eb      	b.n	8006960 <_malloc_r+0xa8>
 8006988:	4623      	mov	r3, r4
 800698a:	6864      	ldr	r4, [r4, #4]
 800698c:	e7ae      	b.n	80068ec <_malloc_r+0x34>
 800698e:	463c      	mov	r4, r7
 8006990:	687f      	ldr	r7, [r7, #4]
 8006992:	e7b6      	b.n	8006902 <_malloc_r+0x4a>
 8006994:	461a      	mov	r2, r3
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	42a3      	cmp	r3, r4
 800699a:	d1fb      	bne.n	8006994 <_malloc_r+0xdc>
 800699c:	2300      	movs	r3, #0
 800699e:	6053      	str	r3, [r2, #4]
 80069a0:	e7de      	b.n	8006960 <_malloc_r+0xa8>
 80069a2:	230c      	movs	r3, #12
 80069a4:	6033      	str	r3, [r6, #0]
 80069a6:	4630      	mov	r0, r6
 80069a8:	f000 f80c 	bl	80069c4 <__malloc_unlock>
 80069ac:	e794      	b.n	80068d8 <_malloc_r+0x20>
 80069ae:	6005      	str	r5, [r0, #0]
 80069b0:	e7d6      	b.n	8006960 <_malloc_r+0xa8>
 80069b2:	bf00      	nop
 80069b4:	20000458 	.word	0x20000458

080069b8 <__malloc_lock>:
 80069b8:	4801      	ldr	r0, [pc, #4]	@ (80069c0 <__malloc_lock+0x8>)
 80069ba:	f7ff b8ae 	b.w	8005b1a <__retarget_lock_acquire_recursive>
 80069be:	bf00      	nop
 80069c0:	20000450 	.word	0x20000450

080069c4 <__malloc_unlock>:
 80069c4:	4801      	ldr	r0, [pc, #4]	@ (80069cc <__malloc_unlock+0x8>)
 80069c6:	f7ff b8a9 	b.w	8005b1c <__retarget_lock_release_recursive>
 80069ca:	bf00      	nop
 80069cc:	20000450 	.word	0x20000450

080069d0 <_Balloc>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	69c6      	ldr	r6, [r0, #28]
 80069d4:	4604      	mov	r4, r0
 80069d6:	460d      	mov	r5, r1
 80069d8:	b976      	cbnz	r6, 80069f8 <_Balloc+0x28>
 80069da:	2010      	movs	r0, #16
 80069dc:	f7ff ff42 	bl	8006864 <malloc>
 80069e0:	4602      	mov	r2, r0
 80069e2:	61e0      	str	r0, [r4, #28]
 80069e4:	b920      	cbnz	r0, 80069f0 <_Balloc+0x20>
 80069e6:	4b18      	ldr	r3, [pc, #96]	@ (8006a48 <_Balloc+0x78>)
 80069e8:	4818      	ldr	r0, [pc, #96]	@ (8006a4c <_Balloc+0x7c>)
 80069ea:	216b      	movs	r1, #107	@ 0x6b
 80069ec:	f000 fe0a 	bl	8007604 <__assert_func>
 80069f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069f4:	6006      	str	r6, [r0, #0]
 80069f6:	60c6      	str	r6, [r0, #12]
 80069f8:	69e6      	ldr	r6, [r4, #28]
 80069fa:	68f3      	ldr	r3, [r6, #12]
 80069fc:	b183      	cbz	r3, 8006a20 <_Balloc+0x50>
 80069fe:	69e3      	ldr	r3, [r4, #28]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a06:	b9b8      	cbnz	r0, 8006a38 <_Balloc+0x68>
 8006a08:	2101      	movs	r1, #1
 8006a0a:	fa01 f605 	lsl.w	r6, r1, r5
 8006a0e:	1d72      	adds	r2, r6, #5
 8006a10:	0092      	lsls	r2, r2, #2
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 fe14 	bl	8007640 <_calloc_r>
 8006a18:	b160      	cbz	r0, 8006a34 <_Balloc+0x64>
 8006a1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a1e:	e00e      	b.n	8006a3e <_Balloc+0x6e>
 8006a20:	2221      	movs	r2, #33	@ 0x21
 8006a22:	2104      	movs	r1, #4
 8006a24:	4620      	mov	r0, r4
 8006a26:	f000 fe0b 	bl	8007640 <_calloc_r>
 8006a2a:	69e3      	ldr	r3, [r4, #28]
 8006a2c:	60f0      	str	r0, [r6, #12]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1e4      	bne.n	80069fe <_Balloc+0x2e>
 8006a34:	2000      	movs	r0, #0
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	6802      	ldr	r2, [r0, #0]
 8006a3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a44:	e7f7      	b.n	8006a36 <_Balloc+0x66>
 8006a46:	bf00      	nop
 8006a48:	08007ce9 	.word	0x08007ce9
 8006a4c:	08007d69 	.word	0x08007d69

08006a50 <_Bfree>:
 8006a50:	b570      	push	{r4, r5, r6, lr}
 8006a52:	69c6      	ldr	r6, [r0, #28]
 8006a54:	4605      	mov	r5, r0
 8006a56:	460c      	mov	r4, r1
 8006a58:	b976      	cbnz	r6, 8006a78 <_Bfree+0x28>
 8006a5a:	2010      	movs	r0, #16
 8006a5c:	f7ff ff02 	bl	8006864 <malloc>
 8006a60:	4602      	mov	r2, r0
 8006a62:	61e8      	str	r0, [r5, #28]
 8006a64:	b920      	cbnz	r0, 8006a70 <_Bfree+0x20>
 8006a66:	4b09      	ldr	r3, [pc, #36]	@ (8006a8c <_Bfree+0x3c>)
 8006a68:	4809      	ldr	r0, [pc, #36]	@ (8006a90 <_Bfree+0x40>)
 8006a6a:	218f      	movs	r1, #143	@ 0x8f
 8006a6c:	f000 fdca 	bl	8007604 <__assert_func>
 8006a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a74:	6006      	str	r6, [r0, #0]
 8006a76:	60c6      	str	r6, [r0, #12]
 8006a78:	b13c      	cbz	r4, 8006a8a <_Bfree+0x3a>
 8006a7a:	69eb      	ldr	r3, [r5, #28]
 8006a7c:	6862      	ldr	r2, [r4, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a84:	6021      	str	r1, [r4, #0]
 8006a86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a8a:	bd70      	pop	{r4, r5, r6, pc}
 8006a8c:	08007ce9 	.word	0x08007ce9
 8006a90:	08007d69 	.word	0x08007d69

08006a94 <__multadd>:
 8006a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a98:	690d      	ldr	r5, [r1, #16]
 8006a9a:	4607      	mov	r7, r0
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	461e      	mov	r6, r3
 8006aa0:	f101 0c14 	add.w	ip, r1, #20
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	f8dc 3000 	ldr.w	r3, [ip]
 8006aaa:	b299      	uxth	r1, r3
 8006aac:	fb02 6101 	mla	r1, r2, r1, r6
 8006ab0:	0c1e      	lsrs	r6, r3, #16
 8006ab2:	0c0b      	lsrs	r3, r1, #16
 8006ab4:	fb02 3306 	mla	r3, r2, r6, r3
 8006ab8:	b289      	uxth	r1, r1
 8006aba:	3001      	adds	r0, #1
 8006abc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ac0:	4285      	cmp	r5, r0
 8006ac2:	f84c 1b04 	str.w	r1, [ip], #4
 8006ac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006aca:	dcec      	bgt.n	8006aa6 <__multadd+0x12>
 8006acc:	b30e      	cbz	r6, 8006b12 <__multadd+0x7e>
 8006ace:	68a3      	ldr	r3, [r4, #8]
 8006ad0:	42ab      	cmp	r3, r5
 8006ad2:	dc19      	bgt.n	8006b08 <__multadd+0x74>
 8006ad4:	6861      	ldr	r1, [r4, #4]
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	3101      	adds	r1, #1
 8006ada:	f7ff ff79 	bl	80069d0 <_Balloc>
 8006ade:	4680      	mov	r8, r0
 8006ae0:	b928      	cbnz	r0, 8006aee <__multadd+0x5a>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b18 <__multadd+0x84>)
 8006ae6:	480d      	ldr	r0, [pc, #52]	@ (8006b1c <__multadd+0x88>)
 8006ae8:	21ba      	movs	r1, #186	@ 0xba
 8006aea:	f000 fd8b 	bl	8007604 <__assert_func>
 8006aee:	6922      	ldr	r2, [r4, #16]
 8006af0:	3202      	adds	r2, #2
 8006af2:	f104 010c 	add.w	r1, r4, #12
 8006af6:	0092      	lsls	r2, r2, #2
 8006af8:	300c      	adds	r0, #12
 8006afa:	f000 fd75 	bl	80075e8 <memcpy>
 8006afe:	4621      	mov	r1, r4
 8006b00:	4638      	mov	r0, r7
 8006b02:	f7ff ffa5 	bl	8006a50 <_Bfree>
 8006b06:	4644      	mov	r4, r8
 8006b08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b0c:	3501      	adds	r5, #1
 8006b0e:	615e      	str	r6, [r3, #20]
 8006b10:	6125      	str	r5, [r4, #16]
 8006b12:	4620      	mov	r0, r4
 8006b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b18:	08007d58 	.word	0x08007d58
 8006b1c:	08007d69 	.word	0x08007d69

08006b20 <__hi0bits>:
 8006b20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b24:	4603      	mov	r3, r0
 8006b26:	bf36      	itet	cc
 8006b28:	0403      	lslcc	r3, r0, #16
 8006b2a:	2000      	movcs	r0, #0
 8006b2c:	2010      	movcc	r0, #16
 8006b2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b32:	bf3c      	itt	cc
 8006b34:	021b      	lslcc	r3, r3, #8
 8006b36:	3008      	addcc	r0, #8
 8006b38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b3c:	bf3c      	itt	cc
 8006b3e:	011b      	lslcc	r3, r3, #4
 8006b40:	3004      	addcc	r0, #4
 8006b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b46:	bf3c      	itt	cc
 8006b48:	009b      	lslcc	r3, r3, #2
 8006b4a:	3002      	addcc	r0, #2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	db05      	blt.n	8006b5c <__hi0bits+0x3c>
 8006b50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b54:	f100 0001 	add.w	r0, r0, #1
 8006b58:	bf08      	it	eq
 8006b5a:	2020      	moveq	r0, #32
 8006b5c:	4770      	bx	lr

08006b5e <__lo0bits>:
 8006b5e:	6803      	ldr	r3, [r0, #0]
 8006b60:	4602      	mov	r2, r0
 8006b62:	f013 0007 	ands.w	r0, r3, #7
 8006b66:	d00b      	beq.n	8006b80 <__lo0bits+0x22>
 8006b68:	07d9      	lsls	r1, r3, #31
 8006b6a:	d421      	bmi.n	8006bb0 <__lo0bits+0x52>
 8006b6c:	0798      	lsls	r0, r3, #30
 8006b6e:	bf49      	itett	mi
 8006b70:	085b      	lsrmi	r3, r3, #1
 8006b72:	089b      	lsrpl	r3, r3, #2
 8006b74:	2001      	movmi	r0, #1
 8006b76:	6013      	strmi	r3, [r2, #0]
 8006b78:	bf5c      	itt	pl
 8006b7a:	6013      	strpl	r3, [r2, #0]
 8006b7c:	2002      	movpl	r0, #2
 8006b7e:	4770      	bx	lr
 8006b80:	b299      	uxth	r1, r3
 8006b82:	b909      	cbnz	r1, 8006b88 <__lo0bits+0x2a>
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	2010      	movs	r0, #16
 8006b88:	b2d9      	uxtb	r1, r3
 8006b8a:	b909      	cbnz	r1, 8006b90 <__lo0bits+0x32>
 8006b8c:	3008      	adds	r0, #8
 8006b8e:	0a1b      	lsrs	r3, r3, #8
 8006b90:	0719      	lsls	r1, r3, #28
 8006b92:	bf04      	itt	eq
 8006b94:	091b      	lsreq	r3, r3, #4
 8006b96:	3004      	addeq	r0, #4
 8006b98:	0799      	lsls	r1, r3, #30
 8006b9a:	bf04      	itt	eq
 8006b9c:	089b      	lsreq	r3, r3, #2
 8006b9e:	3002      	addeq	r0, #2
 8006ba0:	07d9      	lsls	r1, r3, #31
 8006ba2:	d403      	bmi.n	8006bac <__lo0bits+0x4e>
 8006ba4:	085b      	lsrs	r3, r3, #1
 8006ba6:	f100 0001 	add.w	r0, r0, #1
 8006baa:	d003      	beq.n	8006bb4 <__lo0bits+0x56>
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	4770      	bx	lr
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	4770      	bx	lr
 8006bb4:	2020      	movs	r0, #32
 8006bb6:	4770      	bx	lr

08006bb8 <__i2b>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	460c      	mov	r4, r1
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	f7ff ff07 	bl	80069d0 <_Balloc>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	b928      	cbnz	r0, 8006bd2 <__i2b+0x1a>
 8006bc6:	4b05      	ldr	r3, [pc, #20]	@ (8006bdc <__i2b+0x24>)
 8006bc8:	4805      	ldr	r0, [pc, #20]	@ (8006be0 <__i2b+0x28>)
 8006bca:	f240 1145 	movw	r1, #325	@ 0x145
 8006bce:	f000 fd19 	bl	8007604 <__assert_func>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	6144      	str	r4, [r0, #20]
 8006bd6:	6103      	str	r3, [r0, #16]
 8006bd8:	bd10      	pop	{r4, pc}
 8006bda:	bf00      	nop
 8006bdc:	08007d58 	.word	0x08007d58
 8006be0:	08007d69 	.word	0x08007d69

08006be4 <__multiply>:
 8006be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	4617      	mov	r7, r2
 8006bea:	690a      	ldr	r2, [r1, #16]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	bfa8      	it	ge
 8006bf2:	463b      	movge	r3, r7
 8006bf4:	4689      	mov	r9, r1
 8006bf6:	bfa4      	itt	ge
 8006bf8:	460f      	movge	r7, r1
 8006bfa:	4699      	movge	r9, r3
 8006bfc:	693d      	ldr	r5, [r7, #16]
 8006bfe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	6879      	ldr	r1, [r7, #4]
 8006c06:	eb05 060a 	add.w	r6, r5, sl
 8006c0a:	42b3      	cmp	r3, r6
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	bfb8      	it	lt
 8006c10:	3101      	addlt	r1, #1
 8006c12:	f7ff fedd 	bl	80069d0 <_Balloc>
 8006c16:	b930      	cbnz	r0, 8006c26 <__multiply+0x42>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	4b41      	ldr	r3, [pc, #260]	@ (8006d20 <__multiply+0x13c>)
 8006c1c:	4841      	ldr	r0, [pc, #260]	@ (8006d24 <__multiply+0x140>)
 8006c1e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c22:	f000 fcef 	bl	8007604 <__assert_func>
 8006c26:	f100 0414 	add.w	r4, r0, #20
 8006c2a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006c2e:	4623      	mov	r3, r4
 8006c30:	2200      	movs	r2, #0
 8006c32:	4573      	cmp	r3, lr
 8006c34:	d320      	bcc.n	8006c78 <__multiply+0x94>
 8006c36:	f107 0814 	add.w	r8, r7, #20
 8006c3a:	f109 0114 	add.w	r1, r9, #20
 8006c3e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006c42:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006c46:	9302      	str	r3, [sp, #8]
 8006c48:	1beb      	subs	r3, r5, r7
 8006c4a:	3b15      	subs	r3, #21
 8006c4c:	f023 0303 	bic.w	r3, r3, #3
 8006c50:	3304      	adds	r3, #4
 8006c52:	3715      	adds	r7, #21
 8006c54:	42bd      	cmp	r5, r7
 8006c56:	bf38      	it	cc
 8006c58:	2304      	movcc	r3, #4
 8006c5a:	9301      	str	r3, [sp, #4]
 8006c5c:	9b02      	ldr	r3, [sp, #8]
 8006c5e:	9103      	str	r1, [sp, #12]
 8006c60:	428b      	cmp	r3, r1
 8006c62:	d80c      	bhi.n	8006c7e <__multiply+0x9a>
 8006c64:	2e00      	cmp	r6, #0
 8006c66:	dd03      	ble.n	8006c70 <__multiply+0x8c>
 8006c68:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d055      	beq.n	8006d1c <__multiply+0x138>
 8006c70:	6106      	str	r6, [r0, #16]
 8006c72:	b005      	add	sp, #20
 8006c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c78:	f843 2b04 	str.w	r2, [r3], #4
 8006c7c:	e7d9      	b.n	8006c32 <__multiply+0x4e>
 8006c7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c82:	f1ba 0f00 	cmp.w	sl, #0
 8006c86:	d01f      	beq.n	8006cc8 <__multiply+0xe4>
 8006c88:	46c4      	mov	ip, r8
 8006c8a:	46a1      	mov	r9, r4
 8006c8c:	2700      	movs	r7, #0
 8006c8e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006c92:	f8d9 3000 	ldr.w	r3, [r9]
 8006c96:	fa1f fb82 	uxth.w	fp, r2
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006ca0:	443b      	add	r3, r7
 8006ca2:	f8d9 7000 	ldr.w	r7, [r9]
 8006ca6:	0c12      	lsrs	r2, r2, #16
 8006ca8:	0c3f      	lsrs	r7, r7, #16
 8006caa:	fb0a 7202 	mla	r2, sl, r2, r7
 8006cae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cb8:	4565      	cmp	r5, ip
 8006cba:	f849 3b04 	str.w	r3, [r9], #4
 8006cbe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006cc2:	d8e4      	bhi.n	8006c8e <__multiply+0xaa>
 8006cc4:	9b01      	ldr	r3, [sp, #4]
 8006cc6:	50e7      	str	r7, [r4, r3]
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006cce:	3104      	adds	r1, #4
 8006cd0:	f1b9 0f00 	cmp.w	r9, #0
 8006cd4:	d020      	beq.n	8006d18 <__multiply+0x134>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	4647      	mov	r7, r8
 8006cda:	46a4      	mov	ip, r4
 8006cdc:	f04f 0a00 	mov.w	sl, #0
 8006ce0:	f8b7 b000 	ldrh.w	fp, [r7]
 8006ce4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006ce8:	fb09 220b 	mla	r2, r9, fp, r2
 8006cec:	4452      	add	r2, sl
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cf4:	f84c 3b04 	str.w	r3, [ip], #4
 8006cf8:	f857 3b04 	ldr.w	r3, [r7], #4
 8006cfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d00:	f8bc 3000 	ldrh.w	r3, [ip]
 8006d04:	fb09 330a 	mla	r3, r9, sl, r3
 8006d08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006d0c:	42bd      	cmp	r5, r7
 8006d0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d12:	d8e5      	bhi.n	8006ce0 <__multiply+0xfc>
 8006d14:	9a01      	ldr	r2, [sp, #4]
 8006d16:	50a3      	str	r3, [r4, r2]
 8006d18:	3404      	adds	r4, #4
 8006d1a:	e79f      	b.n	8006c5c <__multiply+0x78>
 8006d1c:	3e01      	subs	r6, #1
 8006d1e:	e7a1      	b.n	8006c64 <__multiply+0x80>
 8006d20:	08007d58 	.word	0x08007d58
 8006d24:	08007d69 	.word	0x08007d69

08006d28 <__pow5mult>:
 8006d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d2c:	4615      	mov	r5, r2
 8006d2e:	f012 0203 	ands.w	r2, r2, #3
 8006d32:	4607      	mov	r7, r0
 8006d34:	460e      	mov	r6, r1
 8006d36:	d007      	beq.n	8006d48 <__pow5mult+0x20>
 8006d38:	4c25      	ldr	r4, [pc, #148]	@ (8006dd0 <__pow5mult+0xa8>)
 8006d3a:	3a01      	subs	r2, #1
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d42:	f7ff fea7 	bl	8006a94 <__multadd>
 8006d46:	4606      	mov	r6, r0
 8006d48:	10ad      	asrs	r5, r5, #2
 8006d4a:	d03d      	beq.n	8006dc8 <__pow5mult+0xa0>
 8006d4c:	69fc      	ldr	r4, [r7, #28]
 8006d4e:	b97c      	cbnz	r4, 8006d70 <__pow5mult+0x48>
 8006d50:	2010      	movs	r0, #16
 8006d52:	f7ff fd87 	bl	8006864 <malloc>
 8006d56:	4602      	mov	r2, r0
 8006d58:	61f8      	str	r0, [r7, #28]
 8006d5a:	b928      	cbnz	r0, 8006d68 <__pow5mult+0x40>
 8006d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006dd4 <__pow5mult+0xac>)
 8006d5e:	481e      	ldr	r0, [pc, #120]	@ (8006dd8 <__pow5mult+0xb0>)
 8006d60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d64:	f000 fc4e 	bl	8007604 <__assert_func>
 8006d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d6c:	6004      	str	r4, [r0, #0]
 8006d6e:	60c4      	str	r4, [r0, #12]
 8006d70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d78:	b94c      	cbnz	r4, 8006d8e <__pow5mult+0x66>
 8006d7a:	f240 2171 	movw	r1, #625	@ 0x271
 8006d7e:	4638      	mov	r0, r7
 8006d80:	f7ff ff1a 	bl	8006bb8 <__i2b>
 8006d84:	2300      	movs	r3, #0
 8006d86:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	6003      	str	r3, [r0, #0]
 8006d8e:	f04f 0900 	mov.w	r9, #0
 8006d92:	07eb      	lsls	r3, r5, #31
 8006d94:	d50a      	bpl.n	8006dac <__pow5mult+0x84>
 8006d96:	4631      	mov	r1, r6
 8006d98:	4622      	mov	r2, r4
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	f7ff ff22 	bl	8006be4 <__multiply>
 8006da0:	4631      	mov	r1, r6
 8006da2:	4680      	mov	r8, r0
 8006da4:	4638      	mov	r0, r7
 8006da6:	f7ff fe53 	bl	8006a50 <_Bfree>
 8006daa:	4646      	mov	r6, r8
 8006dac:	106d      	asrs	r5, r5, #1
 8006dae:	d00b      	beq.n	8006dc8 <__pow5mult+0xa0>
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	b938      	cbnz	r0, 8006dc4 <__pow5mult+0x9c>
 8006db4:	4622      	mov	r2, r4
 8006db6:	4621      	mov	r1, r4
 8006db8:	4638      	mov	r0, r7
 8006dba:	f7ff ff13 	bl	8006be4 <__multiply>
 8006dbe:	6020      	str	r0, [r4, #0]
 8006dc0:	f8c0 9000 	str.w	r9, [r0]
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	e7e4      	b.n	8006d92 <__pow5mult+0x6a>
 8006dc8:	4630      	mov	r0, r6
 8006dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dce:	bf00      	nop
 8006dd0:	08007e1c 	.word	0x08007e1c
 8006dd4:	08007ce9 	.word	0x08007ce9
 8006dd8:	08007d69 	.word	0x08007d69

08006ddc <__lshift>:
 8006ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de0:	460c      	mov	r4, r1
 8006de2:	6849      	ldr	r1, [r1, #4]
 8006de4:	6923      	ldr	r3, [r4, #16]
 8006de6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dea:	68a3      	ldr	r3, [r4, #8]
 8006dec:	4607      	mov	r7, r0
 8006dee:	4691      	mov	r9, r2
 8006df0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006df4:	f108 0601 	add.w	r6, r8, #1
 8006df8:	42b3      	cmp	r3, r6
 8006dfa:	db0b      	blt.n	8006e14 <__lshift+0x38>
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	f7ff fde7 	bl	80069d0 <_Balloc>
 8006e02:	4605      	mov	r5, r0
 8006e04:	b948      	cbnz	r0, 8006e1a <__lshift+0x3e>
 8006e06:	4602      	mov	r2, r0
 8006e08:	4b28      	ldr	r3, [pc, #160]	@ (8006eac <__lshift+0xd0>)
 8006e0a:	4829      	ldr	r0, [pc, #164]	@ (8006eb0 <__lshift+0xd4>)
 8006e0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e10:	f000 fbf8 	bl	8007604 <__assert_func>
 8006e14:	3101      	adds	r1, #1
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	e7ee      	b.n	8006df8 <__lshift+0x1c>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f100 0114 	add.w	r1, r0, #20
 8006e20:	f100 0210 	add.w	r2, r0, #16
 8006e24:	4618      	mov	r0, r3
 8006e26:	4553      	cmp	r3, sl
 8006e28:	db33      	blt.n	8006e92 <__lshift+0xb6>
 8006e2a:	6920      	ldr	r0, [r4, #16]
 8006e2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e30:	f104 0314 	add.w	r3, r4, #20
 8006e34:	f019 091f 	ands.w	r9, r9, #31
 8006e38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e40:	d02b      	beq.n	8006e9a <__lshift+0xbe>
 8006e42:	f1c9 0e20 	rsb	lr, r9, #32
 8006e46:	468a      	mov	sl, r1
 8006e48:	2200      	movs	r2, #0
 8006e4a:	6818      	ldr	r0, [r3, #0]
 8006e4c:	fa00 f009 	lsl.w	r0, r0, r9
 8006e50:	4310      	orrs	r0, r2
 8006e52:	f84a 0b04 	str.w	r0, [sl], #4
 8006e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e5a:	459c      	cmp	ip, r3
 8006e5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e60:	d8f3      	bhi.n	8006e4a <__lshift+0x6e>
 8006e62:	ebac 0304 	sub.w	r3, ip, r4
 8006e66:	3b15      	subs	r3, #21
 8006e68:	f023 0303 	bic.w	r3, r3, #3
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	f104 0015 	add.w	r0, r4, #21
 8006e72:	4560      	cmp	r0, ip
 8006e74:	bf88      	it	hi
 8006e76:	2304      	movhi	r3, #4
 8006e78:	50ca      	str	r2, [r1, r3]
 8006e7a:	b10a      	cbz	r2, 8006e80 <__lshift+0xa4>
 8006e7c:	f108 0602 	add.w	r6, r8, #2
 8006e80:	3e01      	subs	r6, #1
 8006e82:	4638      	mov	r0, r7
 8006e84:	612e      	str	r6, [r5, #16]
 8006e86:	4621      	mov	r1, r4
 8006e88:	f7ff fde2 	bl	8006a50 <_Bfree>
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e92:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e96:	3301      	adds	r3, #1
 8006e98:	e7c5      	b.n	8006e26 <__lshift+0x4a>
 8006e9a:	3904      	subs	r1, #4
 8006e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ea0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ea4:	459c      	cmp	ip, r3
 8006ea6:	d8f9      	bhi.n	8006e9c <__lshift+0xc0>
 8006ea8:	e7ea      	b.n	8006e80 <__lshift+0xa4>
 8006eaa:	bf00      	nop
 8006eac:	08007d58 	.word	0x08007d58
 8006eb0:	08007d69 	.word	0x08007d69

08006eb4 <__mcmp>:
 8006eb4:	690a      	ldr	r2, [r1, #16]
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	6900      	ldr	r0, [r0, #16]
 8006eba:	1a80      	subs	r0, r0, r2
 8006ebc:	b530      	push	{r4, r5, lr}
 8006ebe:	d10e      	bne.n	8006ede <__mcmp+0x2a>
 8006ec0:	3314      	adds	r3, #20
 8006ec2:	3114      	adds	r1, #20
 8006ec4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ec8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ecc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ed0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ed4:	4295      	cmp	r5, r2
 8006ed6:	d003      	beq.n	8006ee0 <__mcmp+0x2c>
 8006ed8:	d205      	bcs.n	8006ee6 <__mcmp+0x32>
 8006eda:	f04f 30ff 	mov.w	r0, #4294967295
 8006ede:	bd30      	pop	{r4, r5, pc}
 8006ee0:	42a3      	cmp	r3, r4
 8006ee2:	d3f3      	bcc.n	8006ecc <__mcmp+0x18>
 8006ee4:	e7fb      	b.n	8006ede <__mcmp+0x2a>
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	e7f9      	b.n	8006ede <__mcmp+0x2a>
	...

08006eec <__mdiff>:
 8006eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef0:	4689      	mov	r9, r1
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	4648      	mov	r0, r9
 8006ef8:	4614      	mov	r4, r2
 8006efa:	f7ff ffdb 	bl	8006eb4 <__mcmp>
 8006efe:	1e05      	subs	r5, r0, #0
 8006f00:	d112      	bne.n	8006f28 <__mdiff+0x3c>
 8006f02:	4629      	mov	r1, r5
 8006f04:	4630      	mov	r0, r6
 8006f06:	f7ff fd63 	bl	80069d0 <_Balloc>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	b928      	cbnz	r0, 8006f1a <__mdiff+0x2e>
 8006f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800700c <__mdiff+0x120>)
 8006f10:	f240 2137 	movw	r1, #567	@ 0x237
 8006f14:	483e      	ldr	r0, [pc, #248]	@ (8007010 <__mdiff+0x124>)
 8006f16:	f000 fb75 	bl	8007604 <__assert_func>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f20:	4610      	mov	r0, r2
 8006f22:	b003      	add	sp, #12
 8006f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f28:	bfbc      	itt	lt
 8006f2a:	464b      	movlt	r3, r9
 8006f2c:	46a1      	movlt	r9, r4
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f34:	bfba      	itte	lt
 8006f36:	461c      	movlt	r4, r3
 8006f38:	2501      	movlt	r5, #1
 8006f3a:	2500      	movge	r5, #0
 8006f3c:	f7ff fd48 	bl	80069d0 <_Balloc>
 8006f40:	4602      	mov	r2, r0
 8006f42:	b918      	cbnz	r0, 8006f4c <__mdiff+0x60>
 8006f44:	4b31      	ldr	r3, [pc, #196]	@ (800700c <__mdiff+0x120>)
 8006f46:	f240 2145 	movw	r1, #581	@ 0x245
 8006f4a:	e7e3      	b.n	8006f14 <__mdiff+0x28>
 8006f4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f50:	6926      	ldr	r6, [r4, #16]
 8006f52:	60c5      	str	r5, [r0, #12]
 8006f54:	f109 0310 	add.w	r3, r9, #16
 8006f58:	f109 0514 	add.w	r5, r9, #20
 8006f5c:	f104 0e14 	add.w	lr, r4, #20
 8006f60:	f100 0b14 	add.w	fp, r0, #20
 8006f64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	46d9      	mov	r9, fp
 8006f70:	f04f 0c00 	mov.w	ip, #0
 8006f74:	9b01      	ldr	r3, [sp, #4]
 8006f76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f7e:	9301      	str	r3, [sp, #4]
 8006f80:	fa1f f38a 	uxth.w	r3, sl
 8006f84:	4619      	mov	r1, r3
 8006f86:	b283      	uxth	r3, r0
 8006f88:	1acb      	subs	r3, r1, r3
 8006f8a:	0c00      	lsrs	r0, r0, #16
 8006f8c:	4463      	add	r3, ip
 8006f8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f9c:	4576      	cmp	r6, lr
 8006f9e:	f849 3b04 	str.w	r3, [r9], #4
 8006fa2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006fa6:	d8e5      	bhi.n	8006f74 <__mdiff+0x88>
 8006fa8:	1b33      	subs	r3, r6, r4
 8006faa:	3b15      	subs	r3, #21
 8006fac:	f023 0303 	bic.w	r3, r3, #3
 8006fb0:	3415      	adds	r4, #21
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	42a6      	cmp	r6, r4
 8006fb6:	bf38      	it	cc
 8006fb8:	2304      	movcc	r3, #4
 8006fba:	441d      	add	r5, r3
 8006fbc:	445b      	add	r3, fp
 8006fbe:	461e      	mov	r6, r3
 8006fc0:	462c      	mov	r4, r5
 8006fc2:	4544      	cmp	r4, r8
 8006fc4:	d30e      	bcc.n	8006fe4 <__mdiff+0xf8>
 8006fc6:	f108 0103 	add.w	r1, r8, #3
 8006fca:	1b49      	subs	r1, r1, r5
 8006fcc:	f021 0103 	bic.w	r1, r1, #3
 8006fd0:	3d03      	subs	r5, #3
 8006fd2:	45a8      	cmp	r8, r5
 8006fd4:	bf38      	it	cc
 8006fd6:	2100      	movcc	r1, #0
 8006fd8:	440b      	add	r3, r1
 8006fda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fde:	b191      	cbz	r1, 8007006 <__mdiff+0x11a>
 8006fe0:	6117      	str	r7, [r2, #16]
 8006fe2:	e79d      	b.n	8006f20 <__mdiff+0x34>
 8006fe4:	f854 1b04 	ldr.w	r1, [r4], #4
 8006fe8:	46e6      	mov	lr, ip
 8006fea:	0c08      	lsrs	r0, r1, #16
 8006fec:	fa1c fc81 	uxtah	ip, ip, r1
 8006ff0:	4471      	add	r1, lr
 8006ff2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ff6:	b289      	uxth	r1, r1
 8006ff8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ffc:	f846 1b04 	str.w	r1, [r6], #4
 8007000:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007004:	e7dd      	b.n	8006fc2 <__mdiff+0xd6>
 8007006:	3f01      	subs	r7, #1
 8007008:	e7e7      	b.n	8006fda <__mdiff+0xee>
 800700a:	bf00      	nop
 800700c:	08007d58 	.word	0x08007d58
 8007010:	08007d69 	.word	0x08007d69

08007014 <__d2b>:
 8007014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007018:	460f      	mov	r7, r1
 800701a:	2101      	movs	r1, #1
 800701c:	ec59 8b10 	vmov	r8, r9, d0
 8007020:	4616      	mov	r6, r2
 8007022:	f7ff fcd5 	bl	80069d0 <_Balloc>
 8007026:	4604      	mov	r4, r0
 8007028:	b930      	cbnz	r0, 8007038 <__d2b+0x24>
 800702a:	4602      	mov	r2, r0
 800702c:	4b23      	ldr	r3, [pc, #140]	@ (80070bc <__d2b+0xa8>)
 800702e:	4824      	ldr	r0, [pc, #144]	@ (80070c0 <__d2b+0xac>)
 8007030:	f240 310f 	movw	r1, #783	@ 0x30f
 8007034:	f000 fae6 	bl	8007604 <__assert_func>
 8007038:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800703c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007040:	b10d      	cbz	r5, 8007046 <__d2b+0x32>
 8007042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007046:	9301      	str	r3, [sp, #4]
 8007048:	f1b8 0300 	subs.w	r3, r8, #0
 800704c:	d023      	beq.n	8007096 <__d2b+0x82>
 800704e:	4668      	mov	r0, sp
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	f7ff fd84 	bl	8006b5e <__lo0bits>
 8007056:	e9dd 1200 	ldrd	r1, r2, [sp]
 800705a:	b1d0      	cbz	r0, 8007092 <__d2b+0x7e>
 800705c:	f1c0 0320 	rsb	r3, r0, #32
 8007060:	fa02 f303 	lsl.w	r3, r2, r3
 8007064:	430b      	orrs	r3, r1
 8007066:	40c2      	lsrs	r2, r0
 8007068:	6163      	str	r3, [r4, #20]
 800706a:	9201      	str	r2, [sp, #4]
 800706c:	9b01      	ldr	r3, [sp, #4]
 800706e:	61a3      	str	r3, [r4, #24]
 8007070:	2b00      	cmp	r3, #0
 8007072:	bf0c      	ite	eq
 8007074:	2201      	moveq	r2, #1
 8007076:	2202      	movne	r2, #2
 8007078:	6122      	str	r2, [r4, #16]
 800707a:	b1a5      	cbz	r5, 80070a6 <__d2b+0x92>
 800707c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007080:	4405      	add	r5, r0
 8007082:	603d      	str	r5, [r7, #0]
 8007084:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007088:	6030      	str	r0, [r6, #0]
 800708a:	4620      	mov	r0, r4
 800708c:	b003      	add	sp, #12
 800708e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007092:	6161      	str	r1, [r4, #20]
 8007094:	e7ea      	b.n	800706c <__d2b+0x58>
 8007096:	a801      	add	r0, sp, #4
 8007098:	f7ff fd61 	bl	8006b5e <__lo0bits>
 800709c:	9b01      	ldr	r3, [sp, #4]
 800709e:	6163      	str	r3, [r4, #20]
 80070a0:	3020      	adds	r0, #32
 80070a2:	2201      	movs	r2, #1
 80070a4:	e7e8      	b.n	8007078 <__d2b+0x64>
 80070a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80070ae:	6038      	str	r0, [r7, #0]
 80070b0:	6918      	ldr	r0, [r3, #16]
 80070b2:	f7ff fd35 	bl	8006b20 <__hi0bits>
 80070b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070ba:	e7e5      	b.n	8007088 <__d2b+0x74>
 80070bc:	08007d58 	.word	0x08007d58
 80070c0:	08007d69 	.word	0x08007d69

080070c4 <__sfputc_r>:
 80070c4:	6893      	ldr	r3, [r2, #8]
 80070c6:	3b01      	subs	r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	b410      	push	{r4}
 80070cc:	6093      	str	r3, [r2, #8]
 80070ce:	da08      	bge.n	80070e2 <__sfputc_r+0x1e>
 80070d0:	6994      	ldr	r4, [r2, #24]
 80070d2:	42a3      	cmp	r3, r4
 80070d4:	db01      	blt.n	80070da <__sfputc_r+0x16>
 80070d6:	290a      	cmp	r1, #10
 80070d8:	d103      	bne.n	80070e2 <__sfputc_r+0x1e>
 80070da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070de:	f000 b9df 	b.w	80074a0 <__swbuf_r>
 80070e2:	6813      	ldr	r3, [r2, #0]
 80070e4:	1c58      	adds	r0, r3, #1
 80070e6:	6010      	str	r0, [r2, #0]
 80070e8:	7019      	strb	r1, [r3, #0]
 80070ea:	4608      	mov	r0, r1
 80070ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <__sfputs_r>:
 80070f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f4:	4606      	mov	r6, r0
 80070f6:	460f      	mov	r7, r1
 80070f8:	4614      	mov	r4, r2
 80070fa:	18d5      	adds	r5, r2, r3
 80070fc:	42ac      	cmp	r4, r5
 80070fe:	d101      	bne.n	8007104 <__sfputs_r+0x12>
 8007100:	2000      	movs	r0, #0
 8007102:	e007      	b.n	8007114 <__sfputs_r+0x22>
 8007104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007108:	463a      	mov	r2, r7
 800710a:	4630      	mov	r0, r6
 800710c:	f7ff ffda 	bl	80070c4 <__sfputc_r>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d1f3      	bne.n	80070fc <__sfputs_r+0xa>
 8007114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007118 <_vfiprintf_r>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	460d      	mov	r5, r1
 800711e:	b09d      	sub	sp, #116	@ 0x74
 8007120:	4614      	mov	r4, r2
 8007122:	4698      	mov	r8, r3
 8007124:	4606      	mov	r6, r0
 8007126:	b118      	cbz	r0, 8007130 <_vfiprintf_r+0x18>
 8007128:	6a03      	ldr	r3, [r0, #32]
 800712a:	b90b      	cbnz	r3, 8007130 <_vfiprintf_r+0x18>
 800712c:	f7fe fbec 	bl	8005908 <__sinit>
 8007130:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007132:	07d9      	lsls	r1, r3, #31
 8007134:	d405      	bmi.n	8007142 <_vfiprintf_r+0x2a>
 8007136:	89ab      	ldrh	r3, [r5, #12]
 8007138:	059a      	lsls	r2, r3, #22
 800713a:	d402      	bmi.n	8007142 <_vfiprintf_r+0x2a>
 800713c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800713e:	f7fe fcec 	bl	8005b1a <__retarget_lock_acquire_recursive>
 8007142:	89ab      	ldrh	r3, [r5, #12]
 8007144:	071b      	lsls	r3, r3, #28
 8007146:	d501      	bpl.n	800714c <_vfiprintf_r+0x34>
 8007148:	692b      	ldr	r3, [r5, #16]
 800714a:	b99b      	cbnz	r3, 8007174 <_vfiprintf_r+0x5c>
 800714c:	4629      	mov	r1, r5
 800714e:	4630      	mov	r0, r6
 8007150:	f000 f9e4 	bl	800751c <__swsetup_r>
 8007154:	b170      	cbz	r0, 8007174 <_vfiprintf_r+0x5c>
 8007156:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007158:	07dc      	lsls	r4, r3, #31
 800715a:	d504      	bpl.n	8007166 <_vfiprintf_r+0x4e>
 800715c:	f04f 30ff 	mov.w	r0, #4294967295
 8007160:	b01d      	add	sp, #116	@ 0x74
 8007162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007166:	89ab      	ldrh	r3, [r5, #12]
 8007168:	0598      	lsls	r0, r3, #22
 800716a:	d4f7      	bmi.n	800715c <_vfiprintf_r+0x44>
 800716c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800716e:	f7fe fcd5 	bl	8005b1c <__retarget_lock_release_recursive>
 8007172:	e7f3      	b.n	800715c <_vfiprintf_r+0x44>
 8007174:	2300      	movs	r3, #0
 8007176:	9309      	str	r3, [sp, #36]	@ 0x24
 8007178:	2320      	movs	r3, #32
 800717a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800717e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007182:	2330      	movs	r3, #48	@ 0x30
 8007184:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007334 <_vfiprintf_r+0x21c>
 8007188:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800718c:	f04f 0901 	mov.w	r9, #1
 8007190:	4623      	mov	r3, r4
 8007192:	469a      	mov	sl, r3
 8007194:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007198:	b10a      	cbz	r2, 800719e <_vfiprintf_r+0x86>
 800719a:	2a25      	cmp	r2, #37	@ 0x25
 800719c:	d1f9      	bne.n	8007192 <_vfiprintf_r+0x7a>
 800719e:	ebba 0b04 	subs.w	fp, sl, r4
 80071a2:	d00b      	beq.n	80071bc <_vfiprintf_r+0xa4>
 80071a4:	465b      	mov	r3, fp
 80071a6:	4622      	mov	r2, r4
 80071a8:	4629      	mov	r1, r5
 80071aa:	4630      	mov	r0, r6
 80071ac:	f7ff ffa1 	bl	80070f2 <__sfputs_r>
 80071b0:	3001      	adds	r0, #1
 80071b2:	f000 80a7 	beq.w	8007304 <_vfiprintf_r+0x1ec>
 80071b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071b8:	445a      	add	r2, fp
 80071ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80071bc:	f89a 3000 	ldrb.w	r3, [sl]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 809f 	beq.w	8007304 <_vfiprintf_r+0x1ec>
 80071c6:	2300      	movs	r3, #0
 80071c8:	f04f 32ff 	mov.w	r2, #4294967295
 80071cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071d0:	f10a 0a01 	add.w	sl, sl, #1
 80071d4:	9304      	str	r3, [sp, #16]
 80071d6:	9307      	str	r3, [sp, #28]
 80071d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80071de:	4654      	mov	r4, sl
 80071e0:	2205      	movs	r2, #5
 80071e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071e6:	4853      	ldr	r0, [pc, #332]	@ (8007334 <_vfiprintf_r+0x21c>)
 80071e8:	f7f9 f812 	bl	8000210 <memchr>
 80071ec:	9a04      	ldr	r2, [sp, #16]
 80071ee:	b9d8      	cbnz	r0, 8007228 <_vfiprintf_r+0x110>
 80071f0:	06d1      	lsls	r1, r2, #27
 80071f2:	bf44      	itt	mi
 80071f4:	2320      	movmi	r3, #32
 80071f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071fa:	0713      	lsls	r3, r2, #28
 80071fc:	bf44      	itt	mi
 80071fe:	232b      	movmi	r3, #43	@ 0x2b
 8007200:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007204:	f89a 3000 	ldrb.w	r3, [sl]
 8007208:	2b2a      	cmp	r3, #42	@ 0x2a
 800720a:	d015      	beq.n	8007238 <_vfiprintf_r+0x120>
 800720c:	9a07      	ldr	r2, [sp, #28]
 800720e:	4654      	mov	r4, sl
 8007210:	2000      	movs	r0, #0
 8007212:	f04f 0c0a 	mov.w	ip, #10
 8007216:	4621      	mov	r1, r4
 8007218:	f811 3b01 	ldrb.w	r3, [r1], #1
 800721c:	3b30      	subs	r3, #48	@ 0x30
 800721e:	2b09      	cmp	r3, #9
 8007220:	d94b      	bls.n	80072ba <_vfiprintf_r+0x1a2>
 8007222:	b1b0      	cbz	r0, 8007252 <_vfiprintf_r+0x13a>
 8007224:	9207      	str	r2, [sp, #28]
 8007226:	e014      	b.n	8007252 <_vfiprintf_r+0x13a>
 8007228:	eba0 0308 	sub.w	r3, r0, r8
 800722c:	fa09 f303 	lsl.w	r3, r9, r3
 8007230:	4313      	orrs	r3, r2
 8007232:	9304      	str	r3, [sp, #16]
 8007234:	46a2      	mov	sl, r4
 8007236:	e7d2      	b.n	80071de <_vfiprintf_r+0xc6>
 8007238:	9b03      	ldr	r3, [sp, #12]
 800723a:	1d19      	adds	r1, r3, #4
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	9103      	str	r1, [sp, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	bfbb      	ittet	lt
 8007244:	425b      	neglt	r3, r3
 8007246:	f042 0202 	orrlt.w	r2, r2, #2
 800724a:	9307      	strge	r3, [sp, #28]
 800724c:	9307      	strlt	r3, [sp, #28]
 800724e:	bfb8      	it	lt
 8007250:	9204      	strlt	r2, [sp, #16]
 8007252:	7823      	ldrb	r3, [r4, #0]
 8007254:	2b2e      	cmp	r3, #46	@ 0x2e
 8007256:	d10a      	bne.n	800726e <_vfiprintf_r+0x156>
 8007258:	7863      	ldrb	r3, [r4, #1]
 800725a:	2b2a      	cmp	r3, #42	@ 0x2a
 800725c:	d132      	bne.n	80072c4 <_vfiprintf_r+0x1ac>
 800725e:	9b03      	ldr	r3, [sp, #12]
 8007260:	1d1a      	adds	r2, r3, #4
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	9203      	str	r2, [sp, #12]
 8007266:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800726a:	3402      	adds	r4, #2
 800726c:	9305      	str	r3, [sp, #20]
 800726e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007344 <_vfiprintf_r+0x22c>
 8007272:	7821      	ldrb	r1, [r4, #0]
 8007274:	2203      	movs	r2, #3
 8007276:	4650      	mov	r0, sl
 8007278:	f7f8 ffca 	bl	8000210 <memchr>
 800727c:	b138      	cbz	r0, 800728e <_vfiprintf_r+0x176>
 800727e:	9b04      	ldr	r3, [sp, #16]
 8007280:	eba0 000a 	sub.w	r0, r0, sl
 8007284:	2240      	movs	r2, #64	@ 0x40
 8007286:	4082      	lsls	r2, r0
 8007288:	4313      	orrs	r3, r2
 800728a:	3401      	adds	r4, #1
 800728c:	9304      	str	r3, [sp, #16]
 800728e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007292:	4829      	ldr	r0, [pc, #164]	@ (8007338 <_vfiprintf_r+0x220>)
 8007294:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007298:	2206      	movs	r2, #6
 800729a:	f7f8 ffb9 	bl	8000210 <memchr>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d03f      	beq.n	8007322 <_vfiprintf_r+0x20a>
 80072a2:	4b26      	ldr	r3, [pc, #152]	@ (800733c <_vfiprintf_r+0x224>)
 80072a4:	bb1b      	cbnz	r3, 80072ee <_vfiprintf_r+0x1d6>
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	3307      	adds	r3, #7
 80072aa:	f023 0307 	bic.w	r3, r3, #7
 80072ae:	3308      	adds	r3, #8
 80072b0:	9303      	str	r3, [sp, #12]
 80072b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b4:	443b      	add	r3, r7
 80072b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80072b8:	e76a      	b.n	8007190 <_vfiprintf_r+0x78>
 80072ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80072be:	460c      	mov	r4, r1
 80072c0:	2001      	movs	r0, #1
 80072c2:	e7a8      	b.n	8007216 <_vfiprintf_r+0xfe>
 80072c4:	2300      	movs	r3, #0
 80072c6:	3401      	adds	r4, #1
 80072c8:	9305      	str	r3, [sp, #20]
 80072ca:	4619      	mov	r1, r3
 80072cc:	f04f 0c0a 	mov.w	ip, #10
 80072d0:	4620      	mov	r0, r4
 80072d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072d6:	3a30      	subs	r2, #48	@ 0x30
 80072d8:	2a09      	cmp	r2, #9
 80072da:	d903      	bls.n	80072e4 <_vfiprintf_r+0x1cc>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d0c6      	beq.n	800726e <_vfiprintf_r+0x156>
 80072e0:	9105      	str	r1, [sp, #20]
 80072e2:	e7c4      	b.n	800726e <_vfiprintf_r+0x156>
 80072e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80072e8:	4604      	mov	r4, r0
 80072ea:	2301      	movs	r3, #1
 80072ec:	e7f0      	b.n	80072d0 <_vfiprintf_r+0x1b8>
 80072ee:	ab03      	add	r3, sp, #12
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	462a      	mov	r2, r5
 80072f4:	4b12      	ldr	r3, [pc, #72]	@ (8007340 <_vfiprintf_r+0x228>)
 80072f6:	a904      	add	r1, sp, #16
 80072f8:	4630      	mov	r0, r6
 80072fa:	f7fd fec3 	bl	8005084 <_printf_float>
 80072fe:	4607      	mov	r7, r0
 8007300:	1c78      	adds	r0, r7, #1
 8007302:	d1d6      	bne.n	80072b2 <_vfiprintf_r+0x19a>
 8007304:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007306:	07d9      	lsls	r1, r3, #31
 8007308:	d405      	bmi.n	8007316 <_vfiprintf_r+0x1fe>
 800730a:	89ab      	ldrh	r3, [r5, #12]
 800730c:	059a      	lsls	r2, r3, #22
 800730e:	d402      	bmi.n	8007316 <_vfiprintf_r+0x1fe>
 8007310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007312:	f7fe fc03 	bl	8005b1c <__retarget_lock_release_recursive>
 8007316:	89ab      	ldrh	r3, [r5, #12]
 8007318:	065b      	lsls	r3, r3, #25
 800731a:	f53f af1f 	bmi.w	800715c <_vfiprintf_r+0x44>
 800731e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007320:	e71e      	b.n	8007160 <_vfiprintf_r+0x48>
 8007322:	ab03      	add	r3, sp, #12
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	462a      	mov	r2, r5
 8007328:	4b05      	ldr	r3, [pc, #20]	@ (8007340 <_vfiprintf_r+0x228>)
 800732a:	a904      	add	r1, sp, #16
 800732c:	4630      	mov	r0, r6
 800732e:	f7fe f941 	bl	80055b4 <_printf_i>
 8007332:	e7e4      	b.n	80072fe <_vfiprintf_r+0x1e6>
 8007334:	08007dc2 	.word	0x08007dc2
 8007338:	08007dcc 	.word	0x08007dcc
 800733c:	08005085 	.word	0x08005085
 8007340:	080070f3 	.word	0x080070f3
 8007344:	08007dc8 	.word	0x08007dc8

08007348 <__sflush_r>:
 8007348:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800734c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007350:	0716      	lsls	r6, r2, #28
 8007352:	4605      	mov	r5, r0
 8007354:	460c      	mov	r4, r1
 8007356:	d454      	bmi.n	8007402 <__sflush_r+0xba>
 8007358:	684b      	ldr	r3, [r1, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	dc02      	bgt.n	8007364 <__sflush_r+0x1c>
 800735e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	dd48      	ble.n	80073f6 <__sflush_r+0xae>
 8007364:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007366:	2e00      	cmp	r6, #0
 8007368:	d045      	beq.n	80073f6 <__sflush_r+0xae>
 800736a:	2300      	movs	r3, #0
 800736c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007370:	682f      	ldr	r7, [r5, #0]
 8007372:	6a21      	ldr	r1, [r4, #32]
 8007374:	602b      	str	r3, [r5, #0]
 8007376:	d030      	beq.n	80073da <__sflush_r+0x92>
 8007378:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	0759      	lsls	r1, r3, #29
 800737e:	d505      	bpl.n	800738c <__sflush_r+0x44>
 8007380:	6863      	ldr	r3, [r4, #4]
 8007382:	1ad2      	subs	r2, r2, r3
 8007384:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007386:	b10b      	cbz	r3, 800738c <__sflush_r+0x44>
 8007388:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800738a:	1ad2      	subs	r2, r2, r3
 800738c:	2300      	movs	r3, #0
 800738e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007390:	6a21      	ldr	r1, [r4, #32]
 8007392:	4628      	mov	r0, r5
 8007394:	47b0      	blx	r6
 8007396:	1c43      	adds	r3, r0, #1
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	d106      	bne.n	80073aa <__sflush_r+0x62>
 800739c:	6829      	ldr	r1, [r5, #0]
 800739e:	291d      	cmp	r1, #29
 80073a0:	d82b      	bhi.n	80073fa <__sflush_r+0xb2>
 80073a2:	4a2a      	ldr	r2, [pc, #168]	@ (800744c <__sflush_r+0x104>)
 80073a4:	40ca      	lsrs	r2, r1
 80073a6:	07d6      	lsls	r6, r2, #31
 80073a8:	d527      	bpl.n	80073fa <__sflush_r+0xb2>
 80073aa:	2200      	movs	r2, #0
 80073ac:	6062      	str	r2, [r4, #4]
 80073ae:	04d9      	lsls	r1, r3, #19
 80073b0:	6922      	ldr	r2, [r4, #16]
 80073b2:	6022      	str	r2, [r4, #0]
 80073b4:	d504      	bpl.n	80073c0 <__sflush_r+0x78>
 80073b6:	1c42      	adds	r2, r0, #1
 80073b8:	d101      	bne.n	80073be <__sflush_r+0x76>
 80073ba:	682b      	ldr	r3, [r5, #0]
 80073bc:	b903      	cbnz	r3, 80073c0 <__sflush_r+0x78>
 80073be:	6560      	str	r0, [r4, #84]	@ 0x54
 80073c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073c2:	602f      	str	r7, [r5, #0]
 80073c4:	b1b9      	cbz	r1, 80073f6 <__sflush_r+0xae>
 80073c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073ca:	4299      	cmp	r1, r3
 80073cc:	d002      	beq.n	80073d4 <__sflush_r+0x8c>
 80073ce:	4628      	mov	r0, r5
 80073d0:	f7ff f9fe 	bl	80067d0 <_free_r>
 80073d4:	2300      	movs	r3, #0
 80073d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80073d8:	e00d      	b.n	80073f6 <__sflush_r+0xae>
 80073da:	2301      	movs	r3, #1
 80073dc:	4628      	mov	r0, r5
 80073de:	47b0      	blx	r6
 80073e0:	4602      	mov	r2, r0
 80073e2:	1c50      	adds	r0, r2, #1
 80073e4:	d1c9      	bne.n	800737a <__sflush_r+0x32>
 80073e6:	682b      	ldr	r3, [r5, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0c6      	beq.n	800737a <__sflush_r+0x32>
 80073ec:	2b1d      	cmp	r3, #29
 80073ee:	d001      	beq.n	80073f4 <__sflush_r+0xac>
 80073f0:	2b16      	cmp	r3, #22
 80073f2:	d11e      	bne.n	8007432 <__sflush_r+0xea>
 80073f4:	602f      	str	r7, [r5, #0]
 80073f6:	2000      	movs	r0, #0
 80073f8:	e022      	b.n	8007440 <__sflush_r+0xf8>
 80073fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073fe:	b21b      	sxth	r3, r3
 8007400:	e01b      	b.n	800743a <__sflush_r+0xf2>
 8007402:	690f      	ldr	r7, [r1, #16]
 8007404:	2f00      	cmp	r7, #0
 8007406:	d0f6      	beq.n	80073f6 <__sflush_r+0xae>
 8007408:	0793      	lsls	r3, r2, #30
 800740a:	680e      	ldr	r6, [r1, #0]
 800740c:	bf08      	it	eq
 800740e:	694b      	ldreq	r3, [r1, #20]
 8007410:	600f      	str	r7, [r1, #0]
 8007412:	bf18      	it	ne
 8007414:	2300      	movne	r3, #0
 8007416:	eba6 0807 	sub.w	r8, r6, r7
 800741a:	608b      	str	r3, [r1, #8]
 800741c:	f1b8 0f00 	cmp.w	r8, #0
 8007420:	dde9      	ble.n	80073f6 <__sflush_r+0xae>
 8007422:	6a21      	ldr	r1, [r4, #32]
 8007424:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007426:	4643      	mov	r3, r8
 8007428:	463a      	mov	r2, r7
 800742a:	4628      	mov	r0, r5
 800742c:	47b0      	blx	r6
 800742e:	2800      	cmp	r0, #0
 8007430:	dc08      	bgt.n	8007444 <__sflush_r+0xfc>
 8007432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800743a:	81a3      	strh	r3, [r4, #12]
 800743c:	f04f 30ff 	mov.w	r0, #4294967295
 8007440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007444:	4407      	add	r7, r0
 8007446:	eba8 0800 	sub.w	r8, r8, r0
 800744a:	e7e7      	b.n	800741c <__sflush_r+0xd4>
 800744c:	20400001 	.word	0x20400001

08007450 <_fflush_r>:
 8007450:	b538      	push	{r3, r4, r5, lr}
 8007452:	690b      	ldr	r3, [r1, #16]
 8007454:	4605      	mov	r5, r0
 8007456:	460c      	mov	r4, r1
 8007458:	b913      	cbnz	r3, 8007460 <_fflush_r+0x10>
 800745a:	2500      	movs	r5, #0
 800745c:	4628      	mov	r0, r5
 800745e:	bd38      	pop	{r3, r4, r5, pc}
 8007460:	b118      	cbz	r0, 800746a <_fflush_r+0x1a>
 8007462:	6a03      	ldr	r3, [r0, #32]
 8007464:	b90b      	cbnz	r3, 800746a <_fflush_r+0x1a>
 8007466:	f7fe fa4f 	bl	8005908 <__sinit>
 800746a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0f3      	beq.n	800745a <_fflush_r+0xa>
 8007472:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007474:	07d0      	lsls	r0, r2, #31
 8007476:	d404      	bmi.n	8007482 <_fflush_r+0x32>
 8007478:	0599      	lsls	r1, r3, #22
 800747a:	d402      	bmi.n	8007482 <_fflush_r+0x32>
 800747c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800747e:	f7fe fb4c 	bl	8005b1a <__retarget_lock_acquire_recursive>
 8007482:	4628      	mov	r0, r5
 8007484:	4621      	mov	r1, r4
 8007486:	f7ff ff5f 	bl	8007348 <__sflush_r>
 800748a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800748c:	07da      	lsls	r2, r3, #31
 800748e:	4605      	mov	r5, r0
 8007490:	d4e4      	bmi.n	800745c <_fflush_r+0xc>
 8007492:	89a3      	ldrh	r3, [r4, #12]
 8007494:	059b      	lsls	r3, r3, #22
 8007496:	d4e1      	bmi.n	800745c <_fflush_r+0xc>
 8007498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800749a:	f7fe fb3f 	bl	8005b1c <__retarget_lock_release_recursive>
 800749e:	e7dd      	b.n	800745c <_fflush_r+0xc>

080074a0 <__swbuf_r>:
 80074a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a2:	460e      	mov	r6, r1
 80074a4:	4614      	mov	r4, r2
 80074a6:	4605      	mov	r5, r0
 80074a8:	b118      	cbz	r0, 80074b2 <__swbuf_r+0x12>
 80074aa:	6a03      	ldr	r3, [r0, #32]
 80074ac:	b90b      	cbnz	r3, 80074b2 <__swbuf_r+0x12>
 80074ae:	f7fe fa2b 	bl	8005908 <__sinit>
 80074b2:	69a3      	ldr	r3, [r4, #24]
 80074b4:	60a3      	str	r3, [r4, #8]
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	071a      	lsls	r2, r3, #28
 80074ba:	d501      	bpl.n	80074c0 <__swbuf_r+0x20>
 80074bc:	6923      	ldr	r3, [r4, #16]
 80074be:	b943      	cbnz	r3, 80074d2 <__swbuf_r+0x32>
 80074c0:	4621      	mov	r1, r4
 80074c2:	4628      	mov	r0, r5
 80074c4:	f000 f82a 	bl	800751c <__swsetup_r>
 80074c8:	b118      	cbz	r0, 80074d2 <__swbuf_r+0x32>
 80074ca:	f04f 37ff 	mov.w	r7, #4294967295
 80074ce:	4638      	mov	r0, r7
 80074d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	6922      	ldr	r2, [r4, #16]
 80074d6:	1a98      	subs	r0, r3, r2
 80074d8:	6963      	ldr	r3, [r4, #20]
 80074da:	b2f6      	uxtb	r6, r6
 80074dc:	4283      	cmp	r3, r0
 80074de:	4637      	mov	r7, r6
 80074e0:	dc05      	bgt.n	80074ee <__swbuf_r+0x4e>
 80074e2:	4621      	mov	r1, r4
 80074e4:	4628      	mov	r0, r5
 80074e6:	f7ff ffb3 	bl	8007450 <_fflush_r>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d1ed      	bne.n	80074ca <__swbuf_r+0x2a>
 80074ee:	68a3      	ldr	r3, [r4, #8]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	60a3      	str	r3, [r4, #8]
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	6022      	str	r2, [r4, #0]
 80074fa:	701e      	strb	r6, [r3, #0]
 80074fc:	6962      	ldr	r2, [r4, #20]
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	429a      	cmp	r2, r3
 8007502:	d004      	beq.n	800750e <__swbuf_r+0x6e>
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	07db      	lsls	r3, r3, #31
 8007508:	d5e1      	bpl.n	80074ce <__swbuf_r+0x2e>
 800750a:	2e0a      	cmp	r6, #10
 800750c:	d1df      	bne.n	80074ce <__swbuf_r+0x2e>
 800750e:	4621      	mov	r1, r4
 8007510:	4628      	mov	r0, r5
 8007512:	f7ff ff9d 	bl	8007450 <_fflush_r>
 8007516:	2800      	cmp	r0, #0
 8007518:	d0d9      	beq.n	80074ce <__swbuf_r+0x2e>
 800751a:	e7d6      	b.n	80074ca <__swbuf_r+0x2a>

0800751c <__swsetup_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4b29      	ldr	r3, [pc, #164]	@ (80075c4 <__swsetup_r+0xa8>)
 8007520:	4605      	mov	r5, r0
 8007522:	6818      	ldr	r0, [r3, #0]
 8007524:	460c      	mov	r4, r1
 8007526:	b118      	cbz	r0, 8007530 <__swsetup_r+0x14>
 8007528:	6a03      	ldr	r3, [r0, #32]
 800752a:	b90b      	cbnz	r3, 8007530 <__swsetup_r+0x14>
 800752c:	f7fe f9ec 	bl	8005908 <__sinit>
 8007530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007534:	0719      	lsls	r1, r3, #28
 8007536:	d422      	bmi.n	800757e <__swsetup_r+0x62>
 8007538:	06da      	lsls	r2, r3, #27
 800753a:	d407      	bmi.n	800754c <__swsetup_r+0x30>
 800753c:	2209      	movs	r2, #9
 800753e:	602a      	str	r2, [r5, #0]
 8007540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	f04f 30ff 	mov.w	r0, #4294967295
 800754a:	e033      	b.n	80075b4 <__swsetup_r+0x98>
 800754c:	0758      	lsls	r0, r3, #29
 800754e:	d512      	bpl.n	8007576 <__swsetup_r+0x5a>
 8007550:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007552:	b141      	cbz	r1, 8007566 <__swsetup_r+0x4a>
 8007554:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007558:	4299      	cmp	r1, r3
 800755a:	d002      	beq.n	8007562 <__swsetup_r+0x46>
 800755c:	4628      	mov	r0, r5
 800755e:	f7ff f937 	bl	80067d0 <_free_r>
 8007562:	2300      	movs	r3, #0
 8007564:	6363      	str	r3, [r4, #52]	@ 0x34
 8007566:	89a3      	ldrh	r3, [r4, #12]
 8007568:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800756c:	81a3      	strh	r3, [r4, #12]
 800756e:	2300      	movs	r3, #0
 8007570:	6063      	str	r3, [r4, #4]
 8007572:	6923      	ldr	r3, [r4, #16]
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	89a3      	ldrh	r3, [r4, #12]
 8007578:	f043 0308 	orr.w	r3, r3, #8
 800757c:	81a3      	strh	r3, [r4, #12]
 800757e:	6923      	ldr	r3, [r4, #16]
 8007580:	b94b      	cbnz	r3, 8007596 <__swsetup_r+0x7a>
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800758c:	d003      	beq.n	8007596 <__swsetup_r+0x7a>
 800758e:	4621      	mov	r1, r4
 8007590:	4628      	mov	r0, r5
 8007592:	f000 f8c1 	bl	8007718 <__smakebuf_r>
 8007596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800759a:	f013 0201 	ands.w	r2, r3, #1
 800759e:	d00a      	beq.n	80075b6 <__swsetup_r+0x9a>
 80075a0:	2200      	movs	r2, #0
 80075a2:	60a2      	str	r2, [r4, #8]
 80075a4:	6962      	ldr	r2, [r4, #20]
 80075a6:	4252      	negs	r2, r2
 80075a8:	61a2      	str	r2, [r4, #24]
 80075aa:	6922      	ldr	r2, [r4, #16]
 80075ac:	b942      	cbnz	r2, 80075c0 <__swsetup_r+0xa4>
 80075ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075b2:	d1c5      	bne.n	8007540 <__swsetup_r+0x24>
 80075b4:	bd38      	pop	{r3, r4, r5, pc}
 80075b6:	0799      	lsls	r1, r3, #30
 80075b8:	bf58      	it	pl
 80075ba:	6962      	ldrpl	r2, [r4, #20]
 80075bc:	60a2      	str	r2, [r4, #8]
 80075be:	e7f4      	b.n	80075aa <__swsetup_r+0x8e>
 80075c0:	2000      	movs	r0, #0
 80075c2:	e7f7      	b.n	80075b4 <__swsetup_r+0x98>
 80075c4:	2000001c 	.word	0x2000001c

080075c8 <_sbrk_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d06      	ldr	r5, [pc, #24]	@ (80075e4 <_sbrk_r+0x1c>)
 80075cc:	2300      	movs	r3, #0
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	f7f9 ff7c 	bl	80014d0 <_sbrk>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_sbrk_r+0x1a>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_sbrk_r+0x1a>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	2000044c 	.word	0x2000044c

080075e8 <memcpy>:
 80075e8:	440a      	add	r2, r1
 80075ea:	4291      	cmp	r1, r2
 80075ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80075f0:	d100      	bne.n	80075f4 <memcpy+0xc>
 80075f2:	4770      	bx	lr
 80075f4:	b510      	push	{r4, lr}
 80075f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075fe:	4291      	cmp	r1, r2
 8007600:	d1f9      	bne.n	80075f6 <memcpy+0xe>
 8007602:	bd10      	pop	{r4, pc}

08007604 <__assert_func>:
 8007604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007606:	4614      	mov	r4, r2
 8007608:	461a      	mov	r2, r3
 800760a:	4b09      	ldr	r3, [pc, #36]	@ (8007630 <__assert_func+0x2c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4605      	mov	r5, r0
 8007610:	68d8      	ldr	r0, [r3, #12]
 8007612:	b14c      	cbz	r4, 8007628 <__assert_func+0x24>
 8007614:	4b07      	ldr	r3, [pc, #28]	@ (8007634 <__assert_func+0x30>)
 8007616:	9100      	str	r1, [sp, #0]
 8007618:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800761c:	4906      	ldr	r1, [pc, #24]	@ (8007638 <__assert_func+0x34>)
 800761e:	462b      	mov	r3, r5
 8007620:	f000 f842 	bl	80076a8 <fiprintf>
 8007624:	f000 f8d6 	bl	80077d4 <abort>
 8007628:	4b04      	ldr	r3, [pc, #16]	@ (800763c <__assert_func+0x38>)
 800762a:	461c      	mov	r4, r3
 800762c:	e7f3      	b.n	8007616 <__assert_func+0x12>
 800762e:	bf00      	nop
 8007630:	2000001c 	.word	0x2000001c
 8007634:	08007ddd 	.word	0x08007ddd
 8007638:	08007dea 	.word	0x08007dea
 800763c:	08007e18 	.word	0x08007e18

08007640 <_calloc_r>:
 8007640:	b570      	push	{r4, r5, r6, lr}
 8007642:	fba1 5402 	umull	r5, r4, r1, r2
 8007646:	b934      	cbnz	r4, 8007656 <_calloc_r+0x16>
 8007648:	4629      	mov	r1, r5
 800764a:	f7ff f935 	bl	80068b8 <_malloc_r>
 800764e:	4606      	mov	r6, r0
 8007650:	b928      	cbnz	r0, 800765e <_calloc_r+0x1e>
 8007652:	4630      	mov	r0, r6
 8007654:	bd70      	pop	{r4, r5, r6, pc}
 8007656:	220c      	movs	r2, #12
 8007658:	6002      	str	r2, [r0, #0]
 800765a:	2600      	movs	r6, #0
 800765c:	e7f9      	b.n	8007652 <_calloc_r+0x12>
 800765e:	462a      	mov	r2, r5
 8007660:	4621      	mov	r1, r4
 8007662:	f7fe f9dc 	bl	8005a1e <memset>
 8007666:	e7f4      	b.n	8007652 <_calloc_r+0x12>

08007668 <__ascii_mbtowc>:
 8007668:	b082      	sub	sp, #8
 800766a:	b901      	cbnz	r1, 800766e <__ascii_mbtowc+0x6>
 800766c:	a901      	add	r1, sp, #4
 800766e:	b142      	cbz	r2, 8007682 <__ascii_mbtowc+0x1a>
 8007670:	b14b      	cbz	r3, 8007686 <__ascii_mbtowc+0x1e>
 8007672:	7813      	ldrb	r3, [r2, #0]
 8007674:	600b      	str	r3, [r1, #0]
 8007676:	7812      	ldrb	r2, [r2, #0]
 8007678:	1e10      	subs	r0, r2, #0
 800767a:	bf18      	it	ne
 800767c:	2001      	movne	r0, #1
 800767e:	b002      	add	sp, #8
 8007680:	4770      	bx	lr
 8007682:	4610      	mov	r0, r2
 8007684:	e7fb      	b.n	800767e <__ascii_mbtowc+0x16>
 8007686:	f06f 0001 	mvn.w	r0, #1
 800768a:	e7f8      	b.n	800767e <__ascii_mbtowc+0x16>

0800768c <__ascii_wctomb>:
 800768c:	4603      	mov	r3, r0
 800768e:	4608      	mov	r0, r1
 8007690:	b141      	cbz	r1, 80076a4 <__ascii_wctomb+0x18>
 8007692:	2aff      	cmp	r2, #255	@ 0xff
 8007694:	d904      	bls.n	80076a0 <__ascii_wctomb+0x14>
 8007696:	228a      	movs	r2, #138	@ 0x8a
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	f04f 30ff 	mov.w	r0, #4294967295
 800769e:	4770      	bx	lr
 80076a0:	700a      	strb	r2, [r1, #0]
 80076a2:	2001      	movs	r0, #1
 80076a4:	4770      	bx	lr
	...

080076a8 <fiprintf>:
 80076a8:	b40e      	push	{r1, r2, r3}
 80076aa:	b503      	push	{r0, r1, lr}
 80076ac:	4601      	mov	r1, r0
 80076ae:	ab03      	add	r3, sp, #12
 80076b0:	4805      	ldr	r0, [pc, #20]	@ (80076c8 <fiprintf+0x20>)
 80076b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b6:	6800      	ldr	r0, [r0, #0]
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	f7ff fd2d 	bl	8007118 <_vfiprintf_r>
 80076be:	b002      	add	sp, #8
 80076c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076c4:	b003      	add	sp, #12
 80076c6:	4770      	bx	lr
 80076c8:	2000001c 	.word	0x2000001c

080076cc <__swhatbuf_r>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	460c      	mov	r4, r1
 80076d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d4:	2900      	cmp	r1, #0
 80076d6:	b096      	sub	sp, #88	@ 0x58
 80076d8:	4615      	mov	r5, r2
 80076da:	461e      	mov	r6, r3
 80076dc:	da0d      	bge.n	80076fa <__swhatbuf_r+0x2e>
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80076e4:	f04f 0100 	mov.w	r1, #0
 80076e8:	bf14      	ite	ne
 80076ea:	2340      	movne	r3, #64	@ 0x40
 80076ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80076f0:	2000      	movs	r0, #0
 80076f2:	6031      	str	r1, [r6, #0]
 80076f4:	602b      	str	r3, [r5, #0]
 80076f6:	b016      	add	sp, #88	@ 0x58
 80076f8:	bd70      	pop	{r4, r5, r6, pc}
 80076fa:	466a      	mov	r2, sp
 80076fc:	f000 f848 	bl	8007790 <_fstat_r>
 8007700:	2800      	cmp	r0, #0
 8007702:	dbec      	blt.n	80076de <__swhatbuf_r+0x12>
 8007704:	9901      	ldr	r1, [sp, #4]
 8007706:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800770a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800770e:	4259      	negs	r1, r3
 8007710:	4159      	adcs	r1, r3
 8007712:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007716:	e7eb      	b.n	80076f0 <__swhatbuf_r+0x24>

08007718 <__smakebuf_r>:
 8007718:	898b      	ldrh	r3, [r1, #12]
 800771a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800771c:	079d      	lsls	r5, r3, #30
 800771e:	4606      	mov	r6, r0
 8007720:	460c      	mov	r4, r1
 8007722:	d507      	bpl.n	8007734 <__smakebuf_r+0x1c>
 8007724:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	6123      	str	r3, [r4, #16]
 800772c:	2301      	movs	r3, #1
 800772e:	6163      	str	r3, [r4, #20]
 8007730:	b003      	add	sp, #12
 8007732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007734:	ab01      	add	r3, sp, #4
 8007736:	466a      	mov	r2, sp
 8007738:	f7ff ffc8 	bl	80076cc <__swhatbuf_r>
 800773c:	9f00      	ldr	r7, [sp, #0]
 800773e:	4605      	mov	r5, r0
 8007740:	4639      	mov	r1, r7
 8007742:	4630      	mov	r0, r6
 8007744:	f7ff f8b8 	bl	80068b8 <_malloc_r>
 8007748:	b948      	cbnz	r0, 800775e <__smakebuf_r+0x46>
 800774a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800774e:	059a      	lsls	r2, r3, #22
 8007750:	d4ee      	bmi.n	8007730 <__smakebuf_r+0x18>
 8007752:	f023 0303 	bic.w	r3, r3, #3
 8007756:	f043 0302 	orr.w	r3, r3, #2
 800775a:	81a3      	strh	r3, [r4, #12]
 800775c:	e7e2      	b.n	8007724 <__smakebuf_r+0xc>
 800775e:	89a3      	ldrh	r3, [r4, #12]
 8007760:	6020      	str	r0, [r4, #0]
 8007762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007766:	81a3      	strh	r3, [r4, #12]
 8007768:	9b01      	ldr	r3, [sp, #4]
 800776a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800776e:	b15b      	cbz	r3, 8007788 <__smakebuf_r+0x70>
 8007770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007774:	4630      	mov	r0, r6
 8007776:	f000 f81d 	bl	80077b4 <_isatty_r>
 800777a:	b128      	cbz	r0, 8007788 <__smakebuf_r+0x70>
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	f023 0303 	bic.w	r3, r3, #3
 8007782:	f043 0301 	orr.w	r3, r3, #1
 8007786:	81a3      	strh	r3, [r4, #12]
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	431d      	orrs	r5, r3
 800778c:	81a5      	strh	r5, [r4, #12]
 800778e:	e7cf      	b.n	8007730 <__smakebuf_r+0x18>

08007790 <_fstat_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	4d07      	ldr	r5, [pc, #28]	@ (80077b0 <_fstat_r+0x20>)
 8007794:	2300      	movs	r3, #0
 8007796:	4604      	mov	r4, r0
 8007798:	4608      	mov	r0, r1
 800779a:	4611      	mov	r1, r2
 800779c:	602b      	str	r3, [r5, #0]
 800779e:	f7f9 fe6e 	bl	800147e <_fstat>
 80077a2:	1c43      	adds	r3, r0, #1
 80077a4:	d102      	bne.n	80077ac <_fstat_r+0x1c>
 80077a6:	682b      	ldr	r3, [r5, #0]
 80077a8:	b103      	cbz	r3, 80077ac <_fstat_r+0x1c>
 80077aa:	6023      	str	r3, [r4, #0]
 80077ac:	bd38      	pop	{r3, r4, r5, pc}
 80077ae:	bf00      	nop
 80077b0:	2000044c 	.word	0x2000044c

080077b4 <_isatty_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4d06      	ldr	r5, [pc, #24]	@ (80077d0 <_isatty_r+0x1c>)
 80077b8:	2300      	movs	r3, #0
 80077ba:	4604      	mov	r4, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	602b      	str	r3, [r5, #0]
 80077c0:	f7f9 fe6d 	bl	800149e <_isatty>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_isatty_r+0x1a>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_isatty_r+0x1a>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	2000044c 	.word	0x2000044c

080077d4 <abort>:
 80077d4:	b508      	push	{r3, lr}
 80077d6:	2006      	movs	r0, #6
 80077d8:	f000 f82c 	bl	8007834 <raise>
 80077dc:	2001      	movs	r0, #1
 80077de:	f7f9 fdfe 	bl	80013de <_exit>

080077e2 <_raise_r>:
 80077e2:	291f      	cmp	r1, #31
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4605      	mov	r5, r0
 80077e8:	460c      	mov	r4, r1
 80077ea:	d904      	bls.n	80077f6 <_raise_r+0x14>
 80077ec:	2316      	movs	r3, #22
 80077ee:	6003      	str	r3, [r0, #0]
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
 80077f4:	bd38      	pop	{r3, r4, r5, pc}
 80077f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80077f8:	b112      	cbz	r2, 8007800 <_raise_r+0x1e>
 80077fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077fe:	b94b      	cbnz	r3, 8007814 <_raise_r+0x32>
 8007800:	4628      	mov	r0, r5
 8007802:	f000 f831 	bl	8007868 <_getpid_r>
 8007806:	4622      	mov	r2, r4
 8007808:	4601      	mov	r1, r0
 800780a:	4628      	mov	r0, r5
 800780c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007810:	f000 b818 	b.w	8007844 <_kill_r>
 8007814:	2b01      	cmp	r3, #1
 8007816:	d00a      	beq.n	800782e <_raise_r+0x4c>
 8007818:	1c59      	adds	r1, r3, #1
 800781a:	d103      	bne.n	8007824 <_raise_r+0x42>
 800781c:	2316      	movs	r3, #22
 800781e:	6003      	str	r3, [r0, #0]
 8007820:	2001      	movs	r0, #1
 8007822:	e7e7      	b.n	80077f4 <_raise_r+0x12>
 8007824:	2100      	movs	r1, #0
 8007826:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800782a:	4620      	mov	r0, r4
 800782c:	4798      	blx	r3
 800782e:	2000      	movs	r0, #0
 8007830:	e7e0      	b.n	80077f4 <_raise_r+0x12>
	...

08007834 <raise>:
 8007834:	4b02      	ldr	r3, [pc, #8]	@ (8007840 <raise+0xc>)
 8007836:	4601      	mov	r1, r0
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	f7ff bfd2 	b.w	80077e2 <_raise_r>
 800783e:	bf00      	nop
 8007840:	2000001c 	.word	0x2000001c

08007844 <_kill_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4d07      	ldr	r5, [pc, #28]	@ (8007864 <_kill_r+0x20>)
 8007848:	2300      	movs	r3, #0
 800784a:	4604      	mov	r4, r0
 800784c:	4608      	mov	r0, r1
 800784e:	4611      	mov	r1, r2
 8007850:	602b      	str	r3, [r5, #0]
 8007852:	f7f9 fdb4 	bl	80013be <_kill>
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	d102      	bne.n	8007860 <_kill_r+0x1c>
 800785a:	682b      	ldr	r3, [r5, #0]
 800785c:	b103      	cbz	r3, 8007860 <_kill_r+0x1c>
 800785e:	6023      	str	r3, [r4, #0]
 8007860:	bd38      	pop	{r3, r4, r5, pc}
 8007862:	bf00      	nop
 8007864:	2000044c 	.word	0x2000044c

08007868 <_getpid_r>:
 8007868:	f7f9 bda1 	b.w	80013ae <_getpid>

0800786c <_init>:
 800786c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786e:	bf00      	nop
 8007870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007872:	bc08      	pop	{r3}
 8007874:	469e      	mov	lr, r3
 8007876:	4770      	bx	lr

08007878 <_fini>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	bf00      	nop
 800787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787e:	bc08      	pop	{r3}
 8007880:	469e      	mov	lr, r3
 8007882:	4770      	bx	lr
